{
    "Chart_2": {
        "function_num": 2,
        "functions": [
            {
                "path": "source/org/jfree/data/general/DatasetUtilities.java",
                "start_loc": 740,
                "end_loc": 785,
                "buggy_function": "    public static Range iterateDomainBounds(XYDataset dataset,\n                                            boolean includeInterval) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n        double lvalue;\n        double uvalue;\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            IntervalXYDataset intervalXYData = (IntervalXYDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    lvalue = intervalXYData.getStartXValue(series, item);\n                    uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    lvalue = dataset.getXValue(series, item);\n                    uvalue = lvalue;\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        if (minimum > maximum) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
                "fixed_function": "    public static Range iterateDomainBounds(XYDataset dataset,\n                                            boolean includeInterval) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n        double lvalue;\n        double uvalue;\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            IntervalXYDataset intervalXYData = (IntervalXYDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double value = intervalXYData.getXValue(series, item);\n                    lvalue = intervalXYData.getStartXValue(series, item);\n                    uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        minimum = Math.min(minimum, uvalue);\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    lvalue = dataset.getXValue(series, item);\n                    uvalue = lvalue;\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        if (minimum > maximum) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
                "comment": "    /**\n     * Iterates over the items in an {@link XYDataset} to find\n     * the range of x-values.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     * @param includeInterval  a flag that determines, for an\n     *          {@link IntervalXYDataset}, whether the x-interval or just the\n     *          x-value is used to determine the overall range.\n     *\n     * @return The range (possibly <code>null</code>).\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2"
                ]
            },
            {
                "path": "source/org/jfree/data/general/DatasetUtilities.java",
                "start_loc": 1229,
                "end_loc": 1289,
                "buggy_function": "    public static Range iterateRangeBounds(XYDataset dataset,\n            boolean includeInterval) {\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n\n        // handle three cases by dataset type\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            // handle special case of IntervalXYDataset\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double lvalue = ixyd.getStartYValue(series, item);\n                    double uvalue = ixyd.getEndYValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else if (includeInterval && dataset instanceof OHLCDataset) {\n            // handle special case of OHLCDataset\n            OHLCDataset ohlc = (OHLCDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double lvalue = ohlc.getLowValue(series, item);\n                    double uvalue = ohlc.getHighValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n            // standard case - plain XYDataset\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double value = dataset.getYValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n        }\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
                "fixed_function": "    public static Range iterateRangeBounds(XYDataset dataset,\n            boolean includeInterval) {\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int seriesCount = dataset.getSeriesCount();\n\n        // handle three cases by dataset type\n        if (includeInterval && dataset instanceof IntervalXYDataset) {\n            // handle special case of IntervalXYDataset\n            IntervalXYDataset ixyd = (IntervalXYDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double value = ixyd.getYValue(series, item);\n                    double lvalue = ixyd.getStartYValue(series, item);\n                    double uvalue = ixyd.getEndYValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                        maximum = Math.max(maximum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        minimum = Math.min(minimum, uvalue);\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else if (includeInterval && dataset instanceof OHLCDataset) {\n            // handle special case of OHLCDataset\n            OHLCDataset ohlc = (OHLCDataset) dataset;\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double lvalue = ohlc.getLowValue(series, item);\n                    double uvalue = ohlc.getHighValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);\n                    }\n                }\n            }\n        }\n        else {\n            // standard case - plain XYDataset\n            for (int series = 0; series < seriesCount; series++) {\n                int itemCount = dataset.getItemCount(series);\n                for (int item = 0; item < itemCount; item++) {\n                    double value = dataset.getYValue(series, item);\n                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n                }\n            }\n        }\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
                "comment": "    /**\n     * Iterates over the data items of the xy dataset to find\n     * the range bounds.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     * @param includeInterval  a flag that determines, for an\n     *          {@link IntervalXYDataset}, whether the y-interval or just the\n     *          y-value is used to determine the overall range.\n     *\n     * @return The range (possibly <code>null</code>).\n     *\n     * @since 1.0.10\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3"
                ]
            }
        ],
        "trigger_test": {
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2": {
                "path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
                "function_name": "testBug2849731_2",
                "src": "    public void testBug2849731_2() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(1.0, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(1.5, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(0.5, r.getLowerBound(), EPSILON);\n        assertEquals(1.5, r.getUpperBound(), EPSILON);\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.data.general.junit.DatasetUtilitiesTests.testBug2849731_2(DatasetUtilitiesTests.java:1276)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.data.general.junit.DatasetUtilitiesTests.testBug2849731_2(DatasetUtilitiesTests.java:1276)  assertEquals(1.0, r.getLowerBound(), EPSILON);",
                "failed_line": 1276
            },
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3": {
                "path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
                "function_name": "testBug2849731_3",
                "src": "    public void testBug2849731_3() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);\n        assertEquals(1.5, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);\n        assertEquals(2.5, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);\n        assertEquals(3.5, r.getUpperBound(), EPSILON);\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.data.general.junit.DatasetUtilitiesTests.testBug2849731_3(DatasetUtilitiesTests.java:1299)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.data.general.junit.DatasetUtilitiesTests.testBug2849731_3(DatasetUtilitiesTests.java:1299)  assertEquals(1.5, r.getLowerBound(), EPSILON);",
                "failed_line": 1299
            }
        }
    },
    "Chart_14": {
        "function_num": 4,
        "functions": [
            {
                "path": "source/org/jfree/chart/plot/CategoryPlot.java",
                "start_loc": 2155,
                "end_loc": 2171,
                "buggy_function": "    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
                "fixed_function": "    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        if (markers == null) {\n            return false;\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
                "comment": "    /**\n     * Removes a marker for a specific dataset/renderer and, if requested, \n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index the dataset/renderer index.\n     * @param marker the marker.\n     * @param layer the layer (foreground or background).\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     */\n",
                "directly_related_tests": [
                    "org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker"
                ]
            },
            {
                "path": "source/org/jfree/chart/plot/CategoryPlot.java",
                "start_loc": 2434,
                "end_loc": 2453,
                "buggy_function": "    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
                "fixed_function": "    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        if (markers == null) {\n            return false;\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
                "comment": "    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners.\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     * \n     * @see #addRangeMarker(int, Marker, Layer, boolean)\n     */\n",
                "directly_related_tests": [
                    "org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker"
                ]
            },
            {
                "path": "source/org/jfree/chart/plot/XYPlot.java",
                "start_loc": 2282,
                "end_loc": 2298,
                "buggy_function": "    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
                "fixed_function": "    public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        if (markers == null) {\n            return false;\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
                "comment": "    /**\n     * Removes a marker for a specific dataset/renderer and, if requested, \n     * sends a {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     */\n",
                "directly_related_tests": [
                    "org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker"
                ]
            },
            {
                "path": "source/org/jfree/chart/plot/XYPlot.java",
                "start_loc": 2515,
                "end_loc": 2534,
                "buggy_function": "    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
                "fixed_function": "    public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        if (markers == null) {\n            return false;\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }\n",
                "comment": "    /**\n     * Removes a marker for a specific dataset/renderer and sends a\n     * {@link PlotChangeEvent} to all registered listeners.\n     *\n     * @param index  the dataset/renderer index.\n     * @param marker  the marker.\n     * @param layer  the layer (foreground or background).\n     * @param notify  notify listeners?\n     *\n     * @return A boolean indicating whether or not the marker was actually \n     *         removed.\n     *\n     * @since 1.0.10\n     */\n",
                "directly_related_tests": [
                    "org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker"
                ]
            }
        ],
        "trigger_test": {
            "org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker": {
                "path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
                "function_name": "testRemoveRangeMarker",
                "src": "    public void testRemoveRangeMarker() {\n    \tCategoryPlot plot = new CategoryPlot();\n    \tassertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.CategoryPlot.removeRangeMarker(CategoryPlot.java:2448)\n\tat org.jfree.chart.plot.CategoryPlot.removeRangeMarker(CategoryPlot.java:2415)\n\tat org.jfree.chart.plot.CategoryPlot.removeRangeMarker(CategoryPlot.java:2396)\n\tat org.jfree.chart.plot.CategoryPlot.removeRangeMarker(CategoryPlot.java:2378)\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveRangeMarker(CategoryPlotTests.java:780)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.CategoryPlot.removeRangeMarker(CategoryPlot.java:2448)  boolean removed = markers.remove(marker);\n\tat org.jfree.chart.plot.CategoryPlot.removeRangeMarker(CategoryPlot.java:2415)  return removeRangeMarker(index, marker, layer, true);\n\tat org.jfree.chart.plot.CategoryPlot.removeRangeMarker(CategoryPlot.java:2396)  return removeRangeMarker(0, marker, layer);\n\tat org.jfree.chart.plot.CategoryPlot.removeRangeMarker(CategoryPlot.java:2378)  return removeRangeMarker(marker, Layer.FOREGROUND);\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveRangeMarker(CategoryPlotTests.java:780)  assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));",
                "failed_line": 780
            },
            "org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker": {
                "path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
                "function_name": "testRemoveDomainMarker",
                "src": "    public void testRemoveDomainMarker() {\n    \tCategoryPlot plot = new CategoryPlot();\n    \tassertFalse(plot.removeDomainMarker(new CategoryMarker(\"Category 1\")));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.CategoryPlot.removeDomainMarker(CategoryPlot.java:2166)\n\tat org.jfree.chart.plot.CategoryPlot.removeDomainMarker(CategoryPlot.java:2139)\n\tat org.jfree.chart.plot.CategoryPlot.removeDomainMarker(CategoryPlot.java:2122)\n\tat org.jfree.chart.plot.CategoryPlot.removeDomainMarker(CategoryPlot.java:2106)\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveDomainMarker(CategoryPlotTests.java:771)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.CategoryPlot.removeDomainMarker(CategoryPlot.java:2166)  boolean removed = markers.remove(marker);\n\tat org.jfree.chart.plot.CategoryPlot.removeDomainMarker(CategoryPlot.java:2139)  return removeDomainMarker(index, marker, layer, true);\n\tat org.jfree.chart.plot.CategoryPlot.removeDomainMarker(CategoryPlot.java:2122)  return removeDomainMarker(0, marker, layer);\n\tat org.jfree.chart.plot.CategoryPlot.removeDomainMarker(CategoryPlot.java:2106)  return removeDomainMarker(marker, Layer.FOREGROUND);\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveDomainMarker(CategoryPlotTests.java:771)  assertFalse(plot.removeDomainMarker(new CategoryMarker(\"Category 1\")));",
                "failed_line": 771
            },
            "org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker": {
                "path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
                "function_name": "testRemoveRangeMarker",
                "src": "    public void testRemoveRangeMarker() {\n    \tXYPlot plot = new XYPlot();\n    \tassertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.removeRangeMarker(XYPlot.java:2529)\n\tat org.jfree.chart.plot.XYPlot.removeRangeMarker(XYPlot.java:2498)\n\tat org.jfree.chart.plot.XYPlot.removeRangeMarker(XYPlot.java:2481)\n\tat org.jfree.chart.plot.XYPlot.removeRangeMarker(XYPlot.java:2465)\n\tat org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker(XYPlotTests.java:1037)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.removeRangeMarker(XYPlot.java:2529)  boolean removed = markers.remove(marker);\n\tat org.jfree.chart.plot.XYPlot.removeRangeMarker(XYPlot.java:2498)  return removeRangeMarker(index, marker, layer, true);\n\tat org.jfree.chart.plot.XYPlot.removeRangeMarker(XYPlot.java:2481)  return removeRangeMarker(0, marker, layer);\n\tat org.jfree.chart.plot.XYPlot.removeRangeMarker(XYPlot.java:2465)  return removeRangeMarker(marker, Layer.FOREGROUND);\n\tat org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker(XYPlotTests.java:1037)  assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));",
                "failed_line": 1037
            },
            "org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker": {
                "path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
                "function_name": "testRemoveDomainMarker",
                "src": "    public void testRemoveDomainMarker() {\n    \tXYPlot plot = new XYPlot();\n    \tassertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.removeDomainMarker(XYPlot.java:2293)\n\tat org.jfree.chart.plot.XYPlot.removeDomainMarker(XYPlot.java:2265)\n\tat org.jfree.chart.plot.XYPlot.removeDomainMarker(XYPlot.java:2248)\n\tat org.jfree.chart.plot.XYPlot.removeDomainMarker(XYPlot.java:2232)\n\tat org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker(XYPlotTests.java:1028)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.removeDomainMarker(XYPlot.java:2293)  boolean removed = markers.remove(marker);\n\tat org.jfree.chart.plot.XYPlot.removeDomainMarker(XYPlot.java:2265)  return removeDomainMarker(index, marker, layer, true);\n\tat org.jfree.chart.plot.XYPlot.removeDomainMarker(XYPlot.java:2248)  return removeDomainMarker(0, marker, layer);\n\tat org.jfree.chart.plot.XYPlot.removeDomainMarker(XYPlot.java:2232)  return removeDomainMarker(marker, Layer.FOREGROUND);\n\tat org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker(XYPlotTests.java:1028)  assertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));",
                "failed_line": 1028
            }
        }
    },
    "Chart_15": {
        "function_num": 2,
        "functions": [
            {
                "path": "source/org/jfree/chart/plot/PiePlot.java",
                "start_loc": 1377,
                "end_loc": 1388,
                "buggy_function": "    public double getMaximumExplodePercent() {\n        double result = 0.0;\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }\n",
                "fixed_function": "    public double getMaximumExplodePercent() {\n        if (this.dataset == null) {\n            return 0.0;\n        }\n        double result = 0.0;\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }\n",
                "comment": "    /**\n     * Returns the maximum explode percent.\n     * \n     * @return The percent.\n     */\n",
                "non_directly_related_tests": [
                    "org.jfree.chart.plot.junit.PiePlot3DTests::testDrawWithNullDataset"
                ]
            },
            {
                "path": "source/org/jfree/chart/plot/PiePlot.java",
                "start_loc": 2046,
                "end_loc": 2056,
                "buggy_function": "    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n",
                "fixed_function": "    public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n        if (this.dataset != null) {\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        }\n        state.setLatestAngle(plot.getStartAngle());\n        return state;\n        \n    }\n",
                "comment": "    /**\n     * Initialises the drawing procedure.  This method will be called before \n     * the first item is rendered, giving the plot an opportunity to initialise\n     * any state information it wants to maintain.\n     *\n     * @param g2  the graphics device.\n     * @param plotArea  the plot area (<code>null</code> not permitted).\n     * @param plot  the plot.\n     * @param index  the secondary index (<code>null</code> for primary \n     *               renderer).\n     * @param info  collects chart rendering information for return to caller.\n     * \n     * @return A state object (maintains state information relevant to one \n     *         chart drawing).\n     */\n",
                "non_directly_related_tests": [
                    "org.jfree.chart.plot.junit.PiePlot3DTests::testDrawWithNullDataset"
                ]
            }
        ],
        "trigger_test": {
            "org.jfree.chart.plot.junit.PiePlot3DTests::testDrawWithNullDataset": {
                "path": "tests/org/jfree/chart/plot/junit/PiePlot3DTests.java",
                "function_name": "testDrawWithNullDataset",
                "src": "    public void testDrawWithNullDataset() {\n        JFreeChart chart = ChartFactory.createPieChart3D(\"Test\", null, true, \n                false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.plot.junit.PiePlot3DTests.testDrawWithNullDataset(PiePlot3DTests.java:151)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.plot.junit.PiePlot3DTests.testDrawWithNullDataset(PiePlot3DTests.java:151)  assertTrue(success);",
                "failed_line": 151
            }
        }
    },
    "Chart_16": {
        "function_num": 2,
        "functions": [
            {
                "path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                "start_loc": 142,
                "end_loc": 212,
                "buggy_function": "    public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,\n                                          Comparable[] categoryKeys,\n                                          Number[][] starts,\n                                          Number[][] ends) {\n\n        this.startData = starts;\n        this.endData = ends;\n\n        if (starts != null && ends != null) {\n\n            String baseName = \"org.jfree.data.resources.DataPackageResources\";\n            ResourceBundle resources = ResourceBundle.getBundle(baseName);\n\n            int seriesCount = starts.length;\n            if (seriesCount != ends.length) {\n                String errMsg = \"DefaultIntervalCategoryDataset: the number \"\n                    + \"of series in the start value dataset does \"\n                    + \"not match the number of series in the end \"\n                    + \"value dataset.\";\n                throw new IllegalArgumentException(errMsg);\n            }\n            if (seriesCount > 0) {\n\n                // set up the series names...\n                if (seriesKeys != null) {\n\n                    if (seriesKeys.length != seriesCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of series keys does not \"\n                                + \"match the number of series in the data.\");\n                    }\n\n                    this.seriesKeys = seriesKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"series.default-prefix\") + \" \";\n                    this.seriesKeys = generateKeys(seriesCount, prefix);\n                }\n\n                // set up the category names...\n                int categoryCount = starts[0].length;\n                if (categoryCount != ends[0].length) {\n                    String errMsg = \"DefaultIntervalCategoryDataset: the \"\n                                + \"number of categories in the start value \"\n                                + \"dataset does not match the number of \"\n                                + \"categories in the end value dataset.\";\n                    throw new IllegalArgumentException(errMsg);\n                }\n                if (categoryKeys != null) {\n                    if (categoryKeys.length != categoryCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of category keys does not match \"\n                                + \"the number of categories in the data.\");\n                    }\n                    this.categoryKeys = categoryKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"categories.default-prefix\") + \" \";\n                    this.categoryKeys = generateKeys(categoryCount, prefix);\n                }\n\n            }\n            else {\n                this.seriesKeys = null;\n                this.categoryKeys = null;\n            }\n        }\n\n    }\n",
                "fixed_function": "    public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,\n                                          Comparable[] categoryKeys,\n                                          Number[][] starts,\n                                          Number[][] ends) {\n\n        this.startData = starts;\n        this.endData = ends;\n\n        if (starts != null && ends != null) {\n\n            String baseName = \"org.jfree.data.resources.DataPackageResources\";\n            ResourceBundle resources = ResourceBundle.getBundle(baseName);\n\n            int seriesCount = starts.length;\n            if (seriesCount != ends.length) {\n                String errMsg = \"DefaultIntervalCategoryDataset: the number \"\n                    + \"of series in the start value dataset does \"\n                    + \"not match the number of series in the end \"\n                    + \"value dataset.\";\n                throw new IllegalArgumentException(errMsg);\n            }\n            if (seriesCount > 0) {\n\n                // set up the series names...\n                if (seriesKeys != null) {\n\n                    if (seriesKeys.length != seriesCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of series keys does not \"\n                                + \"match the number of series in the data.\");\n                    }\n\n                    this.seriesKeys = seriesKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"series.default-prefix\") + \" \";\n                    this.seriesKeys = generateKeys(seriesCount, prefix);\n                }\n\n                // set up the category names...\n                int categoryCount = starts[0].length;\n                if (categoryCount != ends[0].length) {\n                    String errMsg = \"DefaultIntervalCategoryDataset: the \"\n                                + \"number of categories in the start value \"\n                                + \"dataset does not match the number of \"\n                                + \"categories in the end value dataset.\";\n                    throw new IllegalArgumentException(errMsg);\n                }\n                if (categoryKeys != null) {\n                    if (categoryKeys.length != categoryCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of category keys does not match \"\n                                + \"the number of categories in the data.\");\n                    }\n                    this.categoryKeys = categoryKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"categories.default-prefix\") + \" \";\n                    this.categoryKeys = generateKeys(categoryCount, prefix);\n                }\n\n            }\n            else {\n                this.seriesKeys = new Comparable[0];\n                this.categoryKeys = new Comparable[0];\n            }\n        }\n\n    }\n",
                "comment": "    /**\n     * Constructs a DefaultIntervalCategoryDataset, populates it with data\n     * from the arrays, and uses the supplied names for the series and the\n     * supplied objects for the categories.\n     *\n     * @param seriesKeys  the series keys (if <code>null</code>, series keys\n     *         will be generated automatically).\n     * @param categoryKeys  the category keys (if <code>null</code>, category \n     *         keys will be generated automatically).\n     * @param starts  the start values data, indexed as data[series][category].\n     * @param ends  the end values data, indexed as data[series][category].\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetCategoryIndex",
                    "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetSeriesIndex",
                    "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowCount",
                    "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowIndex",
                    "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnCount",
                    "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnIndex",
                    "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testCloning2"
                ]
            },
            {
                "path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                "start_loc": 334,
                "end_loc": 351,
                "buggy_function": "    public void setCategoryKeys(Comparable[] categoryKeys) {\n        if (categoryKeys == null) {\n            throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n        }\n        if (categoryKeys.length != this.startData[0].length) {\n            throw new IllegalArgumentException(\n                    \"The number of categories does not match the data.\");\n        }\n        for (int i = 0; i < categoryKeys.length; i++) {\n            if (categoryKeys[i] == null) {\n                throw new IllegalArgumentException(\n                    \"DefaultIntervalCategoryDataset.setCategoryKeys(): \"\n                    + \"null category not permitted.\");\n            }\n        }\n        this.categoryKeys = categoryKeys;\n        fireDatasetChanged();\n    }\n",
                "fixed_function": "    public void setCategoryKeys(Comparable[] categoryKeys) {\n        if (categoryKeys == null) {\n            throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n        }\n        if (categoryKeys.length != getCategoryCount()) {\n            throw new IllegalArgumentException(\n                    \"The number of categories does not match the data.\");\n        }\n        for (int i = 0; i < categoryKeys.length; i++) {\n            if (categoryKeys[i] == null) {\n                throw new IllegalArgumentException(\n                    \"DefaultIntervalCategoryDataset.setCategoryKeys(): \"\n                    + \"null category not permitted.\");\n            }\n        }\n        this.categoryKeys = categoryKeys;\n        fireDatasetChanged();\n    }\n",
                "comment": "    /**\n     * Sets the categories for the dataset.\n     *\n     * @param categoryKeys  an array of objects representing the categories in \n     *                      the dataset.\n     *                      \n     * @see #getRowKeys()\n     * @see #setSeriesKeys(Comparable[])\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testSetCategoryKeys"
                ]
            }
        ],
        "trigger_test": {
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetCategoryIndex": {
                "path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
                "function_name": "testGetCategoryIndex",
                "src": "    public void testGetCategoryIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getCategoryIndex(\"ABC\"));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex(DefaultIntervalCategoryDataset.java:574)\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetCategoryIndex(DefaultIntervalCategoryDatasetTests.java:415)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex(DefaultIntervalCategoryDataset.java:574)  for (int i = 0; i < this.categoryKeys.length; i++) {            if (category.equals(this.categoryKeys[i])) {                result = i;                break;            }        }\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetCategoryIndex(DefaultIntervalCategoryDatasetTests.java:415)  assertEquals(-1, empty.getCategoryIndex(\"ABC\"));",
                "failed_line": 415
            },
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testSetCategoryKeys": {
                "path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
                "function_name": "testSetCategoryKeys",
                "src": "    public void testSetCategoryKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tboolean pass = true;\n    \ttry {\n    \t\tempty.setCategoryKeys(new String[0]);\n    \t}\n    \tcatch (RuntimeException e) {\n    \t\tpass = false;\n    \t}\n    \tassertTrue(pass);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetCategoryKeys(DefaultIntervalCategoryDatasetTests.java:444)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetCategoryKeys(DefaultIntervalCategoryDatasetTests.java:444)  assertTrue(pass);",
                "failed_line": 444
            },
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetSeriesIndex": {
                "path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
                "function_name": "testGetSeriesIndex",
                "src": "    public void testGetSeriesIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getSeriesIndex(\"ABC\"));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex(DefaultIntervalCategoryDataset.java:242)\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetSeriesIndex(DefaultIntervalCategoryDatasetTests.java:375)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex(DefaultIntervalCategoryDataset.java:242)  for (int i = 0; i < this.seriesKeys.length; i++) {            if (seriesKey.equals(this.seriesKeys[i])) {                result = i;                break;            }        }\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetSeriesIndex(DefaultIntervalCategoryDatasetTests.java:375)  assertEquals(-1, empty.getSeriesIndex(\"ABC\"));",
                "failed_line": 375
            },
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowCount": {
                "path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
                "function_name": "testGetRowCount",
                "src": "    public void testGetRowCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        assertEquals(0, empty.getColumnCount());\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount(DefaultIntervalCategoryDataset.java:690)\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowCount(DefaultIntervalCategoryDatasetTests.java:490)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount(DefaultIntervalCategoryDataset.java:690)  return this.categoryKeys.length;\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowCount(DefaultIntervalCategoryDatasetTests.java:490)  assertEquals(0, empty.getColumnCount());",
                "failed_line": 490
            },
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowIndex": {
                "path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
                "function_name": "testGetRowIndex",
                "src": "    public void testGetRowIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getRowIndex(\"ABC\"));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex(DefaultIntervalCategoryDataset.java:242)\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getRowIndex(DefaultIntervalCategoryDataset.java:641)\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowIndex(DefaultIntervalCategoryDatasetTests.java:386)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex(DefaultIntervalCategoryDataset.java:242)  for (int i = 0; i < this.seriesKeys.length; i++) {            if (seriesKey.equals(this.seriesKeys[i])) {                result = i;                break;            }        }\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getRowIndex(DefaultIntervalCategoryDataset.java:641)  return getSeriesIndex(rowKey);\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowIndex(DefaultIntervalCategoryDatasetTests.java:386)  assertEquals(-1, empty.getRowIndex(\"ABC\"));",
                "failed_line": 386
            },
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnCount": {
                "path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
                "function_name": "testGetColumnCount",
                "src": "    public void testGetColumnCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        assertEquals(0, empty.getColumnCount());\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount(DefaultIntervalCategoryDataset.java:690)\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnCount(DefaultIntervalCategoryDatasetTests.java:479)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount(DefaultIntervalCategoryDataset.java:690)  return this.categoryKeys.length;\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnCount(DefaultIntervalCategoryDatasetTests.java:479)  assertEquals(0, empty.getColumnCount());",
                "failed_line": 479
            },
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnIndex": {
                "path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
                "function_name": "testGetColumnIndex",
                "src": "    public void testGetColumnIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getColumnIndex(\"ABC\"));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex(DefaultIntervalCategoryDataset.java:574)\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex(DefaultIntervalCategoryDataset.java:628)\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnIndex(DefaultIntervalCategoryDatasetTests.java:426)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex(DefaultIntervalCategoryDataset.java:574)  for (int i = 0; i < this.categoryKeys.length; i++) {            if (category.equals(this.categoryKeys[i])) {                result = i;                break;            }        }\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex(DefaultIntervalCategoryDataset.java:628)  return getCategoryIndex(columnKey);\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnIndex(DefaultIntervalCategoryDatasetTests.java:426)  assertEquals(-1, empty.getColumnIndex(\"ABC\"));",
                "failed_line": 426
            },
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testCloning2": {
                "path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
                "function_name": "testCloning2",
                "src": "    public void testCloning2() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\t\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.clone(DefaultIntervalCategoryDataset.java:748)\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testCloning2(DefaultIntervalCategoryDatasetTests.java:265)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.jfree.data.category.DefaultIntervalCategoryDataset.clone(DefaultIntervalCategoryDataset.java:748)  clone.categoryKeys = (Comparable[]) this.categoryKeys.clone();\n\tat org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testCloning2(DefaultIntervalCategoryDatasetTests.java:265)  d2 = (DefaultIntervalCategoryDataset) d1.clone();",
                "failed_line": 265
            }
        }
    },
    "Chart_18": {
        "function_num": 3,
        "functions": [
            {
                "path": "source/org/jfree/data/DefaultKeyedValues.java",
                "start_loc": 315,
                "end_loc": 321,
                "buggy_function": "    public void removeValue(int index) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        if (index < this.keys.size()) {\n        rebuildIndex();\n        }\n    }\n",
                "fixed_function": "    public void removeValue(int index) {\n        this.keys.remove(index);\n        this.values.remove(index);\n        rebuildIndex();\n    }\n",
                "comment": "    /**\n     * Removes a value from the collection.\n     *\n     * @param index  the index of the item to remove (in the range \n     *     <code>0</code> to <code>getItemCount() - 1</code>).\n     *     \n     * @throws IndexOutOfBoundsException if <code>index</code> is not within\n     *     the specified range.\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.category.junit.DefaultCategoryDatasetTests::testBug1835955",
                    "org.jfree.data.junit.DefaultKeyedValuesTests::testGetIndex2"
                ]
            },
            {
                "path": "source/org/jfree/data/DefaultKeyedValues.java",
                "start_loc": 332,
                "end_loc": 338,
                "buggy_function": "    public void removeValue(Comparable key) {\n        int index = getIndex(key);\n        if (index < 0) {\n\t\t\treturn;\n        }\n        removeValue(index);\n    }\n",
                "fixed_function": "    public void removeValue(Comparable key) {\n        int index = getIndex(key);\n        if (index < 0) {\n            throw new UnknownKeyException(\"The key (\" + key \n                    + \") is not recognised.\");\n        }\n        removeValue(index);\n    }\n",
                "comment": "    /**\n     * Removes a value from the collection.\n     *\n     * @param key  the item key (<code>null</code> not permitted).\n     * \n     * @throws IllegalArgumentException if <code>key</code> is \n     *     <code>null</code>.\n     * @throws UnknownKeyException if <code>key</code> is not recognised.\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.junit.DefaultKeyedValuesTests::testRemoveValue"
                ]
            },
            {
                "path": "source/org/jfree/data/DefaultKeyedValues2D.java",
                "start_loc": 454,
                "end_loc": 461,
                "buggy_function": "    public void removeColumn(Comparable columnKey) {\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n                rowData.removeValue(columnKey);\n        }\n        this.columnKeys.remove(columnKey);\n    }\n",
                "fixed_function": "    public void removeColumn(Comparable columnKey) {\n    \tif (columnKey == null) {\n    \t\tthrow new IllegalArgumentException(\"Null 'columnKey' argument.\");\n    \t}\n    \tif (!this.columnKeys.contains(columnKey)) {\n    \t\tthrow new UnknownKeyException(\"Unknown key: \" + columnKey);\n    \t}\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();\n            int index = rowData.getIndex(columnKey);\n            if (index >= 0) {\n                rowData.removeValue(columnKey);\n            }\n        }\n        this.columnKeys.remove(columnKey);\n    }\n",
                "comment": "    /**\n     * Removes a column from the table.\n     *\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @throws UnknownKeyException if the table does not contain a column with\n     *     the specified key.\n     * @throws IllegalArgumentException if <code>columnKey</code> is \n     *     <code>null</code>.\n     * \n     * @see #removeColumn(int)\n     * @see #removeRow(Comparable)\n     */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.jfree.data.category.junit.DefaultCategoryDatasetTests::testBug1835955": {
                "path": "tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java",
                "function_name": "testBug1835955",
                "src": "    public void testBug1835955() {\n    \tDefaultCategoryDataset d = new DefaultCategoryDataset();\n    \td.addValue(1.0, \"R1\", \"C1\");\n    \td.addValue(2.0, \"R2\", \"C2\");\n    \td.removeColumn(\"C2\");\n    \td.addValue(3.0, \"R2\", \"C2\");\n    \tassertEquals(3.0, d.getValue(\"R2\", \"C2\").doubleValue(), EPSILON);\n    }",
                "stack_trace": "java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.set(ArrayList.java:448)\n\tat org.jfree.data.DefaultKeyedValues.setValue(DefaultKeyedValues.java:234)\n\tat org.jfree.data.DefaultKeyedValues2D.setValue(DefaultKeyedValues2D.java:337)\n\tat org.jfree.data.DefaultKeyedValues2D.addValue(DefaultKeyedValues2D.java:303)\n\tat org.jfree.data.category.DefaultCategoryDataset.addValue(DefaultCategoryDataset.java:218)\n\tat org.jfree.data.category.DefaultCategoryDataset.addValue(DefaultCategoryDataset.java:233)\n\tat org.jfree.data.category.junit.DefaultCategoryDatasetTests.testBug1835955(DefaultCategoryDatasetTests.java:350)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n\tat org.jfree.data.DefaultKeyedValues.setValue(DefaultKeyedValues.java:234)  this.keys.set(keyIndex, key);\n\tat org.jfree.data.DefaultKeyedValues2D.setValue(DefaultKeyedValues2D.java:337)  row.setValue(columnKey, value);\n\tat org.jfree.data.DefaultKeyedValues2D.addValue(DefaultKeyedValues2D.java:303)  setValue(value, rowKey, columnKey);\n\tat org.jfree.data.category.DefaultCategoryDataset.addValue(DefaultCategoryDataset.java:218)  this.data.addValue(value, rowKey, columnKey);\n\tat org.jfree.data.category.DefaultCategoryDataset.addValue(DefaultCategoryDataset.java:233)  addValue(new Double(value), rowKey, columnKey);\n\tat org.jfree.data.category.junit.DefaultCategoryDatasetTests.testBug1835955(DefaultCategoryDatasetTests.java:350)  d.addValue(3.0, \"R2\", \"C2\");",
                "failed_line": 350
            },
            "org.jfree.data.junit.DefaultKeyedValues2DTests::testRemoveColumnByKey": {
                "path": "tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java",
                "function_name": "testRemoveColumnByKey",
                "src": "    public void testRemoveColumnByKey() {\n    \tDefaultKeyedValues2D d = new DefaultKeyedValues2D();\n    \td.addValue(new Double(1.0), \"R1\", \"C1\");\n    \td.addValue(new Double(2.0), \"R2\", \"C2\");\n    \td.removeColumn(\"C2\");\n    \td.addValue(new Double(3.0), \"R2\", \"C2\");\n    \tassertEquals(3.0, d.getValue(\"R2\", \"C2\").doubleValue(), EPSILON);\n    \t\n    \t// check for unknown column\n    \tboolean pass = false;\n    \ttry {\n    \t\td.removeColumn(\"XXX\");\n    \t}\n    \tcatch (UnknownKeyException e) {\n    \t\tpass = true;\n    \t}\n    \tassertTrue(pass);\n    }",
                "stack_trace": "java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.set(ArrayList.java:448)\n\tat org.jfree.data.DefaultKeyedValues.setValue(DefaultKeyedValues.java:234)\n\tat org.jfree.data.DefaultKeyedValues2D.setValue(DefaultKeyedValues2D.java:337)\n\tat org.jfree.data.DefaultKeyedValues2D.addValue(DefaultKeyedValues2D.java:303)\n\tat org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveColumnByKey(DefaultKeyedValues2DTests.java:354)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n\tat org.jfree.data.DefaultKeyedValues.setValue(DefaultKeyedValues.java:234)  this.keys.set(keyIndex, key);\n\tat org.jfree.data.DefaultKeyedValues2D.setValue(DefaultKeyedValues2D.java:337)  row.setValue(columnKey, value);\n\tat org.jfree.data.DefaultKeyedValues2D.addValue(DefaultKeyedValues2D.java:303)  setValue(value, rowKey, columnKey);\n\tat org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveColumnByKey(DefaultKeyedValues2DTests.java:354)  d.addValue(new Double(3.0), \"R2\", \"C2\");",
                "failed_line": 354
            },
            "org.jfree.data.junit.DefaultKeyedValuesTests::testRemoveValue": {
                "path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
                "function_name": "testRemoveValue",
                "src": "    public void testRemoveValue() {\n        DefaultKeyedValues data = new DefaultKeyedValues();\n        data.addValue(\"A\", new Double(1.0));\n        data.addValue(\"B\", null);\n        data.addValue(\"C\", new Double(3.0));\n        data.addValue(\"D\", new Double(2.0));\n        assertEquals(1, data.getIndex(\"B\"));\n        data.removeValue(\"B\");\n        assertEquals(-1, data.getIndex(\"B\"));\n        \n        boolean pass = false;\n        try {\n            data.removeValue(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;   \n        }\n        assertTrue(pass);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.data.junit.DefaultKeyedValuesTests.testRemoveValue(DefaultKeyedValuesTests.java:372)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.jfree.data.junit.DefaultKeyedValuesTests.testRemoveValue(DefaultKeyedValuesTests.java:372)  assertTrue(pass);",
                "failed_line": 372
            },
            "org.jfree.data.junit.DefaultKeyedValuesTests::testGetIndex2": {
                "path": "tests/org/jfree/data/junit/DefaultKeyedValuesTests.java",
                "function_name": "testGetIndex2",
                "src": "    public void testGetIndex2() {\n    \tDefaultKeyedValues v = new DefaultKeyedValues();\n    \tassertEquals(-1, v.getIndex(\"K1\"));\n    \tv.addValue(\"K1\", 1.0);\n    \tassertEquals(0, v.getIndex(\"K1\"));\n    \tv.removeValue(\"K1\");\n    \tassertEquals(-1, v.getIndex(\"K1\"));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.jfree.data.junit.DefaultKeyedValuesTests.testGetIndex2(DefaultKeyedValuesTests.java:244)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat org.jfree.data.junit.DefaultKeyedValuesTests.testGetIndex2(DefaultKeyedValuesTests.java:244)  assertEquals(-1, v.getIndex(\"K1\"));",
                "failed_line": 244
            }
        }
    },
    "Chart_19": {
        "function_num": 2,
        "functions": [
            {
                "path": "source/org/jfree/chart/plot/CategoryPlot.java",
                "start_loc": 697,
                "end_loc": 699,
                "buggy_function": "    public int getDomainAxisIndex(CategoryAxis axis) {\n        return this.domainAxes.indexOf(axis);\n    }\n",
                "fixed_function": "    public int getDomainAxisIndex(CategoryAxis axis) {\n        if (axis == null) {\n            throw new IllegalArgumentException(\"Null 'axis' argument.\");\n        }\n        return this.domainAxes.indexOf(axis);\n    }\n",
                "comment": "    /**\n     * Returns the index of the specified axis, or <code>-1</code> if the axis\n     * is not assigned to the plot.\n     * \n     * @param axis  the axis (<code>null</code> not permitted).\n     * \n     * @return The axis index.\n     * \n     * @see #getDomainAxis(int)\n     * @see #getRangeAxisIndex(ValueAxis)\n     * \n     * @since 1.0.3\n     */\n",
                "directly_related_tests": [
                    "org.jfree.chart.plot.junit.CategoryPlotTests::testGetDomainAxisIndex"
                ]
            },
            {
                "path": "source/org/jfree/chart/plot/CategoryPlot.java",
                "start_loc": 972,
                "end_loc": 982,
                "buggy_function": "    public int getRangeAxisIndex(ValueAxis axis) {\n        int result = this.rangeAxes.indexOf(axis);\n        if (result < 0) { // try the parent plot\n            Plot parent = getParent();\n            if (parent instanceof CategoryPlot) {\n                CategoryPlot p = (CategoryPlot) parent;\n                result = p.getRangeAxisIndex(axis);\n            }\n        }\n        return result;\n    }\n",
                "fixed_function": "    public int getRangeAxisIndex(ValueAxis axis) {\n        if (axis == null) {\n            throw new IllegalArgumentException(\"Null 'axis' argument.\");\n        }\n        int result = this.rangeAxes.indexOf(axis);\n        if (result < 0) { // try the parent plot\n            Plot parent = getParent();\n            if (parent instanceof CategoryPlot) {\n                CategoryPlot p = (CategoryPlot) parent;\n                result = p.getRangeAxisIndex(axis);\n            }\n        }\n        return result;\n    }\n",
                "comment": "    /**\n     * Returns the index of the specified axis, or <code>-1</code> if the axis\n     * is not assigned to the plot.\n     *\n     * @param axis  the axis (<code>null</code> not permitted).\n     *\n     * @return The axis index.\n     * \n     * @see #getRangeAxis(int)\n     * @see #getDomainAxisIndex(CategoryAxis)\n     * \n     * @since 1.0.7\n     */\n",
                "directly_related_tests": [
                    "org.jfree.chart.plot.junit.CategoryPlotTests::testGetRangeAxisIndex"
                ]
            }
        ],
        "trigger_test": {
            "org.jfree.chart.plot.junit.CategoryPlotTests::testGetRangeAxisIndex": {
                "path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
                "function_name": "testGetRangeAxisIndex",
                "src": "    public void testGetRangeAxisIndex() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));\n        assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));\n        plot.setRangeAxis(1, rangeAxis2);\n        assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));\n        assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(\"Y2\")));\n        boolean pass = false;\n        try {\n            plot.getRangeAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testGetRangeAxisIndex(CategoryPlotTests.java:761)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testGetRangeAxisIndex(CategoryPlotTests.java:761)  assertTrue(pass);",
                "failed_line": 761
            },
            "org.jfree.chart.plot.junit.CategoryPlotTests::testGetDomainAxisIndex": {
                "path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
                "function_name": "testGetDomainAxisIndex",
                "src": "    public void testGetDomainAxisIndex() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        CategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getDomainAxisIndex(domainAxis1));\n        assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));\n        plot.setDomainAxis(1, domainAxis2);\n        assertEquals(1, plot.getDomainAxisIndex(domainAxis2));\n        assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(\"X2\")));\n        boolean pass = false;\n        try {\n            plot.getDomainAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testGetDomainAxisIndex(CategoryPlotTests.java:737)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testGetDomainAxisIndex(CategoryPlotTests.java:737)  assertTrue(pass);",
                "failed_line": 737
            }
        }
    },
    "Chart_21": {
        "function_num": 2,
        "functions": [
            {
                "path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
                "start_loc": 144,
                "end_loc": 193,
                "buggy_function": "    public void add(BoxAndWhiskerItem item, Comparable rowKey, \n            Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n        \n        // update cached min and max values\n        int r = this.data.getRowIndex(rowKey);\n        int c = this.data.getColumnIndex(columnKey);\n        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n                == c) || (this.minimumRangeValueRow == r \n                && this.minimumRangeValueColumn == c))  {\n            updateBounds();\n        }\n        \n            double minval = Double.NaN;\n            if (item.getMinOutlier() != null) {\n                minval = item.getMinOutlier().doubleValue();\n            }\n            double maxval = Double.NaN;\n            if (item.getMaxOutlier() != null) {\n                maxval = item.getMaxOutlier().doubleValue();\n            }\n        \n            if (Double.isNaN(this.maximumRangeValue)) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n            else if (maxval > this.maximumRangeValue) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n        \n            if (Double.isNaN(this.minimumRangeValue)) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n            else if (minval < this.minimumRangeValue) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n        \n        this.rangeBounds = new Range(this.minimumRangeValue,\n              this.maximumRangeValue);\n        fireDatasetChanged();\n\n    }\n",
                "fixed_function": "    public void add(BoxAndWhiskerItem item, Comparable rowKey, \n            Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n        \n        // update cached min and max values\n        int r = this.data.getRowIndex(rowKey);\n        int c = this.data.getColumnIndex(columnKey);\n        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n                == c) || (this.minimumRangeValueRow == r \n                && this.minimumRangeValueColumn == c))  {\n            updateBounds();\n        }\n        else {\n        \n            double minval = Double.NaN;\n            if (item.getMinOutlier() != null) {\n                minval = item.getMinOutlier().doubleValue();\n            }\n            double maxval = Double.NaN;\n            if (item.getMaxOutlier() != null) {\n                maxval = item.getMaxOutlier().doubleValue();\n            }\n        \n            if (Double.isNaN(this.maximumRangeValue)) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n            else if (maxval > this.maximumRangeValue) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n        \n            if (Double.isNaN(this.minimumRangeValue)) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n            else if (minval < this.minimumRangeValue) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n        }\n        \n        this.rangeBounds = new Range(this.minimumRangeValue,\n              this.maximumRangeValue);\n        fireDatasetChanged();\n\n    }\n",
                "comment": "    /**\n     * Adds a list of values relating to one Box and Whisker entity to the \n     * table.  The various median values are calculated.\n     *\n     * @param item  a box and whisker item (<code>null</code> not permitted).\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #add(List, Comparable, Comparable)\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
                "start_loc": 739,
                "end_loc": 742,
                "buggy_function": "    private void updateBounds() {\n        this.minimumRangeValue = Double.NaN;\n        this.maximumRangeValue = Double.NaN;\n    }\n",
                "fixed_function": "    private void updateBounds() {\n        this.minimumRangeValue = Double.NaN;\n        this.minimumRangeValueRow = -1;\n        this.minimumRangeValueColumn = -1;\n        this.maximumRangeValue = Double.NaN;\n        this.maximumRangeValueRow = -1;\n        this.maximumRangeValueColumn = -1;\n        int rowCount = getRowCount();\n        int columnCount = getColumnCount();\n        for (int r = 0; r < rowCount; r++) {\n            for (int c = 0; c < columnCount; c++) {\n                BoxAndWhiskerItem item = getItem(r, c);\n                if (item != null) {\n                    Number min = item.getMinOutlier();\n                    if (min != null) {\n                        double minv = min.doubleValue();\n                        if (!Double.isNaN(minv)) {\n                            if (minv < this.minimumRangeValue || Double.isNaN(\n                                    this.minimumRangeValue)) {\n                                this.minimumRangeValue = minv;\n                                this.minimumRangeValueRow = r;\n                                this.minimumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                    Number max = item.getMaxOutlier();\n                    if (max != null) {\n                        double maxv = max.doubleValue();\n                        if (!Double.isNaN(maxv)) {\n                            if (maxv > this.maximumRangeValue || Double.isNaN(\n                                    this.maximumRangeValue)) {\n                                this.maximumRangeValue = maxv;\n                                this.maximumRangeValueRow = r;\n                                this.maximumRangeValueColumn = c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n",
                "comment": "    /**\n     * Resets the cached bounds, by iterating over the entire dataset to find\n     * the current bounds.\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds"
                ]
            }
        ],
        "trigger_test": {
            "org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds": {
                "path": "tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java",
                "function_name": "testGetRangeBounds",
                "src": "    public void testGetRangeBounds() {\n        DefaultBoxAndWhiskerCategoryDataset d1 \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));\n        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));\n        \n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));\n        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));\n        \n        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, \n                new ArrayList()), \"R2\", \"C1\");\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));\n        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));\n        \n        // this replaces the entry with the current minimum value, but the new\n        // minimum value is now in a different item\n        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, \n                new ArrayList()), \"R1\", \"C1\");\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));\n        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<Range[8.5,9.6]> but was:<Range[8.6,9.6]>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testGetRangeBounds(DefaultBoxAndWhiskerCategoryDatasetTests.java:292)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<Range[8.5,9.6]> but was:<Range[8.6,9.6]>\n\tat org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testGetRangeBounds(DefaultBoxAndWhiskerCategoryDatasetTests.java:292)  assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));",
                "failed_line": 292
            }
        }
    },
    "Chart_22": {
        "function_num": 4,
        "functions": [
            {
                "path": "source/org/jfree/data/KeyedObjects2D.java",
                "start_loc": 214,
                "end_loc": 238,
                "buggy_function": "    public Object getObject(Comparable rowKey, Comparable columnKey) {\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        int row = this.rowKeys.indexOf(rowKey);\n        if (row < 0) {\n            throw new UnknownKeyException(\"Row key (\" + rowKey \n                    + \") not recognised.\");\n        }\n        int column = this.columnKeys.indexOf(columnKey);\n        if (column < 0) {\n            throw new UnknownKeyException(\"Column key (\" + columnKey \n                    + \") not recognised.\");\n        }\n        if (row >= 0) {\n        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n            return rowData.getObject(columnKey);\n        }\n        else {\n            return null;\n        }\n    }\n",
                "fixed_function": "    public Object getObject(Comparable rowKey, Comparable columnKey) {\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        int row = this.rowKeys.indexOf(rowKey);\n        if (row < 0) {\n            throw new UnknownKeyException(\"Row key (\" + rowKey \n                    + \") not recognised.\");\n        }\n        int column = this.columnKeys.indexOf(columnKey);\n        if (column < 0) {\n            throw new UnknownKeyException(\"Column key (\" + columnKey \n                    + \") not recognised.\");\n        }\n        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);\n        int index = rowData.getIndex(columnKey);\n        if (index >= 0) {\n            return rowData.getObject(index);\n        }\n        else {\n            return null;\n        }\n    }\n",
                "comment": "    /**\n     * Returns the object for the given row and column keys.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     *\n     * @return The object (possibly <code>null</code>).\n     * \n     * @throws IllegalArgumentException if <code>rowKey<code> or \n     *         <code>columnKey</code> is <code>null</code>.\n     * @throws UnknownKeyException if <code>rowKey</code> or \n     *         <code>columnKey</code> is not recognised.\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey",
                    "org.jfree.data.junit.KeyedObjects2DTests::testSetObject"
                ]
            },
            {
                "path": "source/org/jfree/data/KeyedObjects2D.java",
                "start_loc": 296,
                "end_loc": 320,
                "buggy_function": "    public void removeObject(Comparable rowKey, Comparable columnKey) {\n        setObject(null, rowKey, columnKey);\n        \n        // 1. check whether the row is now empty.\n        boolean allNull = true;\n        int rowIndex = getRowIndex(rowKey);\n        KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);\n\n        for (int item = 0, itemCount = row.getItemCount(); item < itemCount; \n             item++) {\n            if (row.getObject(item) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            this.rowKeys.remove(rowIndex);\n            this.rows.remove(rowIndex);\n        }\n        \n        // 2. check whether the column is now empty.\n        \n        \n    }\n",
                "fixed_function": "    public void removeObject(Comparable rowKey, Comparable columnKey) {\n        setObject(null, rowKey, columnKey);\n        \n        // 1. check whether the row is now empty.\n        boolean allNull = true;\n        int rowIndex = getRowIndex(rowKey);\n        KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);\n\n        for (int item = 0, itemCount = row.getItemCount(); item < itemCount; \n             item++) {\n            if (row.getObject(item) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            this.rowKeys.remove(rowIndex);\n            this.rows.remove(rowIndex);\n        }\n        \n        // 2. check whether the column is now empty.\n        allNull = true;\n        \n        for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n             item++) {\n            row = (KeyedObjects) this.rows.get(item);\n            int columnIndex = row.getIndex(columnKey);\n            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {\n                allNull = false;\n                break;\n            }\n        }\n        \n        if (allNull) {\n            for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n                 item++) {\n                row = (KeyedObjects) this.rows.get(item);\n                int columnIndex = row.getIndex(columnKey);\n                if (columnIndex >= 0) {\n                    row.removeValue(columnIndex);\n                }\n            }\n            this.columnKeys.remove(columnKey);\n        }\n    }\n",
                "comment": "    /**\n     * Removes an object from the table by setting it to <code>null</code>.  If\n     * all the objects in the specified row and/or column are now \n     * <code>null</code>, the row and/or column is removed from the table.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #addObject(Object, Comparable, Comparable)\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue"
                ]
            },
            {
                "path": "source/org/jfree/data/KeyedObjects2D.java",
                "start_loc": 343,
                "end_loc": 346,
                "buggy_function": "    public void removeRow(Comparable rowKey) {\n        int index = getRowIndex(rowKey);\n        removeRow(index);\n    }\n",
                "fixed_function": "    public void removeRow(Comparable rowKey) {\n        int index = getRowIndex(rowKey);\n        if (index < 0) {\n            throw new UnknownKeyException(\"Row key (\" + rowKey \n                    + \") not recognised.\");\n        }\n        removeRow(index);\n    }\n",
                "comment": "    /**\n     * Removes an entire row from the table.\n     *\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * \n     * @throws UnknownKeyException if <code>rowKey</code> is not recognised.\n     * \n     * @see #removeColumn(Comparable)\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey"
                ]
            },
            {
                "path": "source/org/jfree/data/KeyedObjects2D.java",
                "start_loc": 369,
                "end_loc": 381,
                "buggy_function": "    public void removeColumn(Comparable columnKey) {\n        int index = getColumnIndex(columnKey);\n        if (index < 0) {\n            throw new UnknownKeyException(\"Column key (\" + columnKey \n                    + \") not recognised.\");\n        }\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            KeyedObjects rowData = (KeyedObjects) iterator.next();\n                rowData.removeValue(columnKey);\n        }\n        this.columnKeys.remove(columnKey);\n    }\n",
                "fixed_function": "    public void removeColumn(Comparable columnKey) {\n        int index = getColumnIndex(columnKey);\n        if (index < 0) {\n            throw new UnknownKeyException(\"Column key (\" + columnKey \n                    + \") not recognised.\");\n        }\n        Iterator iterator = this.rows.iterator();\n        while (iterator.hasNext()) {\n            KeyedObjects rowData = (KeyedObjects) iterator.next();\n            int i = rowData.getIndex(columnKey);\n            if (i >= 0) {\n                rowData.removeValue(i);\n            }\n        }\n        this.columnKeys.remove(columnKey);\n    }\n",
                "comment": "    /**\n     * Removes an entire column from the table.\n     *\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @throws UnknownKeyException if <code>rowKey</code> is not recognised.\n     * \n     * @see #removeRow(Comparable)\n     */\n",
                "directly_related_tests": [
                    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey",
                    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex"
                ]
            }
        ],
        "trigger_test": {
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey": {
                "path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
                "function_name": "testRemoveColumnByKey",
                "src": "    public void testRemoveColumnByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
                "stack_trace": "org.jfree.data.UnknownKeyException: The key (C2) is not recognised.\n\tat org.jfree.data.KeyedObjects.removeValue(KeyedObjects.java:268)\n\tat org.jfree.data.KeyedObjects2D.removeColumn(KeyedObjects2D.java:378)\n\tat org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByKey(KeyedObjects2DTests.java:391)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "org.jfree.data.UnknownKeyException: The key (C2) is not recognised.\n\tat org.jfree.data.KeyedObjects.removeValue(KeyedObjects.java:268)  throw new UnknownKeyException(\"The key (\" + key.toString()                    + \") is not recognised.\");\n\tat org.jfree.data.KeyedObjects2D.removeColumn(KeyedObjects2D.java:378)  rowData.removeValue(columnKey);\n\tat org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByKey(KeyedObjects2DTests.java:391)  data.removeColumn(\"C2\");",
                "failed_line": 391
            },
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue": {
                "path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
                "function_name": "testRemoveValue",
                "src": "    public void testRemoveValue() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        assertEquals(1, data.getRowCount());\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<1> but was:<2>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.jfree.data.junit.KeyedObjects2DTests.testRemoveValue(KeyedObjects2DTests.java:425)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<1> but was:<2>\n\tat org.jfree.data.junit.KeyedObjects2DTests.testRemoveValue(KeyedObjects2DTests.java:425)  assertEquals(1, data.getColumnCount());",
                "failed_line": 425
            },
            "org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey": {
                "path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
                "function_name": "testGetValueByKey",
                "src": "    public void testGetValueByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));\n        assertNull(data.getObject(\"R1\", \"C2\"));\n        assertNull(data.getObject(\"R2\", \"C1\"));\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
                "stack_trace": "org.jfree.data.UnknownKeyException: The key (C2) is not recognised.\n\tat org.jfree.data.KeyedObjects.getObject(KeyedObjects.java:171)\n\tat org.jfree.data.KeyedObjects2D.getObject(KeyedObjects2D.java:233)\n\tat org.jfree.data.junit.KeyedObjects2DTests.testGetValueByKey(KeyedObjects2DTests.java:211)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "org.jfree.data.UnknownKeyException: The key (C2) is not recognised.\n\tat org.jfree.data.KeyedObjects.getObject(KeyedObjects.java:171)  throw new UnknownKeyException(\"The key (\" + key                    + \") is not recognised.\");\n\tat org.jfree.data.KeyedObjects2D.getObject(KeyedObjects2D.java:233)  return rowData.getObject(columnKey);\n\tat org.jfree.data.junit.KeyedObjects2DTests.testGetValueByKey(KeyedObjects2DTests.java:211)  assertNull(data.getObject(\"R1\", \"C2\"));",
                "failed_line": 211
            },
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex": {
                "path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
                "function_name": "testRemoveColumnByIndex",
                "src": "    public void testRemoveColumnByIndex() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        assertEquals(1, data.getColumnCount());\n        assertEquals(\"Obj2\", data.getObject(1, 0));\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
                "stack_trace": "org.jfree.data.UnknownKeyException: The key (C1) is not recognised.\n\tat org.jfree.data.KeyedObjects.removeValue(KeyedObjects.java:268)\n\tat org.jfree.data.KeyedObjects2D.removeColumn(KeyedObjects2D.java:378)\n\tat org.jfree.data.KeyedObjects2D.removeColumn(KeyedObjects2D.java:357)\n\tat org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByIndex(KeyedObjects2DTests.java:327)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "org.jfree.data.UnknownKeyException: The key (C1) is not recognised.\n\tat org.jfree.data.KeyedObjects.removeValue(KeyedObjects.java:268)  throw new UnknownKeyException(\"The key (\" + key.toString()                    + \") is not recognised.\");\n\tat org.jfree.data.KeyedObjects2D.removeColumn(KeyedObjects2D.java:378)  rowData.removeValue(columnKey);\n\tat org.jfree.data.KeyedObjects2D.removeColumn(KeyedObjects2D.java:357)  removeColumn(columnKey);\n\tat org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByIndex(KeyedObjects2DTests.java:327)  data.removeColumn(0);",
                "failed_line": 327
            },
            "org.jfree.data.junit.KeyedObjects2DTests::testSetObject": {
                "path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
                "function_name": "testSetObject",
                "src": "    public void testSetObject() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));\n        assertNull(data.getObject(\"R1\", \"C2\"));\n        assertNull(data.getObject(\"R2\", \"C1\"));\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
                "stack_trace": "org.jfree.data.UnknownKeyException: The key (C2) is not recognised.\n\tat org.jfree.data.KeyedObjects.getObject(KeyedObjects.java:171)\n\tat org.jfree.data.KeyedObjects2D.getObject(KeyedObjects2D.java:233)\n\tat org.jfree.data.junit.KeyedObjects2DTests.testSetObject(KeyedObjects2DTests.java:261)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "org.jfree.data.UnknownKeyException: The key (C2) is not recognised.\n\tat org.jfree.data.KeyedObjects.getObject(KeyedObjects.java:171)  throw new UnknownKeyException(\"The key (\" + key                    + \") is not recognised.\");\n\tat org.jfree.data.KeyedObjects2D.getObject(KeyedObjects2D.java:233)  return rowData.getObject(columnKey);\n\tat org.jfree.data.junit.KeyedObjects2DTests.testSetObject(KeyedObjects2DTests.java:261)  assertNull(data.getObject(\"R1\", \"C2\"));",
                "failed_line": 261
            },
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey": {
                "path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
                "function_name": "testRemoveRowByKey",
                "src": "    public void testRemoveRowByKey() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        assertEquals(1, data.getRowCount());\n        assertEquals(\"Obj1\", data.getObject(0, 0));\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }",
                "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: -1\n\tat java.util.ArrayList.elementData(ArrayList.java:422)\n\tat java.util.ArrayList.remove(ArrayList.java:499)\n\tat org.jfree.data.KeyedObjects2D.removeRow(KeyedObjects2D.java:330)\n\tat org.jfree.data.KeyedObjects2D.removeRow(KeyedObjects2D.java:345)\n\tat org.jfree.data.junit.KeyedObjects2DTests.testRemoveRowByKey(KeyedObjects2DTests.java:366)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.ArrayIndexOutOfBoundsException: -1\n\tat org.jfree.data.KeyedObjects2D.removeRow(KeyedObjects2D.java:330)  this.rowKeys.remove(rowIndex);\n\tat org.jfree.data.KeyedObjects2D.removeRow(KeyedObjects2D.java:345)  removeRow(index);\n\tat org.jfree.data.junit.KeyedObjects2DTests.testRemoveRowByKey(KeyedObjects2DTests.java:366)  data.removeRow(\"XXX\");",
                "failed_line": 366
            }
        }
    },
    "Chart_25": {
        "function_num": 2,
        "functions": [
            {
                "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
                "start_loc": 230,
                "end_loc": 358,
                "buggy_function": "    protected void drawHorizontalItem(Graphics2D g2,\n                                      CategoryItemRendererState state,\n                                      Rectangle2D dataArea,\n                                      CategoryPlot plot,\n                                      CategoryAxis domainAxis,\n                                      ValueAxis rangeAxis,\n                                      StatisticalCategoryDataset dataset,\n                                      int row,\n                                      int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        // BAR Y\n        double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                dataArea, xAxisLocation);\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectY = rectY + row * state.getBarWidth();\n        }\n\n        // BAR X\n        Number meanValue = dataset.getMeanValue(row, column);\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n            if (value >= uclip) {\n                return; // bar is not visible\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { // cases 9, 10, 11 and 12\n            if (value <= lclip) {\n                return; // bar is not visible\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectX = Math.min(transY2, transY1);\n\n        double rectHeight = state.getBarWidth();\n        double rectWidth = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        // standard deviation lines\n            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n        \n            Line2D line = null;\n            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, \n                                     highVal, rectY + rectHeight / 2.0d);\n            g2.draw(line);\n            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, \n                                     highVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n                                     lowVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        // add an item entity, if this information is being collected\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n\n    }\n",
                "fixed_function": "    protected void drawHorizontalItem(Graphics2D g2,\n                                      CategoryItemRendererState state,\n                                      Rectangle2D dataArea,\n                                      CategoryPlot plot,\n                                      CategoryAxis domainAxis,\n                                      ValueAxis rangeAxis,\n                                      StatisticalCategoryDataset dataset,\n                                      int row,\n                                      int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        // BAR Y\n        double rectY = domainAxis.getCategoryStart(column, getColumnCount(), \n                dataArea, xAxisLocation);\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getHeight() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectY = rectY + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectY = rectY + row * state.getBarWidth();\n        }\n\n        // BAR X\n        Number meanValue = dataset.getMeanValue(row, column);\n        if (meanValue == null) {\n            return;\n        }\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n            if (value >= uclip) {\n                return; // bar is not visible\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { // cases 9, 10, 11 and 12\n            if (value <= lclip) {\n                return; // bar is not visible\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectX = Math.min(transY2, transY1);\n\n        double rectHeight = state.getBarWidth();\n        double rectWidth = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        // standard deviation lines\n        Number n = dataset.getStdDevValue(row, column);\n        if (n != null) {\n            double valueDelta = n.doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n        \n            Line2D line = null;\n            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, \n                                     highVal, rectY + rectHeight / 2.0d);\n            g2.draw(line);\n            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, \n                                     highVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n                                     lowVal, rectY + rectHeight * 0.75);\n            g2.draw(line);\n        }\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        // add an item entity, if this information is being collected\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n\n    }\n",
                "comment": "    /**\n     * Draws an item for a plot with a horizontal orientation.\n     * \n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
                "directly_related_tests": [
                    "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal",
                    "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal"
                ]
            },
            {
                "path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
                "start_loc": 373,
                "end_loc": 500,
                "buggy_function": "    protected void drawVerticalItem(Graphics2D g2,\n                                    CategoryItemRendererState state,\n                                    Rectangle2D dataArea,\n                                    CategoryPlot plot,\n                                    CategoryAxis domainAxis,\n                                    ValueAxis rangeAxis,\n                                    StatisticalCategoryDataset dataset,\n                                    int row,\n                                    int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        // BAR X\n        double rectX = domainAxis.getCategoryStart(\n            column, getColumnCount(), dataArea, xAxisLocation\n        );\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectX = rectX + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectX = rectX + row * state.getBarWidth();\n        }\n\n        // BAR Y\n        Number meanValue = dataset.getMeanValue(row, column);\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n            if (value >= uclip) {\n                return; // bar is not visible\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { // cases 9, 10, 11 and 12\n            if (value <= lclip) {\n                return; // bar is not visible\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth = state.getBarWidth();\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        // standard deviation lines\n            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n            Line2D line = null;\n            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,\n                                     rectX + rectWidth / 2.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, lowVal);\n            g2.draw(line);\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        // add an item entity, if this information is being collected\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n",
                "fixed_function": "    protected void drawVerticalItem(Graphics2D g2,\n                                    CategoryItemRendererState state,\n                                    Rectangle2D dataArea,\n                                    CategoryPlot plot,\n                                    CategoryAxis domainAxis,\n                                    ValueAxis rangeAxis,\n                                    StatisticalCategoryDataset dataset,\n                                    int row,\n                                    int column) {\n                                     \n        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();\n        \n        // BAR X\n        double rectX = domainAxis.getCategoryStart(\n            column, getColumnCount(), dataArea, xAxisLocation\n        );\n\n        int seriesCount = getRowCount();\n        int categoryCount = getColumnCount();\n        if (seriesCount > 1) {\n            double seriesGap = dataArea.getWidth() * getItemMargin()\n                               / (categoryCount * (seriesCount - 1));\n            rectX = rectX + row * (state.getBarWidth() + seriesGap);\n        }\n        else {\n            rectX = rectX + row * state.getBarWidth();\n        }\n\n        // BAR Y\n        Number meanValue = dataset.getMeanValue(row, column);\n        if (meanValue == null) {\n            return;\n        }\n\n        double value = meanValue.doubleValue();\n        double base = 0.0;\n        double lclip = getLowerClip();\n        double uclip = getUpperClip();\n\n        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4\n            if (value >= uclip) {\n                return; // bar is not visible\n            }\n            base = uclip;\n            if (value <= lclip) {\n                value = lclip;\n            }\n        }\n        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8\n            if (value >= uclip) {\n                value = uclip;\n            }\n            else {\n                if (value <= lclip) {\n                    value = lclip;\n                }\n            }\n        }\n        else { // cases 9, 10, 11 and 12\n            if (value <= lclip) {\n                return; // bar is not visible\n            }\n            base = getLowerClip();\n            if (value >= uclip) {\n               value = uclip;\n            }\n        }\n\n        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();\n        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);\n        double transY2 = rangeAxis.valueToJava2D(value, dataArea, \n                yAxisLocation);\n        double rectY = Math.min(transY2, transY1);\n\n        double rectWidth = state.getBarWidth();\n        double rectHeight = Math.abs(transY2 - transY1);\n\n        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, \n                rectHeight);\n        Paint seriesPaint = getItemPaint(row, column);\n        g2.setPaint(seriesPaint);\n        g2.fill(bar);\n        if (isDrawBarOutline() && state.getBarWidth() > 3) {\n            g2.setStroke(getItemStroke(row, column));\n            g2.setPaint(getItemOutlinePaint(row, column));\n            g2.draw(bar);\n        }\n\n        // standard deviation lines\n        Number n = dataset.getStdDevValue(row, column);\n        if (n != null) {\n            double valueDelta = n.doubleValue();\n            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    + valueDelta, dataArea, yAxisLocation);\n            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                    - valueDelta, dataArea, yAxisLocation);\n\n            if (this.errorIndicatorStroke != null) {\n                g2.setStroke(this.errorIndicatorStroke);\n            }\n            else {\n                g2.setStroke(getItemOutlineStroke(row, column));\n            }\n            if (this.errorIndicatorPaint != null) {\n                g2.setPaint(this.errorIndicatorPaint);  \n            }\n            else {\n                g2.setPaint(getItemOutlinePaint(row, column));   \n            }\n            Line2D line = null;\n            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,\n                                     rectX + rectWidth / 2.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, highVal);\n            g2.draw(line);\n            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n                                     rectX + rectWidth / 2.0d + 5.0d, lowVal);\n            g2.draw(line);\n        }\n        \n        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                column);\n        if (generator != null && isItemLabelVisible(row, column)) {\n            drawItemLabel(g2, dataset, row, column, plot, generator, bar, \n                    (value < 0.0));\n        }        \n\n        // add an item entity, if this information is being collected\n        EntityCollection entities = state.getEntityCollection();\n        if (entities != null) {\n            addItemEntity(entities, dataset, row, column, bar);\n        }\n    }\n",
                "comment": "    /**\n     * Draws an item for a plot with a vertical orientation.\n     * \n     * @param g2  the graphics device.\n     * @param state  the renderer state.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the data.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     */\n",
                "directly_related_tests": [
                    "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical",
                    "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical"
                ]
            }
        ],
        "trigger_test": {
            "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical": {
                "path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
                "function_name": "testDrawWithNullMeanVertical",
                "src": "    public void testDrawWithNullMeanVertical() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(null, new Double(4.0), \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullMeanVertical(StatisticalBarRendererTests.java:208)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullMeanVertical(StatisticalBarRendererTests.java:208)  assertTrue(success);",
                "failed_line": 208
            },
            "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical": {
                "path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
                "function_name": "testDrawWithNullDeviationVertical",
                "src": "    public void testDrawWithNullDeviationVertical() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(new Double(4.0), null, \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullDeviationVertical(StatisticalBarRendererTests.java:263)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullDeviationVertical(StatisticalBarRendererTests.java:263)  assertTrue(success);",
                "failed_line": 263
            },
            "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal": {
                "path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
                "function_name": "testDrawWithNullMeanHorizontal",
                "src": "    public void testDrawWithNullMeanHorizontal() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(null, new Double(4.0), \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            plot.setOrientation(PlotOrientation.HORIZONTAL);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullMeanHorizontal(StatisticalBarRendererTests.java:236)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullMeanHorizontal(StatisticalBarRendererTests.java:236)  assertTrue(success);",
                "failed_line": 236
            },
            "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal": {
                "path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
                "function_name": "testDrawWithNullDeviationHorizontal",
                "src": "    public void testDrawWithNullDeviationHorizontal() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                    = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(new Double(4.0), null, \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            plot.setOrientation(PlotOrientation.HORIZONTAL);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullDeviationHorizontal(StatisticalBarRendererTests.java:291)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullDeviationHorizontal(StatisticalBarRendererTests.java:291)  assertTrue(success);",
                "failed_line": 291
            }
        }
    },
    "Closure_6": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/TypeValidator.java",
                "start_loc": 362,
                "end_loc": 389,
                "buggy_function": "  boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, Node owner, String propName) {\n    // The NoType check is a hack to make typedefs work OK.\n    if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {\n      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {\n        registerMismatch(rightType, leftType, null);\n      } else {\n      // Do not type-check interface methods, because we expect that\n      // they will have dummy implementations that do not match the type\n      // annotations.\n      JSType ownerType = getJSType(owner);\n      if (ownerType.isFunctionPrototypeType()) {\n        FunctionType ownerFn = ownerType.toObjectType().getOwnerFunction();\n        if (ownerFn.isInterface() &&\n            rightType.isFunctionType() && leftType.isFunctionType()) {\n          return true;\n        }\n      }\n\n      mismatch(t, n,\n          \"assignment to property \" + propName + \" of \" +\n          getReadableJSTypeName(owner, true),\n          rightType, leftType);\n      }\n      return false;\n    }\n    return true;\n  }\n",
                "fixed_function": "  boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, Node owner, String propName) {\n    // The NoType check is a hack to make typedefs work OK.\n    if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {\n      // Do not type-check interface methods, because we expect that\n      // they will have dummy implementations that do not match the type\n      // annotations.\n      JSType ownerType = getJSType(owner);\n      if (ownerType.isFunctionPrototypeType()) {\n        FunctionType ownerFn = ownerType.toObjectType().getOwnerFunction();\n        if (ownerFn.isInterface() &&\n            rightType.isFunctionType() && leftType.isFunctionType()) {\n          return true;\n        }\n      }\n\n      mismatch(t, n,\n          \"assignment to property \" + propName + \" of \" +\n          getReadableJSTypeName(owner, true),\n          rightType, leftType);\n      return false;\n    }\n    return true;\n  }\n",
                "comment": "  /**\n   * Expect that the first type can be assigned to a symbol of the second\n   * type.\n   *\n   * @param t The node traversal.\n   * @param n The node to issue warnings on.\n   * @param rightType The type on the RHS of the assign.\n   * @param leftType The type of the symbol on the LHS of the assign.\n   * @param owner The owner of the property being assigned to.\n   * @param propName The name of the property being assigned to.\n   * @return True if the types matched, false otherwise.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition",
                    "com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/TypeValidator.java",
                "start_loc": 402,
                "end_loc": 413,
                "buggy_function": "  boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, String msg) {\n    if (!rightType.canAssignTo(leftType)) {\n      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {\n        registerMismatch(rightType, leftType, null);\n      } else {\n      mismatch(t, n, msg, rightType, leftType);\n      }\n      return false;\n    }\n    return true;\n  }\n",
                "fixed_function": "  boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n      JSType leftType, String msg) {\n    if (!rightType.canAssignTo(leftType)) {\n      mismatch(t, n, msg, rightType, leftType);\n      return false;\n    }\n    return true;\n  }\n",
                "comment": "  /**\n   * Expect that the first type can be assigned to a symbol of the second\n   * type.\n   *\n   * @param t The node traversal.\n   * @param n The node to issue warnings on.\n   * @param rightType The type on the RHS of the assign.\n   * @param leftType The type of the symbol on the LHS of the assign.\n   * @param msg An extra message for the mismatch warning, if necessary.\n   * @return True if the types matched, false otherwise.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.TypeCheckTest::testIssue635b"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition": {
                "path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
                "function_name": "testTypeRedefinition",
                "src": "  public void testTypeRedefinition() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        Lists.newArrayList(\n            \"variable a.A redefined with type function (new:a.A): undefined, \" +\n            \"original definition at [testcode]:1 with type enum{a.A}\",\n            \"assignment to property A of a\\n\" +\n            \"found   : function (new:a.A): undefined\\n\" +\n            \"required: enum{a.A}\"));\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testClosureTypesMultipleWarnings(LooseTypeCheckTest.java:6939)\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypeRedefinition(LooseTypeCheckTest.java:2121)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testClosureTypesMultipleWarnings(LooseTypeCheckTest.java:6939)  assertEquals(descriptions.size(), compiler.getWarningCount());\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypeRedefinition(LooseTypeCheckTest.java:2121)  testClosureTypesMultipleWarnings(        \"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"        + \"/** @constructor */ a.A = function() {}\",        Lists.newArrayList(            \"variable a.A redefined with type function (new:a.A): undefined, \" +            \"original definition at [testcode]:1 with type enum{a.A}\",            \"assignment to property A of a\\n\" +            \"found   : function (new:a.A): undefined\\n\" +            \"required: enum{a.A}\"));",
                "failed_line": 2121
            },
            "com.google.javascript.jscomp.TypeCheckTest::testIssue635b": {
                "path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
                "function_name": "testIssue635b",
                "src": "  public void testIssue635b() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"function F() {}\" +\n        \"/** @constructor */\" +\n        \"function G() {}\" +\n        \"/** @type {function(new:G)} */ var x = F;\",\n        \"initializing variable\\n\" +\n        \"found   : function (new:F): undefined\\n\" +\n        \"required: function (new:G): ?\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected a warning\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:10911)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:10891)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:10827)\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue635b(TypeCheckTest.java:6342)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected a warning\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:10911)  assertTrue(\"expected a warning\", warnings.length > 0);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:10891)  testTypes(DEFAULT_EXTERNS, js, description, isError);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:10827)  testTypes(js, description, false);\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue635b(TypeCheckTest.java:6342)  testTypes(        \"/** @constructor */\" +        \"function F() {}\" +        \"/** @constructor */\" +        \"function G() {}\" +        \"/** @type {function(new:G)} */ var x = F;\",        \"initializing variable\\n\" +        \"found   : function (new:F): undefined\\n\" +        \"required: function (new:G): ?\");",
                "failed_line": 6342
            },
            "com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition": {
                "path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
                "function_name": "testTypeRedefinition",
                "src": "  public void testTypeRedefinition() throws Exception {\n    testClosureTypesMultipleWarnings(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        Lists.newArrayList(\n            \"variable a.A redefined with type function (new:a.A): undefined, \" +\n            \"original definition at [testcode]:1 with type enum{a.A}\",\n            \"assignment to property A of a\\n\" +\n            \"found   : function (new:a.A): undefined\\n\" +\n            \"required: enum{a.A}\"));\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: unexpected warning(s) : JSC_DUP_VAR_DECLARATION. variable a.A redefined with type function (new:a.A): undefined, original definition at [testcode]:1 with type enum{a.A} at [testcode] line 1 : 61 expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.TypeCheckTest.testClosureTypesMultipleWarnings(TypeCheckTest.java:10876)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypeRedefinition(TypeCheckTest.java:2516)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: unexpected warning(s) : JSC_DUP_VAR_DECLARATION. variable a.A redefined with type function (new:a.A): undefined, original definition at [testcode]:1 with type enum{a.A} at [testcode] line 1 : 61 expected:<2> but was:<1>\n\tat com.google.javascript.jscomp.TypeCheckTest.testClosureTypesMultipleWarnings(TypeCheckTest.java:10876)  assertEquals(          \"unexpected warning(s) : \" +          Joiner.on(\", \").join(compiler.getWarnings()),          descriptions.size(), compiler.getWarningCount());\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypeRedefinition(TypeCheckTest.java:2516)  testClosureTypesMultipleWarnings(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"        + \"/** @constructor */ a.A = function() {}\",        Lists.newArrayList(            \"variable a.A redefined with type function (new:a.A): undefined, \" +            \"original definition at [testcode]:1 with type enum{a.A}\",            \"assignment to property A of a\\n\" +            \"found   : function (new:a.A): undefined\\n\" +            \"required: enum{a.A}\"));",
                "failed_line": 2516
            }
        }
    },
    "Closure_9": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
                "start_loc": 116,
                "end_loc": 125,
                "buggy_function": "  private String normalizeSourceName(String filename) {\n    // The DOS command shell will normalize \"/\" to \"\\\", so we have to\n    // wrestle it back.\n\n    if (filename.indexOf(filenamePrefix) == 0) {\n      filename = filename.substring(filenamePrefix.length());\n    }\n\n    return filename;\n  }\n",
                "fixed_function": "  private String normalizeSourceName(String filename) {\n    // The DOS command shell will normalize \"/\" to \"\\\", so we have to\n    // wrestle it back.\n    filename = filename.replace(\"\\\\\", \"/\");\n\n    if (filename.indexOf(filenamePrefix) == 0) {\n      filename = filename.substring(filenamePrefix.length());\n    }\n\n    return filename;\n  }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testGuessModuleName"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
                "start_loc": 179,
                "end_loc": 204,
                "buggy_function": "    private void visitScript(NodeTraversal t, Node script) {\n      Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");\n      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));\n      script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));\n      if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n      }\n      script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));\n\n      emitOptionalModuleExportsOverride(script, moduleName);\n\n      // Rename vars to not conflict in global scope.\n      NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));\n\n      compiler.reportCodeChange();\n    }\n",
                "fixed_function": "    private void visitScript(NodeTraversal t, Node script) {\n      Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");\n      String moduleName = guessCJSModuleName(script.getSourceFileName());\n      script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));\n      if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n      }\n      script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));\n\n      emitOptionalModuleExportsOverride(script, moduleName);\n\n      // Rename vars to not conflict in global scope.\n      NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));\n\n      compiler.reportCodeChange();\n    }\n",
                "comment": "    /**\n     * Emit goog.provide and add suffix to all global vars to avoid conflicts\n     * with other modules.\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.ProcessCommonJSModulesTest::testGuessModuleName": {
                "path": "test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java",
                "function_name": "testGuessModuleName",
                "src": "  public void testGuessModuleName() {\n    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, \"foo\");\n    assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo/baz.js\"));\n    assertEquals(\"module$baz\",\n        pass.guessCJSModuleName(\"foo\\\\baz.js\"));\n    assertEquals(\"module$bar$baz\",\n        pass.guessCJSModuleName(\"foo\\\\bar\\\\baz.js\"));\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<module$[]baz> but was:<module$[foo\\]baz>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testGuessModuleName(ProcessCommonJSModulesTest.java:132)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<module$[]baz> but was:<module$[foo\\]baz>\n\tat com.google.javascript.jscomp.ProcessCommonJSModulesTest.testGuessModuleName(ProcessCommonJSModulesTest.java:132)  assertEquals(\"module$baz\",        pass.guessCJSModuleName(\"foo\\\\baz.js\"));",
                "failed_line": 132
            }
        }
    },
    "Closure_41": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
                "start_loc": 242,
                "end_loc": 296,
                "buggy_function": "  FunctionTypeBuilder inferFromOverriddenFunction(\n      @Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType == null) {\n      return this;\n    }\n\n    returnType = oldType.getReturnType();\n    returnTypeInferred = oldType.isReturnTypeInferred();\n    if (paramsParent == null) {\n      // Not a function literal.\n      parametersNode = oldType.getParametersNode();\n      if (parametersNode == null) {\n        parametersNode = new FunctionParamBuilder(typeRegistry).build();\n      }\n    } else {\n      // We're overriding with a function literal. Apply type information\n      // to each parameter of the literal.\n      FunctionParamBuilder paramBuilder =\n          new FunctionParamBuilder(typeRegistry);\n      Iterator<Node> oldParams = oldType.getParameters().iterator();\n      boolean warnedAboutArgList = false;\n      boolean oldParamsListHitOptArgs = false;\n      for (Node currentParam = paramsParent.getFirstChild();\n           currentParam != null; currentParam = currentParam.getNext()) {\n        if (oldParams.hasNext()) {\n          Node oldParam = oldParams.next();\n          Node newParam = paramBuilder.newParameterFromNode(oldParam);\n\n          oldParamsListHitOptArgs = oldParamsListHitOptArgs ||\n              oldParam.isVarArgs() ||\n              oldParam.isOptionalArg();\n\n          // The subclass method might write its var_args as individual\n          // arguments.\n          if (currentParam.getNext() != null && newParam.isVarArgs()) {\n            newParam.setVarArgs(false);\n            newParam.setOptionalArg(true);\n          }\n        } else {\n          warnedAboutArgList |= addParameter(\n              paramBuilder,\n              typeRegistry.getNativeType(UNKNOWN_TYPE),\n              warnedAboutArgList,\n              codingConvention.isOptionalParameter(currentParam) ||\n                  oldParamsListHitOptArgs,\n              codingConvention.isVarArgsParameter(currentParam));\n        }\n      }\n\n      // Clone any remaining params that aren't in the function literal.\n\n      parametersNode = paramBuilder.build();\n    }\n    return this;\n  }\n",
                "fixed_function": "  FunctionTypeBuilder inferFromOverriddenFunction(\n      @Nullable FunctionType oldType, @Nullable Node paramsParent) {\n    if (oldType == null) {\n      return this;\n    }\n\n    returnType = oldType.getReturnType();\n    returnTypeInferred = oldType.isReturnTypeInferred();\n    if (paramsParent == null) {\n      // Not a function literal.\n      parametersNode = oldType.getParametersNode();\n      if (parametersNode == null) {\n        parametersNode = new FunctionParamBuilder(typeRegistry).build();\n      }\n    } else {\n      // We're overriding with a function literal. Apply type information\n      // to each parameter of the literal.\n      FunctionParamBuilder paramBuilder =\n          new FunctionParamBuilder(typeRegistry);\n      Iterator<Node> oldParams = oldType.getParameters().iterator();\n      boolean warnedAboutArgList = false;\n      boolean oldParamsListHitOptArgs = false;\n      for (Node currentParam = paramsParent.getFirstChild();\n           currentParam != null; currentParam = currentParam.getNext()) {\n        if (oldParams.hasNext()) {\n          Node oldParam = oldParams.next();\n          Node newParam = paramBuilder.newParameterFromNode(oldParam);\n\n          oldParamsListHitOptArgs = oldParamsListHitOptArgs ||\n              oldParam.isVarArgs() ||\n              oldParam.isOptionalArg();\n\n          // The subclass method might write its var_args as individual\n          // arguments.\n          if (currentParam.getNext() != null && newParam.isVarArgs()) {\n            newParam.setVarArgs(false);\n            newParam.setOptionalArg(true);\n          }\n        } else {\n          warnedAboutArgList |= addParameter(\n              paramBuilder,\n              typeRegistry.getNativeType(UNKNOWN_TYPE),\n              warnedAboutArgList,\n              codingConvention.isOptionalParameter(currentParam) ||\n                  oldParamsListHitOptArgs,\n              codingConvention.isVarArgsParameter(currentParam));\n        }\n      }\n\n      // Clone any remaining params that aren't in the function literal.\n      while (oldParams.hasNext()) {\n        paramBuilder.newParameterFromNode(oldParams.next());\n      }\n\n      parametersNode = paramBuilder.build();\n    }\n    return this;\n  }\n",
                "comment": "  /**\n   * Infer the parameter and return types of a function from\n   * the parameter and return types of the function it is overriding.\n   *\n   * @param oldType The function being overridden. Does nothing if this is null.\n   * @param paramsParent The LP node of the function that we're assigning to.\n   *     If null, that just means we're not initializing this to a function\n   *     literal.\n   */\n",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.LooseTypeCheckTest::testMethodInference6",
                    "com.google.javascript.jscomp.TypeCheckTest::testIssue368",
                    "com.google.javascript.jscomp.TypeCheckTest::testMethodInference6"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
                "start_loc": 421,
                "end_loc": 494,
                "buggy_function": "  FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n      @Nullable JSDocInfo info) {\n    if (argsParent == null) {\n      if (info == null) {\n        return this;\n      } else {\n        return inferParameterTypes(info);\n      }\n    }\n\n    // arguments\n    Node oldParameterType = null;\n    if (parametersNode != null) {\n      oldParameterType = parametersNode.getFirstChild();\n    }\n\n    FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList = false;\n    Set<String> allJsDocParams = (info == null) ?\n        Sets.<String>newHashSet() :\n        Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType = false;\n    boolean isVarArgs = false;\n    for (Node arg : argsParent.children()) {\n      String argumentName = arg.getString();\n      allJsDocParams.remove(argumentName);\n\n      // type from JSDocInfo\n      JSType parameterType = null;\n      boolean isOptionalParam = isOptionalParameter(arg, info);\n      isVarArgs = isVarArgsParameter(arg, info);\n\n      if (info != null && info.hasParameterType(argumentName)) {\n        parameterType =\n            info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n      } else if (oldParameterType != null &&\n          oldParameterType.getJSType() != null) {\n        parameterType = oldParameterType.getJSType();\n        isOptionalParam = oldParameterType.isOptionalArg();\n        isVarArgs = oldParameterType.isVarArgs();\n      } else {\n        parameterType = typeRegistry.getNativeType(UNKNOWN_TYPE);\n      }\n\n      if (templateTypeName != null &&\n          parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n        if (foundTemplateType) {\n          reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n        }\n        foundTemplateType = true;\n      }\n      warnedAboutArgList |= addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParam,\n          isVarArgs);\n\n      if (oldParameterType != null) {\n        oldParameterType = oldParameterType.getNext();\n      }\n    }\n\n    // Copy over any old parameters that aren't in the param list.\n\n    if (templateTypeName != null && !foundTemplateType) {\n      reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n\n    for (String inexistentName : allJsDocParams) {\n      reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n\n    parametersNode = builder.build();\n    return this;\n  }\n",
                "fixed_function": "  FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,\n      @Nullable JSDocInfo info) {\n    if (argsParent == null) {\n      if (info == null) {\n        return this;\n      } else {\n        return inferParameterTypes(info);\n      }\n    }\n\n    // arguments\n    Node oldParameterType = null;\n    if (parametersNode != null) {\n      oldParameterType = parametersNode.getFirstChild();\n    }\n\n    FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);\n    boolean warnedAboutArgList = false;\n    Set<String> allJsDocParams = (info == null) ?\n        Sets.<String>newHashSet() :\n        Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType = false;\n    boolean isVarArgs = false;\n    for (Node arg : argsParent.children()) {\n      String argumentName = arg.getString();\n      allJsDocParams.remove(argumentName);\n\n      // type from JSDocInfo\n      JSType parameterType = null;\n      boolean isOptionalParam = isOptionalParameter(arg, info);\n      isVarArgs = isVarArgsParameter(arg, info);\n\n      if (info != null && info.hasParameterType(argumentName)) {\n        parameterType =\n            info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n      } else if (oldParameterType != null &&\n          oldParameterType.getJSType() != null) {\n        parameterType = oldParameterType.getJSType();\n        isOptionalParam = oldParameterType.isOptionalArg();\n        isVarArgs = oldParameterType.isVarArgs();\n      } else {\n        parameterType = typeRegistry.getNativeType(UNKNOWN_TYPE);\n      }\n\n      if (templateTypeName != null &&\n          parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n        if (foundTemplateType) {\n          reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n        }\n        foundTemplateType = true;\n      }\n      warnedAboutArgList |= addParameter(\n          builder, parameterType, warnedAboutArgList,\n          isOptionalParam,\n          isVarArgs);\n\n      if (oldParameterType != null) {\n        oldParameterType = oldParameterType.getNext();\n      }\n    }\n\n    // Copy over any old parameters that aren't in the param list.\n    if (!isVarArgs) {\n      while (oldParameterType != null && !isVarArgs) {\n        builder.newParameterFromNode(oldParameterType);\n        oldParameterType = oldParameterType.getNext();\n      }\n    }\n\n    if (templateTypeName != null && !foundTemplateType) {\n      reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n    }\n\n    for (String inexistentName : allJsDocParams) {\n      reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n    }\n\n    parametersNode = builder.build();\n    return this;\n  }\n",
                "comment": "  /**\n   * Infer the parameter types from the list of argument names and\n   * the doc info.\n   */\n",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.LooseTypeCheckTest::testMethodInference6",
                    "com.google.javascript.jscomp.TypeCheckTest::testIssue368",
                    "com.google.javascript.jscomp.TypeCheckTest::testMethodInference6"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.LooseTypeCheckTest::testMethodInference6": {
                "path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
                "function_name": "testMethodInference6",
                "src": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/**   */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: unexpected warnings(s):\nJSC_WRONG_ARGUMENT_COUNT. Function G.prototype.foo: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s). at [testcode] line 2 : 89\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(LooseTypeCheckTest.java:7035)\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(LooseTypeCheckTest.java:7009)\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(LooseTypeCheckTest.java:6953)\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(LooseTypeCheckTest.java:6949)\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference6(LooseTypeCheckTest.java:1772)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: unexpected warnings(s):\nJSC_WRONG_ARGUMENT_COUNT. Function G.prototype.foo: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s). at [testcode] line 2 : 89\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(LooseTypeCheckTest.java:7035)  fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(LooseTypeCheckTest.java:7009)  testTypes(DEFAULT_EXTERNS, js, description, isError);\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(LooseTypeCheckTest.java:6953)  testTypes(js, description, false);\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testTypes(LooseTypeCheckTest.java:6949)  testTypes(js, (String) null);\n\tat com.google.javascript.jscomp.LooseTypeCheckTest.testMethodInference6(LooseTypeCheckTest.java:1772)  testTypes(        \"/** @constructor */ function F() {}\" +        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +        \"/** @constructor \\n * @extends {F} */ \" +        \"function G() {}\" +        \"/**   */ G.prototype.foo = function() { };\" +        \"(new G()).foo(1);\");",
                "failed_line": 1772
            },
            "com.google.javascript.jscomp.TypeCheckTest::testIssue368": {
                "path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
                "function_name": "testIssue368",
                "src": "  public void testIssue368() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo(){}\" +\n        \"/**\\n\" +\n        \" * @param {number} one\\n\" +\n        \" * @param {string} two\\n\" +\n        \" */\\n\" +\n        \"Foo.prototype.add = function(one, two) {};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar(){}\" +\n        \"/**   */\\n\" +\n        \"Bar.prototype.add = function(ignored) {};\" +\n        \"(new Bar()).add(1, 2);\",\n        \"actual parameter 2 of Bar.prototype.add does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<[actual parameter 2 of Bar.prototype.add does not match formal parameter\nfound   : number\nrequired: string]> but was:<[Function Bar.prototype.add: called with 2 argument(s). Function requires at least 1 argument(s) and no more than 1 argument(s).]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9529)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9508)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9446)\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue368(TypeCheckTest.java:5326)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<[actual parameter 2 of Bar.prototype.add does not match formal parameter\nfound   : number\nrequired: string]> but was:<[Function Bar.prototype.add: called with 2 argument(s). Function requires at least 1 argument(s) and no more than 1 argument(s).]>\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9529)  assertEquals(description, warnings[0].description);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9508)  testTypes(DEFAULT_EXTERNS, js, description, isError);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9446)  testTypes(js, description, false);\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue368(TypeCheckTest.java:5326)  testTypes(        \"/** @constructor */ function Foo(){}\" +        \"/**\\n\" +        \" * @param {number} one\\n\" +        \" * @param {string} two\\n\" +        \" */\\n\" +        \"Foo.prototype.add = function(one, two) {};\" +        \"/**\\n\" +        \" * @constructor\\n\" +        \" * @extends {Foo}\\n\" +        \" */\\n\" +        \"function Bar(){}\" +        \"/**   */\\n\" +        \"Bar.prototype.add = function(ignored) {};\" +        \"(new Bar()).add(1, 2);\",        \"actual parameter 2 of Bar.prototype.add does not match formal parameter\\n\" +        \"found   : number\\n\" +        \"required: string\");",
                "failed_line": 5326
            },
            "com.google.javascript.jscomp.TypeCheckTest::testMethodInference6": {
                "path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
                "function_name": "testMethodInference6",
                "src": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/**   */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: unexpected warnings(s):\nJSC_WRONG_ARGUMENT_COUNT. Function G.prototype.foo: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s). at [testcode] line 2 : 89\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9534)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9508)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9446)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9442)\n\tat com.google.javascript.jscomp.TypeCheckTest.testMethodInference6(TypeCheckTest.java:2027)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: unexpected warnings(s):\nJSC_WRONG_ARGUMENT_COUNT. Function G.prototype.foo: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s). at [testcode] line 2 : 89\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9534)  fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9508)  testTypes(DEFAULT_EXTERNS, js, description, isError);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9446)  testTypes(js, description, false);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9442)  testTypes(js, (String) null);\n\tat com.google.javascript.jscomp.TypeCheckTest.testMethodInference6(TypeCheckTest.java:2027)  testTypes(        \"/** @constructor */ function F() {}\" +        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +        \"/** @constructor \\n * @extends {F} */ \" +        \"function G() {}\" +        \"/**   */ G.prototype.foo = function() { };\" +        \"(new G()).foo(1);\");",
                "failed_line": 2027
            }
        }
    },
    "Closure_45": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "start_loc": 704,
                "end_loc": 749,
                "buggy_function": "  private void interpretAssigns() {\n    boolean changes = false;\n    do {\n      changes = false;\n\n      // We can't use traditional iterators and iterables for this list,\n      // because our lazily-evaluated continuations will modify it while\n      // we traverse it.\n      for (int current = 0; current < maybeUnreferenced.size(); current++) {\n        Var var = maybeUnreferenced.get(current);\n        if (referenced.contains(var)) {\n          maybeUnreferenced.remove(current);\n          current--;\n        } else {\n          boolean assignedToUnknownValue = false;\n          boolean hasPropertyAssign = false;\n\n          if (var.getParentNode().isVar() &&\n              !NodeUtil.isForIn(var.getParentNode().getParent())) {\n            Node value = var.getInitialValue();\n            assignedToUnknownValue = value != null &&\n                !NodeUtil.isLiteralValue(value, true);\n          } else {\n            // This was initialized to a function arg or a catch param\n            // or a for...in variable.\n            assignedToUnknownValue = true;\n          }\n\n          for (Assign assign : assignsByVar.get(var)) {\n            if (assign.isPropertyAssign) {\n              hasPropertyAssign = true;\n            } else if (!NodeUtil.isLiteralValue(\n                assign.assignNode.getLastChild(), true)) {\n              assignedToUnknownValue = true;\n            }\n          }\n\n          if (assignedToUnknownValue && hasPropertyAssign) {\n            changes = markReferencedVar(var) || changes;\n            maybeUnreferenced.remove(current);\n            current--;\n          }\n        }\n      }\n    } while (changes);\n  }\n",
                "fixed_function": "  private void interpretAssigns() {\n    boolean changes = false;\n    do {\n      changes = false;\n\n      // We can't use traditional iterators and iterables for this list,\n      // because our lazily-evaluated continuations will modify it while\n      // we traverse it.\n      for (int current = 0; current < maybeUnreferenced.size(); current++) {\n        Var var = maybeUnreferenced.get(current);\n        if (referenced.contains(var)) {\n          maybeUnreferenced.remove(current);\n          current--;\n        } else {\n          boolean assignedToUnknownValue = false;\n          boolean hasPropertyAssign = false;\n\n          if (var.getParentNode().isVar() &&\n              !NodeUtil.isForIn(var.getParentNode().getParent())) {\n            Node value = var.getInitialValue();\n            assignedToUnknownValue = value != null &&\n                !NodeUtil.isLiteralValue(value, true);\n          } else {\n            // This was initialized to a function arg or a catch param\n            // or a for...in variable.\n            assignedToUnknownValue = true;\n          }\n\n          boolean maybeEscaped = false;\n          for (Assign assign : assignsByVar.get(var)) {\n            if (assign.isPropertyAssign) {\n              hasPropertyAssign = true;\n            } else if (!NodeUtil.isLiteralValue(\n                assign.assignNode.getLastChild(), true)) {\n              assignedToUnknownValue = true;\n            }\n            if (assign.maybeAliased) {\n              maybeEscaped = true;\n            }\n          }\n\n          if ((assignedToUnknownValue || maybeEscaped) && hasPropertyAssign) {\n            changes = markReferencedVar(var) || changes;\n            maybeUnreferenced.remove(current);\n            current--;\n          }\n        }\n      }\n    } while (changes);\n  }\n",
                "comment": "  /**\n   * Look at all the property assigns to all variables.\n   * These may or may not count as references. For example,\n   *\n   * <code>\n   * var x = {};\n   * x.foo = 3; // not a reference.\n   * var y = foo();\n   * y.foo = 3; // is a reference.\n   * </code>\n   *\n   * Interpreting assignments could mark a variable as referenced that\n   * wasn't referenced before, in order to keep it alive. Because we find\n   * references by lazily traversing subtrees, marking a variable as\n   * referenced could trigger new traversals of new subtrees, which could\n   * find new references.\n   *\n   * Therefore, this interpretation needs to be run to a fixed point.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.RemoveUnusedVarsTest::testIssue618_1"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "start_loc": 898,
                "end_loc": 909,
                "buggy_function": "    Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {\n      Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));\n      this.assignNode = assignNode;\n      this.nameNode = nameNode;\n      this.isPropertyAssign = isPropertyAssign;\n\n      this.maybeAliased = !assignNode.getParent().isExprResult();\n      this.mayHaveSecondarySideEffects =\n          maybeAliased ||\n          NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n          NodeUtil.mayHaveSideEffects(assignNode.getLastChild());\n    }\n",
                "fixed_function": "    Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {\n      Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));\n      this.assignNode = assignNode;\n      this.nameNode = nameNode;\n      this.isPropertyAssign = isPropertyAssign;\n\n      this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);\n      this.mayHaveSecondarySideEffects =\n          maybeAliased ||\n          NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n          NodeUtil.mayHaveSideEffects(assignNode.getLastChild());\n    }\n",
                "comment": "",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.RemoveUnusedVarsTest::testIssue618_1": {
                "path": "test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java",
                "function_name": "testIssue618_1",
                "src": "  public void testIssue618_1() {\n    this.removeGlobal = false;\n    testSame(\n        \"function f() {\\n\" +\n        \"  var a = [], b;\\n\" +\n        \"  a.push(b = []);\\n\" +\n        \"  b[0] = 1;\\n\" +\n        \"  return a;\\n\" +\n        \"}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function f(){var a=[];var b;a.push(b=[]);b[0]=1;return a}\nResult: function f(){var a=[];a.push([]);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION f 1 [source_file: expected0]\n            NAME f 1 [source_file: expected0]\n            PARAM_LIST 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a 2 [source_file: expected0]\n                        ARRAYLIT 2 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME b 2 [source_file: expected0]\n                EXPR_RESULT 3 [source_file: expected0]\n                    CALL 3 [source_file: expected0]\n                        GETPROP 3 [source_file: expected0]\n                            NAME a 3 [source_file: expected0]\n                            STRING push 3 [source_file: expected0]\n                        ASSIGN 3 [source_file: expected0]\n                            NAME b 3 [source_file: expected0]\n                            ARRAYLIT 3 [source_file: expected0]\n                EXPR_RESULT 4 [source_file: expected0]\n                    ASSIGN 4 [source_file: expected0]\n                        GETELEM 4 [source_file: expected0]\n                            NAME b 4 [source_file: expected0]\n                            NUMBER 0.0 4 [source_file: expected0]\n                        NUMBER 1.0 4 [source_file: expected0]\n                RETURN 5 [source_file: expected0]\n                    NAME a 5 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION f 1 [source_file: testcode]\n            NAME f 1 [source_file: testcode]\n            PARAM_LIST 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a 2 [source_file: testcode]\n                        ARRAYLIT 2 [source_file: testcode]\n                EXPR_RESULT 3 [source_file: testcode]\n                    CALL 3 [source_file: testcode]\n                        GETPROP 3 [source_file: testcode]\n                            NAME a 3 [source_file: testcode]\n                            STRING push 3 [source_file: testcode]\n                        ARRAYLIT 3 [source_file: testcode]\n                RETURN 5 [source_file: testcode]\n                    NAME a 5 [source_file: testcode]\n\n\nSubtree1: BLOCK 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a 2 [source_file: expected0]\n            ARRAYLIT 2 [source_file: expected0]\n    VAR 2 [source_file: expected0]\n        NAME b 2 [source_file: expected0]\n    EXPR_RESULT 3 [source_file: expected0]\n        CALL 3 [source_file: expected0]\n            GETPROP 3 [source_file: expected0]\n                NAME a 3 [source_file: expected0]\n                STRING push 3 [source_file: expected0]\n            ASSIGN 3 [source_file: expected0]\n                NAME b 3 [source_file: expected0]\n                ARRAYLIT 3 [source_file: expected0]\n    EXPR_RESULT 4 [source_file: expected0]\n        ASSIGN 4 [source_file: expected0]\n            GETELEM 4 [source_file: expected0]\n                NAME b 4 [source_file: expected0]\n                NUMBER 0.0 4 [source_file: expected0]\n            NUMBER 1.0 4 [source_file: expected0]\n    RETURN 5 [source_file: expected0]\n        NAME a 5 [source_file: expected0]\n\n\nSubtree2: BLOCK 1 [source_file: testcode]\n    VAR 1 [source_file: testcode]\n        NAME a 2 [source_file: testcode]\n            ARRAYLIT 2 [source_file: testcode]\n    EXPR_RESULT 3 [source_file: testcode]\n        CALL 3 [source_file: testcode]\n            GETPROP 3 [source_file: testcode]\n                NAME a 3 [source_file: testcode]\n                STRING push 3 [source_file: testcode]\n            ARRAYLIT 3 [source_file: testcode]\n    RETURN 5 [source_file: testcode]\n        NAME a 5 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:866)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:427)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:352)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:321)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:309)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:541)\n\tat com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue618_1(RemoveUnusedVarsTest.java:741)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function f(){var a=[];var b;a.push(b=[]);b[0]=1;return a}\nResult: function f(){var a=[];a.push([]);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION f 1 [source_file: expected0]\n            NAME f 1 [source_file: expected0]\n            PARAM_LIST 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a 2 [source_file: expected0]\n                        ARRAYLIT 2 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME b 2 [source_file: expected0]\n                EXPR_RESULT 3 [source_file: expected0]\n                    CALL 3 [source_file: expected0]\n                        GETPROP 3 [source_file: expected0]\n                            NAME a 3 [source_file: expected0]\n                            STRING push 3 [source_file: expected0]\n                        ASSIGN 3 [source_file: expected0]\n                            NAME b 3 [source_file: expected0]\n                            ARRAYLIT 3 [source_file: expected0]\n                EXPR_RESULT 4 [source_file: expected0]\n                    ASSIGN 4 [source_file: expected0]\n                        GETELEM 4 [source_file: expected0]\n                            NAME b 4 [source_file: expected0]\n                            NUMBER 0.0 4 [source_file: expected0]\n                        NUMBER 1.0 4 [source_file: expected0]\n                RETURN 5 [source_file: expected0]\n                    NAME a 5 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION f 1 [source_file: testcode]\n            NAME f 1 [source_file: testcode]\n            PARAM_LIST 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a 2 [source_file: testcode]\n                        ARRAYLIT 2 [source_file: testcode]\n                EXPR_RESULT 3 [source_file: testcode]\n                    CALL 3 [source_file: testcode]\n                        GETPROP 3 [source_file: testcode]\n                            NAME a 3 [source_file: testcode]\n                            STRING push 3 [source_file: testcode]\n                        ARRAYLIT 3 [source_file: testcode]\n                RETURN 5 [source_file: testcode]\n                    NAME a 5 [source_file: testcode]\n\n\nSubtree1: BLOCK 1 [source_file: expected0]\n    VAR 1 [source_file: expected0]\n        NAME a 2 [source_file: expected0]\n            ARRAYLIT 2 [source_file: expected0]\n    VAR 2 [source_file: expected0]\n        NAME b 2 [source_file: expected0]\n    EXPR_RESULT 3 [source_file: expected0]\n        CALL 3 [source_file: expected0]\n            GETPROP 3 [source_file: expected0]\n                NAME a 3 [source_file: expected0]\n                STRING push 3 [source_file: expected0]\n            ASSIGN 3 [source_file: expected0]\n                NAME b 3 [source_file: expected0]\n                ARRAYLIT 3 [source_file: expected0]\n    EXPR_RESULT 4 [source_file: expected0]\n        ASSIGN 4 [source_file: expected0]\n            GETELEM 4 [source_file: expected0]\n                NAME b 4 [source_file: expected0]\n                NUMBER 0.0 4 [source_file: expected0]\n            NUMBER 1.0 4 [source_file: expected0]\n    RETURN 5 [source_file: expected0]\n        NAME a 5 [source_file: expected0]\n\n\nSubtree2: BLOCK 1 [source_file: testcode]\n    VAR 1 [source_file: testcode]\n        NAME a 2 [source_file: testcode]\n            ARRAYLIT 2 [source_file: testcode]\n    EXPR_RESULT 3 [source_file: testcode]\n        CALL 3 [source_file: testcode]\n            GETPROP 3 [source_file: testcode]\n                NAME a 3 [source_file: testcode]\n                STRING push 3 [source_file: testcode]\n            ARRAYLIT 3 [source_file: testcode]\n    RETURN 5 [source_file: testcode]\n        NAME a 5 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:866)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:427)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:352)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:321)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:309)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:541)  test(js, js);\n\tat com.google.javascript.jscomp.RemoveUnusedVarsTest.testIssue618_1(RemoveUnusedVarsTest.java:741)  testSame(        \"function f() {\\n\" +        \"  var a = [], b;\\n\" +        \"  a.push(b = []);\\n\" +        \"  b[0] = 1;\\n\" +        \"  return a;\\n\" +        \"}\");",
                "failed_line": 741
            }
        }
    },
    "Closure_47": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
                "start_loc": 482,
                "end_loc": 496,
                "buggy_function": "  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine())\n        .setColumnPosition(entry.getSourceColumn());\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                "fixed_function": "  private OriginalMapping getOriginalMappingForEntry(Entry entry) {\n    if (entry.getSourceFileId() == UNMAPPED) {\n      return null;\n    } else {\n      // Adjust the line/column here to be start at 1.\n      Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1)\n        .setColumnPosition(entry.getSourceColumn() + 1);\n      if (entry.getNameId() != UNMAPPED) {\n        x.setIdentifier(names[entry.getNameId()]);\n      }\n      return x.build();\n    }\n  }\n",
                "comment": "  /**\n   * Creates an \"OriginalMapping\" object for the given entry object.\n   */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/com/google/javascript/jscomp/SourceMap.java",
                "start_loc": 117,
                "end_loc": 143,
                "buggy_function": "  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(node.getLineno(), node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                "fixed_function": "  public void addMapping(\n      Node node,\n      FilePosition outputStartPosition,\n      FilePosition outputEndPosition) {\n    String sourceFile = node.getSourceFileName();\n\n    // If the node does not have an associated source file or\n    // its line number is -1, then the node does not have sufficient\n    // information for a mapping to be useful.\n    if (sourceFile == null || node.getLineno() < 0) {\n      return;\n    }\n\n    sourceFile = fixupSourceLocation(sourceFile);\n\n    String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n\n    // Strangely, Rhino source lines are one based but columns are\n    // zero based.\n    // We don't change this for the v1 or v2 source maps but for\n    // v3 we make them both 0 based.\n    int lineBaseOffset = 1;\n    if (generator instanceof SourceMapGeneratorV1\n        || generator instanceof SourceMapGeneratorV2) {\n      lineBaseOffset = 0;\n    }\n\n    generator.addMapping(\n        sourceFile, originalName,\n        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),\n        outputStartPosition, outputEndPosition);\n  }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4",
                    "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5"
                ]
            }
        ],
        "trigger_test": {
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testParseSourceMetaMap",
                "src": "  public void testParseSourceMetaMap() throws Exception {\n    final String INPUT1 = \"file1\";\n    final String INPUT2 = \"file2\";\n    LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap();\n    inputs.put(INPUT1, \"var __FOO__ = 1;\");\n    inputs.put(INPUT2, \"var __BAR__ = 2;\");\n    RunResult result1 = compile(inputs.get(INPUT1), INPUT1);\n    RunResult result2 = compile(inputs.get(INPUT2), INPUT2);\n\n    final String MAP1 = \"map1\";\n    final String MAP2 = \"map2\";\n    final LinkedHashMap<String, String> maps = Maps.newLinkedHashMap();\n    maps.put(MAP1, result1.sourceMapFileContent);\n    maps.put(MAP2, result2.sourceMapFileContent);\n\n    List<SourceMapSection> sections = Lists.newArrayList();\n\n    StringBuilder output = new StringBuilder();\n    FilePosition offset = appendAndCount(output, result1.generatedSource);\n    sections.add(SourceMapSection.forURL(MAP1, 0, 0));\n    output.append(result2.generatedSource);\n    sections.add(\n        SourceMapSection.forURL(MAP2, offset.getLine(), offset.getColumn()));\n\n    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n    StringBuilder mapContents = new StringBuilder();\n    generator.appendIndexMapTo(mapContents, \"out.js\", sections);\n\n    check(inputs, output.toString(), mapContents.toString(),\n      new SourceMapSupplier() {\n        @Override\n        public String getSourceMap(String url){\n          return maps.get(url);\n      }});\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<5> but was:<4>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testParseSourceMetaMap(SourceMapGeneratorV3Test.java:450)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<5> but was:<4>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testParseSourceMetaMap(SourceMapGeneratorV3Test.java:450)  check(inputs, output.toString(), mapContents.toString(),      new SourceMapSupplier() {        @Override        public String getSourceMap(String url){          return maps.get(url);      }});",
                "failed_line": 450
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput0a",
                "src": "  public void testGoldenOutput0a() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"a;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"a\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"te...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"te...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput0a(SourceMapGeneratorV3Test.java:134)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"te...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"te...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput0a(SourceMapGeneratorV3Test.java:134)  checkSourceMap(\"a;\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"a\\\"]\\n\" +                   \"}\\n\");",
                "failed_line": 134
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testMultilineMapping",
                "src": "  public void testMultilineMapping() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +\n                    \"var __VAR__ = '__STR__';\\n\" +\n                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +\n                    \"}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultilineMapping(SourceMapGeneratorV3Test.java:93)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultilineMapping(SourceMapGeneratorV3Test.java:93)  compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +                    \"var __VAR__ = '__STR__';\\n\" +                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +                    \"}\");",
                "failed_line": 93
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testMultiFunctionMapping",
                "src": "  public void testMultiFunctionMapping() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +\n                    \"var __VAR__ = '__STR__';\\n\" +\n                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +\n                    \"}\\n\" +\n\n                    \"function __BASIC2__(__PARAM3__, __PARAM4__) {\\n\" +\n                    \"var __VAR2__ = '__STR2__';\\n\" +\n                    \"var __ANO2__ = \\\"__STR3__\\\";\\n\" +\n                    \"}\\n\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultiFunctionMapping(SourceMapGeneratorV3Test.java:107)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultiFunctionMapping(SourceMapGeneratorV3Test.java:107)  compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +                    \"var __VAR__ = '__STR__';\\n\" +                    \"var __ANO__ = \\\"__STR2__\\\";\\n\" +                    \"}\\n\" +                    \"function __BASIC2__(__PARAM3__, __PARAM4__) {\\n\" +                    \"var __VAR2__ = '__STR2__';\\n\" +                    \"var __ANO2__ = \\\"__STR3__\\\";\\n\" +                    \"}\\n\");",
                "failed_line": 107
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testLiteralMappingsGoldenOutput",
                "src": "  public void testLiteralMappingsGoldenOutput() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +\n                   \"var __VAR__ = '__STR__'; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,\" +\n                       \"CAAyB,CAAE,IAAIC,QAAU,SAAhB;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"__BASIC__\\\",\\\"__PARAM1__\\\",\\\"__PARAM2__\\\",\" +\n                       \"\\\"__VAR__\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,CAACC,...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testLiteralMappingsGoldenOutput(SourceMapGeneratorV3Test.java:77)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,CAACC,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testLiteralMappingsGoldenOutput(SourceMapGeneratorV3Test.java:77)  checkSourceMap(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +                   \"var __VAR__ = '__STR__'; }\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,\" +                       \"CAAyB,CAAE,IAAIC,QAAU,SAAhB;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"__BASIC__\\\",\\\"__PARAM1__\\\",\\\"__PARAM2__\\\",\" +                       \"\\\"__VAR__\\\"]\\n\" +                   \"}\\n\");",
                "failed_line": 77
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testMultilineMapping2",
                "src": "  public void testMultilineMapping2() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +\n                    \"var __VAR__ = 1;\\n\" +\n                    \"var __ANO__ = 2;\\n\" +\n                    \"}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultilineMapping2(SourceMapGeneratorV3Test.java:100)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testMultilineMapping2(SourceMapGeneratorV3Test.java:100)  compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) {\\n\" +                    \"var __VAR__ = 1;\\n\" +                    \"var __ANO__ = 2;\\n\" +                    \"}\");",
                "failed_line": 100
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testBasicMappingGoldenOutput",
                "src": "  public void testBasicMappingGoldenOutput() throws Exception {\n    // Empty source map test\n    checkSourceMap(\"function __BASIC__() { }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,EAAG;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"__BASIC__\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,EAAG;\"...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,EAAG;\"...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMappingGoldenOutput(SourceMapGeneratorV3Test.java:54)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,UAAS,EAAG;\"...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,UAAS,EAAG;\"...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMappingGoldenOutput(SourceMapGeneratorV3Test.java:54)  checkSourceMap(\"function __BASIC__() { }\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,EAAG;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"__BASIC__\\\"]\\n\" +                   \"}\\n\");",
                "failed_line": 54
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testSourceMapMerging",
                "src": "  public void testSourceMapMerging() throws Exception {\n    final String INPUT1 = \"file1\";\n    final String INPUT2 = \"file2\";\n    LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap();\n    inputs.put(INPUT1, \"var __FOO__ = 1;\");\n    inputs.put(INPUT2, \"var __BAR__ = 2;\");\n    RunResult result1 = compile(inputs.get(INPUT1), INPUT1);\n    RunResult result2 = compile(inputs.get(INPUT2), INPUT2);\n\n    StringBuilder output = new StringBuilder();\n    FilePosition offset = appendAndCount(output, result1.generatedSource);\n    output.append(result2.generatedSource);\n\n    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n\n    generator.mergeMapSection(0, 0, result1.sourceMapFileContent);\n    generator.mergeMapSection(offset.getLine(), offset.getColumn(),\n        result2.sourceMapFileContent);\n\n    StringBuilder mapContents = new StringBuilder();\n    generator.appendTo(mapContents, \"out.js\");\n\n    check(inputs, output.toString(), mapContents.toString());\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<5> but was:<4>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testSourceMapMerging(SourceMapGeneratorV3Test.java:480)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<5> but was:<4>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testSourceMapMerging(SourceMapGeneratorV3Test.java:480)  check(inputs, output.toString(), mapContents.toString());",
                "failed_line": 480
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testLiteralMappings",
                "src": "  public void testLiteralMappings() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +\n                    \"var __VAR__ = '__STR__'; }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testLiteralMappings(SourceMapGeneratorV3Test.java:71)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testLiteralMappings(SourceMapGeneratorV3Test.java:71)  compileAndCheck(\"function __BASIC__(__PARAM1__, __PARAM2__) { \" +                    \"var __VAR__ = '__STR__'; }\");",
                "failed_line": 71
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testBasicMapping1",
                "src": "  public void testBasicMapping1() throws Exception {\n    compileAndCheck(\"function __BASIC__() { }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMapping1(SourceMapGeneratorV3Test.java:49)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMapping1(SourceMapGeneratorV3Test.java:49)  compileAndCheck(\"function __BASIC__() { }\");",
                "failed_line": 49
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testBasicMapping2",
                "src": "  public void testBasicMapping2() throws Exception {\n    compileAndCheck(\"function __BASIC__(__PARAM1__) {}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMapping2(SourceMapGeneratorV3Test.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<10> but was:<9>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:252)  assertEquals(start, mapping.getColumnPosition());\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:199)  check(originalInputs, generatedSource, sourceMapFileContent, null);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.check(SourceMapTestCase.java:193)  check(inputMap, output, sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.compileAndCheck(SourceMapTestCase.java:185)  check(inputName, js, result.generatedSource, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testBasicMapping2(SourceMapGeneratorV3Test.java:67)  compileAndCheck(\"function __BASIC__(__PARAM1__) {}\");",
                "failed_line": 67
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput1",
                "src": "  public void testGoldenOutput1() throws Exception {\n    detailLevel = SourceMap.DetailLevel.ALL;\n\n    checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                       \"CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG,\" +\n                       \"OAAOD,IAA9B;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n\n    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n\n    checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE,\" +\n                       \"GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF,\" +\n                       \"SAAmDC,IAAnDD;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput1(SourceMapGeneratorV3Test.java:149)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput1(SourceMapGeneratorV3Test.java:149)  checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +                       \"CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG,\" +                       \"OAAOD,IAA9B;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +                   \"}\\n\");",
                "failed_line": 149
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput2",
                "src": "  public void testGoldenOutput2() throws Exception {\n    checkSourceMap(\"function f(foo, bar) {\\r\\n\\n\\n\\nfoo = foo + bar + foo;\" +\n                   \"\\nreturn foo;\\n}\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                       \"CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD,\" +\n                       \"GAClB,OAAOA,IALc;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput2(SourceMapGeneratorV3Test.java:179)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,QAASA,EAAC,CAACC,...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,QAASA,EAAC,CAACC,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:84)  checkSourceMap(\"testcode\", js, expectedMap);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput2(SourceMapGeneratorV3Test.java:179)  checkSourceMap(\"function f(foo, bar) {\\r\\n\\n\\n\\nfoo = foo + bar + foo;\" +                   \"\\nreturn foo;\\n}\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +                       \"CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD,\" +                       \"GAClB,OAAOA,IALc;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +                   \"\\\"names\\\":[\\\"f\\\",\\\"foo\\\",\\\"bar\\\"]\\n\" +                   \"}\\n\");",
                "failed_line": 179
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput3",
                "src": "  public void testGoldenOutput3() throws Exception {\n    checkSourceMap(\"c:\\\\myfile.js\",\n                   \"foo;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"foo\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"c:...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"c:...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput3(SourceMapGeneratorV3Test.java:195)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA;\",\n\"sources\":[\"c:...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA;\",\n\"sources\":[\"c:...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput3(SourceMapGeneratorV3Test.java:195)  checkSourceMap(\"c:\\\\myfile.js\",                   \"foo;\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +                   \"\\\"names\\\":[\\\"foo\\\"]\\n\" +                   \"}\\n\");",
                "failed_line": 195
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput4",
                "src": "  public void testGoldenOutput4() throws Exception {\n    checkSourceMap(\"c:\\\\myfile.js\",\n                   \"foo;   boo;   goo;\",\n\n                   \"{\\n\" +\n                   \"\\\"version\\\":3,\\n\" +\n                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                   \"\\\"lineCount\\\":1,\\n\" +\n                   \"\\\"mappings\\\":\\\"AAAAA,GAAOC,IAAOC;\\\",\\n\" +\n                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                   \"\\\"names\\\":[\\\"foo\\\",\\\"boo\\\",\\\"goo\\\"]\\n\" +\n                   \"}\\n\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,GAAOC,IAAOC;\",\n\"s...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,GAAOC,IAAOC;\",\n\"s...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput4(SourceMapGeneratorV3Test.java:209)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...t\":1,\n\"mappings\":\"AA[A]AA,GAAOC,IAAOC;\",\n\"s...> but was:<...t\":1,\n\"mappings\":\"AA[C]AA,GAAOC,IAAOC;\",\n\"s...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput4(SourceMapGeneratorV3Test.java:209)  checkSourceMap(\"c:\\\\myfile.js\",                   \"foo;   boo;   goo;\",                   \"{\\n\" +                   \"\\\"version\\\":3,\\n\" +                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +                   \"\\\"lineCount\\\":1,\\n\" +                   \"\\\"mappings\\\":\\\"AAAAA,GAAOC,IAAOC;\\\",\\n\" +                   \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +                   \"\\\"names\\\":[\\\"foo\\\",\\\"boo\\\",\\\"goo\\\"]\\n\" +                   \"}\\n\");",
                "failed_line": 209
            },
            "com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5": {
                "path": "test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java",
                "function_name": "testGoldenOutput5",
                "src": "  public void testGoldenOutput5() throws Exception {\n    detailLevel = SourceMap.DetailLevel.ALL;\n\n    checkSourceMap(\n        \"c:\\\\myfile.js\",\n        \"/** @preserve\\n\" +\n        \" * this is a test.\\n\" +\n        \" */\\n\" +\n        \"var foo=a + 'this is a really long line that will force the\"\n        + \" mapping to span multiple lines 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \"' + c + d + e;\",\n\n        \"{\\n\" +\n        \"\\\"version\\\":3,\\n\" +\n        \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n        \"\\\"lineCount\\\":6,\\n\" +\n        \"\\\"mappings\\\":\\\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,\" +\n            \"CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\\\",\\n\" +\n        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n        \"}\\n\");\n\n    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n\n    checkSourceMap(\"c:\\\\myfile.js\",\n        \"/** @preserve\\n\" +\n        \" * this is a test.\\n\" +\n        \" */\\n\" +\n        \"var foo=a + 'this is a really long line that will force the\"\n        + \" mapping to span multiple lines 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \" 123456789 123456789 123456789 123456789 123456789\"\n        + \"' + c + d + e;\",\n\n        \"{\\n\" +\n        \"\\\"version\\\":3,\\n\" +\n        \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n        \"\\\"lineCount\\\":6,\\n\" +\n        \"\\\"mappings\\\":\\\"A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG,\" +\n            \"CAAlyCH,CAAsyCI;\\\",\\n\" +\n        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n        \"}\\n\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...\n\"mappings\":\"A;;;;AA[G]A,IAAIA,IAAIC,CAAJD,...> but was:<...\n\"mappings\":\"A;;;;AA[I]A,IAAIA,IAAIC,CAAJD,...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput5(SourceMapGeneratorV3Test.java:225)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...\n\"mappings\":\"A;;;;AA[G]A,IAAIA,IAAIC,CAAJD,...> but was:<...\n\"mappings\":\"A;;;;AA[I]A,IAAIA,IAAIC,CAAJD,...>\n\tat com.google.debugging.sourcemap.SourceMapTestCase.checkSourceMap(SourceMapTestCase.java:96)  assertEquals(expectedMap, result.sourceMapFileContent);\n\tat com.google.debugging.sourcemap.SourceMapGeneratorV3Test.testGoldenOutput5(SourceMapGeneratorV3Test.java:225)  checkSourceMap(        \"c:\\\\myfile.js\",        \"/** @preserve\\n\" +        \" * this is a test.\\n\" +        \" */\\n\" +        \"var foo=a + 'this is a really long line that will force the\"        + \" mapping to span multiple lines 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \" 123456789 123456789 123456789 123456789 123456789\"        + \"' + c + d + e;\",        \"{\\n\" +        \"\\\"version\\\":3,\\n\" +        \"\\\"file\\\":\\\"testcode\\\",\\n\" +        \"\\\"lineCount\\\":6,\\n\" +        \"\\\"mappings\\\":\\\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,\" +            \"CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\\\",\\n\" +        \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +        \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +        \"}\\n\");",
                "failed_line": 225
            }
        }
    },
    "Closure_54": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
                "start_loc": 1373,
                "end_loc": 1489,
                "buggy_function": "    void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue) {\n      Node ownerNode = n.getFirstChild();\n      String ownerName = ownerNode.getQualifiedName();\n      String qName = n.getQualifiedName();\n      String propName = n.getLastChild().getString();\n      Preconditions.checkArgument(qName != null && ownerName != null);\n\n      // Precedence of type information on GETPROPs:\n      // 1) @type annnotation / @enum annotation\n      // 2) ASSIGN to FUNCTION literal\n      // 3) @param/@return annotation (with no function literal)\n      // 4) ASSIGN to something marked @const\n      // 5) ASSIGN to anything else\n      //\n      // 1, 3, and 4 are declarations, 5 is inferred, and 2 is a declaration iff\n      // the function has jsdoc or has not been declared before.\n      //\n      // FUNCTION literals are special because TypedScopeCreator is very smart\n      // about getting as much type information as possible for them.\n\n      // Determining type for #1 + #2 + #3 + #4\n      JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n      if (valueType == null && rhsValue != null) {\n        // Determining type for #5\n        valueType = rhsValue.getJSType();\n      }\n      // Function prototypes are special.\n      // It's a common JS idiom to do:\n      // F.prototype = { ... };\n      // So if F does not have an explicitly declared super type,\n      // allow F.prototype to be redefined arbitrarily.\n      if (\"prototype\".equals(propName)) {\n        Var qVar = scope.getVar(qName);\n        if (qVar != null) {\n          // If the programmer has declared that F inherits from Super,\n          // and they assign F.prototype to an object literal,\n          // then they are responsible for making sure that the object literal's\n          // implicit prototype is set up appropriately. We just obey\n          // the @extends tag.\n          if (!qVar.isTypeInferred()) {\n            // If the programmer has declared that F inherits from Super,\n            // and they assign F.prototype to some arbitrary expression,\n            // there's not much we can do. We just ignore the expression,\n            // and hope they've annotated their code in a way to tell us\n            // what props are going to be on that prototype.\n            return;\n          }\n          if (qVar.getScope() == scope) {\n            scope.undeclare(qVar);\n          }\n        }\n      }\n\n      if (valueType == null) {\n        if (parent.getType() == Token.EXPR_RESULT) {\n          stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));\n        }\n\n        return;\n      }\n\n      boolean inferred = true;\n      if (info != null) {\n        // Determining declaration for #1 + #3 + #4\n        inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred) {\n        // Determining declaration for #2\n        inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            (info != null || !scope.isDeclared(qName, false)));\n      }\n\n      if (!inferred) {\n        ObjectType ownerType = getObjectSlot(ownerName);\n        if (ownerType != null) {\n          // Only declare this as an official property if it has not been\n          // declared yet.\n          boolean isExtern = t.getInput() != null && t.getInput().isExtern();\n          if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType())) {\n            // If the property is undeclared or inferred, declare it now.\n            ownerType.defineDeclaredProperty(propName, valueType, n);\n          }\n        }\n\n        // If the property is already declared, the error will be\n        // caught when we try to declare it in the current scope.\n        defineSlot(n, parent, valueType, inferred);\n      } else if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE) {\n        // We declare these for delegate proxy method properties.\n        FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));\n        if (ownerType != null) {\n          JSType ownerTypeOfThis = ownerType.getTypeOfThis();\n          String delegateName = codingConvention.getDelegateSuperclassName();\n          JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);\n          if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType)) {\n            defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);\n          }\n        }\n      }\n    }\n",
                "fixed_function": "    void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue) {\n      Node ownerNode = n.getFirstChild();\n      String ownerName = ownerNode.getQualifiedName();\n      String qName = n.getQualifiedName();\n      String propName = n.getLastChild().getString();\n      Preconditions.checkArgument(qName != null && ownerName != null);\n\n      // Precedence of type information on GETPROPs:\n      // 1) @type annnotation / @enum annotation\n      // 2) ASSIGN to FUNCTION literal\n      // 3) @param/@return annotation (with no function literal)\n      // 4) ASSIGN to something marked @const\n      // 5) ASSIGN to anything else\n      //\n      // 1, 3, and 4 are declarations, 5 is inferred, and 2 is a declaration iff\n      // the function has jsdoc or has not been declared before.\n      //\n      // FUNCTION literals are special because TypedScopeCreator is very smart\n      // about getting as much type information as possible for them.\n\n      // Determining type for #1 + #2 + #3 + #4\n      JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n      if (valueType == null && rhsValue != null) {\n        // Determining type for #5\n        valueType = rhsValue.getJSType();\n      }\n      // Function prototypes are special.\n      // It's a common JS idiom to do:\n      // F.prototype = { ... };\n      // So if F does not have an explicitly declared super type,\n      // allow F.prototype to be redefined arbitrarily.\n      if (\"prototype\".equals(propName)) {\n        Var qVar = scope.getVar(qName);\n        if (qVar != null) {\n          // If the programmer has declared that F inherits from Super,\n          // and they assign F.prototype to an object literal,\n          // then they are responsible for making sure that the object literal's\n          // implicit prototype is set up appropriately. We just obey\n          // the @extends tag.\n          ObjectType qVarType = ObjectType.cast(qVar.getType());\n          if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.getType() == Token.OBJECTLIT) {\n            typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n          } else if (!qVar.isTypeInferred()) {\n            // If the programmer has declared that F inherits from Super,\n            // and they assign F.prototype to some arbitrary expression,\n            // there's not much we can do. We just ignore the expression,\n            // and hope they've annotated their code in a way to tell us\n            // what props are going to be on that prototype.\n            return;\n          }\n          if (qVar.getScope() == scope) {\n            scope.undeclare(qVar);\n          }\n        }\n      }\n\n      if (valueType == null) {\n        if (parent.getType() == Token.EXPR_RESULT) {\n          stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));\n        }\n\n        return;\n      }\n\n      boolean inferred = true;\n      if (info != null) {\n        // Determining declaration for #1 + #3 + #4\n        inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (info.isConstant() && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred) {\n        // Determining declaration for #2\n        inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            (info != null || !scope.isDeclared(qName, false)));\n      }\n\n      if (!inferred) {\n        ObjectType ownerType = getObjectSlot(ownerName);\n        if (ownerType != null) {\n          // Only declare this as an official property if it has not been\n          // declared yet.\n          boolean isExtern = t.getInput() != null && t.getInput().isExtern();\n          if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType())) {\n            // If the property is undeclared or inferred, declare it now.\n            ownerType.defineDeclaredProperty(propName, valueType, n);\n          }\n        }\n\n        // If the property is already declared, the error will be\n        // caught when we try to declare it in the current scope.\n        defineSlot(n, parent, valueType, inferred);\n      } else if (rhsValue != null &&\n          rhsValue.getType() == Token.TRUE) {\n        // We declare these for delegate proxy method properties.\n        FunctionType ownerType =\n            JSType.toMaybeFunctionType(getObjectSlot(ownerName));\n        if (ownerType != null) {\n          JSType ownerTypeOfThis = ownerType.getTypeOfThis();\n          String delegateName = codingConvention.getDelegateSuperclassName();\n          JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);\n          if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType)) {\n            defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);\n          }\n        }\n      }\n    }\n",
                "comment": "    /**\n     * Declare the symbol for a qualified name in the global scope.\n     *\n     * @param info The doc info for this property.\n     * @param n A top-level GETPROP node (it should not be contained inside\n     *     another GETPROP).\n     * @param parent The parent of {@code n}.\n     * @param rhsValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.TypeCheckTest::testIssue537a",
                    "com.google.javascript.jscomp.TypeCheckTest::testIssue537b"
                ]
            },
            {
                "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
                "start_loc": 322,
                "end_loc": 350,
                "buggy_function": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype = new Bar();\n    // and\n    // Foo.prototype = {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        baseType.isUnknownType() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType() ||\n        !(baseType instanceof PrototypeObjectType)) {\n\n      baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType);\n  }\n",
                "fixed_function": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype = new Bar();\n    // and\n    // Foo.prototype = {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType() ||\n        !(baseType instanceof PrototypeObjectType)) {\n\n      baseType = new PrototypeObjectType(\n          registry, this.getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype((PrototypeObjectType) baseType);\n  }\n",
                "comment": "  /**\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
                "start_loc": 357,
                "end_loc": 395,
                "buggy_function": "  public boolean setPrototype(PrototypeObjectType prototype) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    boolean replacedPrototype = prototype != null;\n\n    this.prototype = prototype;\n    this.prototypeSlot = new SimpleSlot(\"prototype\", prototype, true);\n    this.prototype.setOwnerFunction(this);\n\n      // Disassociating the old prototype makes this easier to debug--\n      // we don't have to worry about two prototypes running around.\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() != null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
                "fixed_function": "  public boolean setPrototype(PrototypeObjectType prototype) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n\n    PrototypeObjectType oldPrototype = this.prototype;\n    boolean replacedPrototype = oldPrototype != null;\n\n    this.prototype = prototype;\n    this.prototypeSlot = new SimpleSlot(\"prototype\", prototype, true);\n    this.prototype.setOwnerFunction(this);\n\n    if (oldPrototype != null) {\n      // Disassociating the old prototype makes this easier to debug--\n      // we don't have to worry about two prototypes running around.\n      oldPrototype.setOwnerFunction(null);\n    }\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() != null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
                "comment": "  /**\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.TypeCheckTest::testIssue537a": {
                "path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
                "function_name": "testIssue537a",
                "src": "  public void testIssue537a() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {method: function() {}};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz()) this.method(1);\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Function Foo.prototype.method: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<[Function Foo.prototype.method: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).]> but was:<[Property baz never defined on Bar]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9230)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9209)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9150)\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue537a(TypeCheckTest.java:5264)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<[Function Foo.prototype.method: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).]> but was:<[Property baz never defined on Bar]>\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9230)  assertEquals(description, warnings[0].description);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9209)  testTypes(DEFAULT_EXTERNS, js, description, isError);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9150)  testTypes(js, description, false);\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue537a(TypeCheckTest.java:5264)  testTypes(        \"/** @constructor */ function Foo() {}\" +        \"Foo.prototype = {method: function() {}};\" +        \"/**\\n\" +        \" * @constructor\\n\" +        \" * @extends {Foo}\\n\" +        \" */\\n\" +        \"function Bar() {\" +        \"  Foo.call(this);\" +        \"  if (this.baz()) this.method(1);\" +        \"}\" +        \"Bar.prototype = {\" +        \"  baz: function() {\" +        \"    return true;\" +        \"  }\" +        \"};\" +        \"Bar.prototype.__proto__ = Foo.prototype;\",        \"Function Foo.prototype.method: called with 1 argument(s). \" +        \"Function requires at least 0 argument(s) \" +        \"and no more than 0 argument(s).\");",
                "failed_line": 5264
            },
            "com.google.javascript.jscomp.TypeCheckTest::testIssue537b": {
                "path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
                "function_name": "testIssue537b",
                "src": "  public void testIssue537b() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype = {method: function() {}};\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Foo}\\n\" +\n        \" */\\n\" +\n        \"function Bar() {\" +\n        \"  Foo.call(this);\" +\n        \"  if (this.baz(1)) this.method();\" +\n        \"}\" +\n        \"Bar.prototype = {\" +\n        \"  baz: function() {\" +\n        \"    return true;\" +\n        \"  }\" +\n        \"};\" +\n        \"Bar.prototype.__proto__ = Foo.prototype;\",\n        \"Function Bar.prototype.baz: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<[Function Bar.prototype.baz: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).]> but was:<[Property baz never defined on Bar]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9230)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9209)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9150)\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue537b(TypeCheckTest.java:5287)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<[Function Bar.prototype.baz: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).]> but was:<[Property baz never defined on Bar]>\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9230)  assertEquals(description, warnings[0].description);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9209)  testTypes(DEFAULT_EXTERNS, js, description, isError);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:9150)  testTypes(js, description, false);\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue537b(TypeCheckTest.java:5287)  testTypes(        \"/** @constructor */ function Foo() {}\" +        \"Foo.prototype = {method: function() {}};\" +        \"/**\\n\" +        \" * @constructor\\n\" +        \" * @extends {Foo}\\n\" +        \" */\\n\" +        \"function Bar() {\" +        \"  Foo.call(this);\" +        \"  if (this.baz(1)) this.method();\" +        \"}\" +        \"Bar.prototype = {\" +        \"  baz: function() {\" +        \"    return true;\" +        \"  }\" +        \"};\" +        \"Bar.prototype.__proto__ = Foo.prototype;\",        \"Function Bar.prototype.baz: called with 1 argument(s). \" +        \"Function requires at least 0 argument(s) \" +        \"and no more than 0 argument(s).\");",
                "failed_line": 5287
            },
            "com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2": {
                "path": "test/com/google/javascript/jscomp/TypedScopeCreatorTest.java",
                "function_name": "testPropertyOnUnknownSuperClass2",
                "src": "  public void testPropertyOnUnknownSuperClass2() {\n    testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    assertEquals(\"Foo\", x.toString());\n    assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());\n    assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));\n    assertEquals(\"?\", x.getPropertyType(\"bar\").toString());\n    assertTrue(x.isPropertyTypeInferred(\"bar\"));\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<[?]> but was:<[number]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.javascript.jscomp.TypedScopeCreatorTest.testPropertyOnUnknownSuperClass2(TypedScopeCreatorTest.java:377)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<[?]> but was:<[number]>\n\tat com.google.javascript.jscomp.TypedScopeCreatorTest.testPropertyOnUnknownSuperClass2(TypedScopeCreatorTest.java:377)  assertEquals(\"?\", x.getPropertyType(\"bar\").toString());",
                "failed_line": 377
            }
        }
    },
    "Closure_60": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/NodeUtil.java",
                "start_loc": 74,
                "end_loc": 112,
                "buggy_function": "  static TernaryValue getImpureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n\n      default:\n        return getPureBooleanValue(n);\n    }\n  }\n",
                "fixed_function": "  static TernaryValue getImpureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      default:\n        return getPureBooleanValue(n);\n    }\n  }\n",
                "comment": "  /**\n   * Gets the boolean value of a node that represents a expression. This method\n   * effectively emulates the <code>Boolean()</code> JavaScript cast function.\n   * Note: unlike getBooleanValue this function does not return UNKNOWN\n   * for expressions with side-effects.\n   */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/com/google/javascript/jscomp/NodeUtil.java",
                "start_loc": 120,
                "end_loc": 163,
                "buggy_function": "  static TernaryValue getPureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n        return TernaryValue.FALSE;\n\n      case Token.VOID:\n          return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n    }\n\n    return TernaryValue.UNKNOWN;\n  }\n",
                "fixed_function": "  static TernaryValue getPureBooleanValue(Node n) {\n    switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n        return TernaryValue.FALSE;\n\n      case Token.VOID:\n        if (!mayHaveSideEffects(n.getFirstChild())) {\n          return TernaryValue.FALSE;\n        }\n        break;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n    }\n\n    return TernaryValue.UNKNOWN;\n  }\n",
                "comment": "  /**\n   * Gets the boolean value of a node that represents a literal. This method\n   * effectively emulates the <code>Boolean()</code> JavaScript cast function\n   * except it return UNKNOWN for known values with side-effects, use\n   * getExpressionBooleanValue if you don't care about side-effects.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504",
                    "com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504": {
                "path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
                "function_name": "testIssue504",
                "src": "  public void testIssue504() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"void function() { alert('hi'); }();\",\n         \"alert('hi');\", CheckSideEffects.USELESS_CODE_ERROR);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: alert(\"hi\")\nResult: \nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: input0]\n        EXPR_RESULT 1 [source_file: input0]\n            CALL 1 [free_call: 1] [source_file: input0]\n                NAME alert 1 [source_file: input0]\n                STRING hi 1 [source_file: input0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: input0]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: input0]\n    EXPR_RESULT 1 [source_file: input0]\n        CALL 1 [free_call: 1] [source_file: input0]\n            NAME alert 1 [source_file: input0]\n            STRING hi 1 [source_file: input0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: input0]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:861)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:875)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testIssue504(CommandLineRunnerTest.java:365)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: alert(\"hi\")\nResult: \nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: input0]\n        EXPR_RESULT 1 [source_file: input0]\n            CALL 1 [free_call: 1] [source_file: input0]\n                NAME alert 1 [source_file: input0]\n                STRING hi 1 [source_file: input0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: input0]\n\n\nSubtree1: SCRIPT 1 [synthetic: 1] [source_file: input0]\n    EXPR_RESULT 1 [source_file: input0]\n        CALL 1 [free_call: 1] [source_file: input0]\n            NAME alert 1 [source_file: input0]\n            STRING hi 1 [source_file: input0]\n\n\nSubtree2: SCRIPT 1 [synthetic: 1] [source_file: input0]\n\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:861)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +          \"\\nResult: \" + compiler.toSource(root) +          \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:875)  test(new String[] { original }, new String[] { expected }, warning);\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testIssue504(CommandLineRunnerTest.java:365)  test(\"void function() { alert('hi'); }();\",         \"alert('hi');\", CheckSideEffects.USELESS_CODE_ERROR);",
                "failed_line": 365
            },
            "com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue": {
                "path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
                "function_name": "testGetBooleanValue",
                "src": "  public void testGetBooleanValue() {\n    assertPureBooleanTrue(\"true\");\n    assertPureBooleanTrue(\"10\");\n    assertPureBooleanTrue(\"'0'\");\n    assertPureBooleanTrue(\"/a/\");\n    assertPureBooleanTrue(\"{}\");\n    assertPureBooleanTrue(\"[]\");\n    assertPureBooleanFalse(\"false\");\n    assertPureBooleanFalse(\"null\");\n    assertPureBooleanFalse(\"0\");\n    assertPureBooleanFalse(\"''\");\n    assertPureBooleanFalse(\"undefined\");\n    assertPureBooleanFalse(\"void 0\");\n    assertPureBooleanUnknown(\"void foo()\");\n    assertPureBooleanUnknown(\"b\");\n    assertPureBooleanUnknown(\"-'0.0'\");\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    assertPureBooleanUnknown(\"{a:foo()}\");\n    assertPureBooleanUnknown(\"[foo()]\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<unknown> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.NodeUtilTest.assertPureBooleanUnknown(NodeUtilTest.java:123)\n\tat com.google.javascript.jscomp.NodeUtilTest.testGetBooleanValue(NodeUtilTest.java:104)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<unknown> but was:<false>\n\tat com.google.javascript.jscomp.NodeUtilTest.assertPureBooleanUnknown(NodeUtilTest.java:123)  assertEquals(        TernaryValue.UNKNOWN, NodeUtil.getPureBooleanValue(getNode(val)));\n\tat com.google.javascript.jscomp.NodeUtilTest.testGetBooleanValue(NodeUtilTest.java:104)  assertPureBooleanUnknown(\"void foo()\");",
                "failed_line": 104
            }
        }
    },
    "Closure_68": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
                "start_loc": 169,
                "end_loc": 913,
                "buggy_function": "  boolean parse() {\n    int lineno;\n    int charno;\n\n    // JSTypes are represented as Rhino AST nodes, and then resolved later.\n    JSTypeExpression type;\n\n    state = State.SEARCHING_ANNOTATION;\n    skipEOLs();\n\n    JsDocToken token = next();\n\n    List<ExtendedTypeInfo> extendedTypes = Lists.newArrayList();\n\n    // Always record that we have a comment.\n    if (jsdocBuilder.shouldParseDocumentation()) {\n      ExtractionInfo blockInfo = extractBlockComment(token);\n      token = blockInfo.token;\n      if (!blockInfo.string.isEmpty()) {\n        jsdocBuilder.recordBlockDescription(blockInfo.string);\n      }\n    } else {\n      if (token != JsDocToken.ANNOTATION &&\n          token != JsDocToken.EOC) {\n        // Mark that there was a description, but don't bother marking\n        // what it was.\n        jsdocBuilder.recordBlockDescription(\"\");\n      }\n    }\n\n    // Parse the actual JsDoc.\n    retry: for (;;) {\n      switch (token) {\n        case ANNOTATION:\n          if (state == State.SEARCHING_ANNOTATION) {\n            state = State.SEARCHING_NEWLINE;\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n\n            String annotationName = stream.getString();\n            Annotation annotation = annotationNames.get(annotationName);\n            if (annotation == null) {\n              parser.addParserWarning(\"msg.bad.jsdoc.tag\", annotationName,\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              // Mark the beginning of the annotation.\n              jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n\n              switch (annotation) {\n                case AUTHOR:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo authorInfo = extractSingleLineBlock();\n                    String author = authorInfo.string;\n\n                    if (author.length() == 0) {\n                      parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addAuthor(author);\n                    }\n                    token = authorInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case CONSTANT:\n                  if (!jsdocBuilder.recordConstancy()) {\n                    parser.addParserWarning(\"msg.jsdoc.const\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case CONSTRUCTOR:\n                  if (!jsdocBuilder.recordConstructor()) {\n                    if (jsdocBuilder.isInterfaceRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DEPRECATED:\n                  if (!jsdocBuilder.recordDeprecated()) {\n                    parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  // Find the reason/description, if any.\n                  ExtractionInfo reasonInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String reason = reasonInfo.string;\n\n                  if (reason.length() > 0) {\n                    jsdocBuilder.recordDeprecationReason(reason);\n                  }\n\n                  token = reasonInfo.token;\n                  continue retry;\n\n                case INTERFACE:\n                  if (!jsdocBuilder.recordInterface()) {\n                    if (jsdocBuilder.isConstructorRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DESC:\n                  if (jsdocBuilder.isDescriptionRecorded()) {\n                    parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                        stream.getLineno(), stream.getCharno());\n                    token = eatTokensUntilEOL();\n                    continue retry;\n                  } else {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    jsdocBuilder.recordDescription(description);\n                    token = descriptionInfo.token;\n                    continue retry;\n                  }\n\n                case FILE_OVERVIEW:\n                  String fileOverview = \"\";\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo fileOverviewInfo =\n                        extractMultilineTextualBlock(token,\n                            WhitespaceOption.TRIM);\n\n                    fileOverview = fileOverviewInfo.string;\n\n                    token = fileOverviewInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n\n                  if (!jsdocBuilder.recordFileOverview(fileOverview) ||\n                      fileOverviewJSDocInfo != null) {\n                    parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case LICENSE:\n                case PRESERVE:\n                  ExtractionInfo preserveInfo =\n                      extractMultilineTextualBlock(token,\n                                                   WhitespaceOption.PRESERVE);\n\n                  String preserve = preserveInfo.string;\n\n                  if (preserve.length() > 0) {\n                    if (fileLevelJsDocBuilder != null) {\n                      fileLevelJsDocBuilder.append(preserve);\n                    }\n                  }\n\n                  token = preserveInfo.token;\n                  continue retry;\n\n                case ENUM:\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  type = null;\n                  if (token != JsDocToken.EOL && token != JsDocToken.EOC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n                  }\n\n                  if (type == null) {\n                    type = createJSTypeExpression(newStringNode(\"number\"));\n                  }\n                  if (!jsdocBuilder.recordEnumParameterType(type)) {\n                    parser.addTypeWarning(\n                        \"msg.jsdoc.incompat.type\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case EXPORT:\n                  if (!jsdocBuilder.recordExport()) {\n                    parser.addParserWarning(\"msg.jsdoc.export\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTERNS:\n                  if (!jsdocBuilder.recordExterns()) {\n                    parser.addParserWarning(\"msg.jsdoc.externs\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case JAVA_DISPATCH:\n                  if (!jsdocBuilder.recordJavaDispatch()) {\n                    parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTENDS:\n                case IMPLEMENTS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  boolean matchingRc = false;\n\n                  if (token == JsDocToken.LC) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (token == JsDocToken.STRING) {\n                    Node typeNode = parseAndRecordTypeNameNode(\n                        token, lineno, charno, matchingRc);\n\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && !matchingRc) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                    type = createJSTypeExpression(typeNode);\n\n                    if (annotation == Annotation.EXTENDS) {\n                      // record the extended type, check later\n                      extendedTypes.add(new ExtendedTypeInfo(\n                          type, stream.getLineno(), stream.getCharno()));\n                    } else {\n                      Preconditions.checkState(\n                          annotation == Annotation.IMPLEMENTS);\n                      if (!jsdocBuilder.recordImplementedInterface(type)) {\n                        parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                            lineno, charno);\n                      }\n                    }\n                    token = next();\n                    if (matchingRc) {\n                      if (token != JsDocToken.RC) {\n                        parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                            stream.getLineno(), stream.getCharno());\n                      }\n                    } else if (token != JsDocToken.EOL &&\n                        token != JsDocToken.EOF && token != JsDocToken.EOC) {\n                      parser.addTypeWarning(\"msg.end.annotation.expected\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case HIDDEN:\n                  if (!jsdocBuilder.recordHiddenness()) {\n                    parser.addParserWarning(\"msg.jsdoc.hidden\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case LENDS:\n                  skipEOLs();\n\n                  matchingRc = false;\n                  if (match(JsDocToken.LC)) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (match(JsDocToken.STRING)) {\n                    token = next();\n                    if (!jsdocBuilder.recordLends(stream.getString())) {\n                      parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  if (matchingRc && !match(JsDocToken.RC)) {\n                    parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case MEANING:\n                  ExtractionInfo meaningInfo =\n                      extractMultilineTextualBlock(token);\n                  String meaning = meaningInfo.string;\n                  token = meaningInfo.token;\n                  if (!jsdocBuilder.recordMeaning(meaning)) {\n                    parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case NO_ALIAS:\n                  if (!jsdocBuilder.recordNoAlias()) {\n                    parser.addParserWarning(\"msg.jsdoc.noalias\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_COMPILE:\n                  if (!jsdocBuilder.recordNoCompile()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_TYPE_CHECK:\n                  if (!jsdocBuilder.recordNoTypeCheck()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NOT_IMPLEMENTED:\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case INHERIT_DOC:\n                case OVERRIDE:\n                  if (!jsdocBuilder.recordOverride()) {\n                    parser.addTypeWarning(\"msg.jsdoc.override\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case THROWS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                  }\n\n                  // *Update* the token to that after the type annotation.\n                  token = current();\n\n                  // Save the throw type.\n                  jsdocBuilder.recordThrowType(type);\n\n                  // Find the throw's description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    if (description.length() > 0) {\n                      jsdocBuilder.recordThrowDescription(type, description);\n                    }\n\n                    token = descriptionInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PARAM:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordParamTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                    skipEOLs();\n                    token = next();\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n                  }\n\n                  String name = null;\n                  boolean isBracketedParam = JsDocToken.LB == token;\n                  if (isBracketedParam) {\n                    token = next();\n                  }\n\n                  if (JsDocToken.STRING != token) {\n                    parser.addTypeWarning(\"msg.missing.variable.name\",\n                        lineno, charno);\n                  } else {\n                    name = stream.getString();\n\n                    if (isBracketedParam) {\n                      token = next();\n\n                      // Throw out JsDocToolkit's \"default\" parameter\n                      // annotation.  It makes no sense under our type\n                      // system.\n                      if (JsDocToken.EQUALS == token) {\n                        token = next();\n                        if (JsDocToken.STRING == token) {\n                          token = next();\n                        }\n                      }\n\n                      if (JsDocToken.RB != token) {\n                        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n                      } else if (type != null) {\n                        // Make the type expression optional, if it isn't\n                        // already.\n                        type = JSTypeExpression.makeOptionalArg(type);\n                      }\n                    }\n\n                    // If the param name has a DOT in it, just throw it out\n                    // quietly. We do not handle the JsDocToolkit method\n                    // for handling properties of params.\n                    if (name.indexOf('.') > -1) {\n                      name = null;\n                    } else if (!jsdocBuilder.recordParameter(name, type)) {\n                      if (jsdocBuilder.hasParameter(name)) {\n                        parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                            lineno, charno);\n                      } else {\n                        parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                            lineno, charno);\n                      }\n                    }\n                  }\n\n                  if (name == null) {\n                    token = eatTokensUntilEOL(token);\n                    continue retry;\n                  }\n\n                  jsdocBuilder.markName(name, lineno, charno);\n\n                  // Find the parameter's description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo paramDescriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String paramDescription = paramDescriptionInfo.string;\n\n                    if (paramDescription.length() > 0) {\n                      jsdocBuilder.recordParameterDescription(name,\n                          paramDescription);\n                    }\n\n                    token = paramDescriptionInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PRESERVE_TRY:\n                  if (!jsdocBuilder.recordPreserveTry()) {\n                    parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PRIVATE:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.private\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PROTECTED:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.protected\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PUBLIC:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.public\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SHADOW:\n                  if (!jsdocBuilder.recordNoShadow()) {\n                    parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SIDE_EFFECTS:\n                  if (!jsdocBuilder.recordNoSideEffects()) {\n                    parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case MODIFIES:\n                  token = parseModifiesTag(next());\n                  continue retry;\n\n                case IMPLICIT_CAST:\n                  if (!jsdocBuilder.recordImplicitCast()) {\n                    parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case SEE:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo referenceInfo = extractSingleLineBlock();\n                    String reference = referenceInfo.string;\n\n                    if (reference.length() == 0) {\n                      parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addReference(reference);\n                    }\n\n                    token = referenceInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case SUPPRESS:\n                  token = parseSuppressTag(next());\n                  continue retry;\n\n                case TEMPLATE:\n                  ExtractionInfo templateInfo = extractSingleLineBlock();\n                  String templateTypeName = templateInfo.string;\n\n                  if (templateTypeName.length() == 0) {\n                    parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else if (!jsdocBuilder.recordTemplateTypeName(\n                      templateTypeName)) {\n                    parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  token = templateInfo.token;\n                  continue retry;\n\n                case VERSION:\n                  ExtractionInfo versionInfo = extractSingleLineBlock();\n                  String version = versionInfo.string;\n\n                  if (version.length() == 0) {\n                    parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    if (!jsdocBuilder.recordVersion(version)) {\n                       parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n\n                  token = versionInfo.token;\n                  continue retry;\n\n                case DEFINE:\n                case RETURN:\n                case THIS:\n                case TYPE:\n                case TYPEDEF:\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  Node typeNode = null;\n                  if (!lookAheadForTypeAnnotation() &&\n                      annotation == Annotation.RETURN) {\n                    // If RETURN doesn't have a type annotation, record\n                    // it as the unknown type.\n                    typeNode = newNode(Token.QMARK);\n                  } else {\n                    skipEOLs();\n                    token = next();\n                    typeNode = parseAndRecordTypeNode(token, lineno, charno);\n                  }\n\n                  if (annotation == Annotation.THIS) {\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && token != JsDocToken.LC) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                  }\n                  type = createJSTypeExpression(typeNode);\n\n                  if (type == null) {\n                    // error reported during recursive descent\n                    // recovering parsing\n                  } else {\n                    switch (annotation) {\n                      case DEFINE:\n                        if (!jsdocBuilder.recordDefineType(type)) {\n                          parser.addParserWarning(\"msg.jsdoc.define\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case RETURN:\n                        if (!jsdocBuilder.recordReturnType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                          break;\n                        }\n\n                        // Find the return's description (if applicable).\n                        if (jsdocBuilder.shouldParseDocumentation()) {\n                          ExtractionInfo returnDescriptionInfo =\n                              extractMultilineTextualBlock(token);\n\n                          String returnDescription =\n                              returnDescriptionInfo.string;\n\n                          if (returnDescription.length() > 0) {\n                            jsdocBuilder.recordReturnDescription(\n                                returnDescription);\n                          }\n\n                          token = returnDescriptionInfo.token;\n                        } else {\n                          token = eatTokensUntilEOL(token);\n                        }\n                        continue retry;\n\n                      case THIS:\n                        if (!jsdocBuilder.recordThisType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPE:\n                        if (!jsdocBuilder.recordType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPEDEF:\n                        if (!jsdocBuilder.recordTypedef(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n                    }\n\n                  token = eatTokensUntilEOL();\n                  }\n                  continue retry;\n              }\n            }\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();\n          }\n          checkExtendedTypes(extendedTypes);\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          checkExtendedTypes(extendedTypes);\n          return false;\n\n        case EOL:\n          if (state == State.SEARCHING_NEWLINE) {\n            state = State.SEARCHING_ANNOTATION;\n          }\n          token = next();\n          continue retry;\n\n        default:\n          if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {\n            token = next();\n            continue retry;\n          } else {\n            state = State.SEARCHING_NEWLINE;\n            token = eatTokensUntilEOL();\n            continue retry;\n          }\n      }\n\n      // next token\n      token = next();\n    }\n  }\n",
                "fixed_function": "  boolean parse() {\n    int lineno;\n    int charno;\n\n    // JSTypes are represented as Rhino AST nodes, and then resolved later.\n    JSTypeExpression type;\n\n    state = State.SEARCHING_ANNOTATION;\n    skipEOLs();\n\n    JsDocToken token = next();\n\n    List<ExtendedTypeInfo> extendedTypes = Lists.newArrayList();\n\n    // Always record that we have a comment.\n    if (jsdocBuilder.shouldParseDocumentation()) {\n      ExtractionInfo blockInfo = extractBlockComment(token);\n      token = blockInfo.token;\n      if (!blockInfo.string.isEmpty()) {\n        jsdocBuilder.recordBlockDescription(blockInfo.string);\n      }\n    } else {\n      if (token != JsDocToken.ANNOTATION &&\n          token != JsDocToken.EOC) {\n        // Mark that there was a description, but don't bother marking\n        // what it was.\n        jsdocBuilder.recordBlockDescription(\"\");\n      }\n    }\n\n    // Parse the actual JsDoc.\n    retry: for (;;) {\n      switch (token) {\n        case ANNOTATION:\n          if (state == State.SEARCHING_ANNOTATION) {\n            state = State.SEARCHING_NEWLINE;\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n\n            String annotationName = stream.getString();\n            Annotation annotation = annotationNames.get(annotationName);\n            if (annotation == null) {\n              parser.addParserWarning(\"msg.bad.jsdoc.tag\", annotationName,\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              // Mark the beginning of the annotation.\n              jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n\n              switch (annotation) {\n                case AUTHOR:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo authorInfo = extractSingleLineBlock();\n                    String author = authorInfo.string;\n\n                    if (author.length() == 0) {\n                      parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addAuthor(author);\n                    }\n                    token = authorInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case CONSTANT:\n                  if (!jsdocBuilder.recordConstancy()) {\n                    parser.addParserWarning(\"msg.jsdoc.const\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case CONSTRUCTOR:\n                  if (!jsdocBuilder.recordConstructor()) {\n                    if (jsdocBuilder.isInterfaceRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DEPRECATED:\n                  if (!jsdocBuilder.recordDeprecated()) {\n                    parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  // Find the reason/description, if any.\n                  ExtractionInfo reasonInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String reason = reasonInfo.string;\n\n                  if (reason.length() > 0) {\n                    jsdocBuilder.recordDeprecationReason(reason);\n                  }\n\n                  token = reasonInfo.token;\n                  continue retry;\n\n                case INTERFACE:\n                  if (!jsdocBuilder.recordInterface()) {\n                    if (jsdocBuilder.isConstructorRecorded()) {\n                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case DESC:\n                  if (jsdocBuilder.isDescriptionRecorded()) {\n                    parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                        stream.getLineno(), stream.getCharno());\n                    token = eatTokensUntilEOL();\n                    continue retry;\n                  } else {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    jsdocBuilder.recordDescription(description);\n                    token = descriptionInfo.token;\n                    continue retry;\n                  }\n\n                case FILE_OVERVIEW:\n                  String fileOverview = \"\";\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo fileOverviewInfo =\n                        extractMultilineTextualBlock(token,\n                            WhitespaceOption.TRIM);\n\n                    fileOverview = fileOverviewInfo.string;\n\n                    token = fileOverviewInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n\n                  if (!jsdocBuilder.recordFileOverview(fileOverview) ||\n                      fileOverviewJSDocInfo != null) {\n                    parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case LICENSE:\n                case PRESERVE:\n                  ExtractionInfo preserveInfo =\n                      extractMultilineTextualBlock(token,\n                                                   WhitespaceOption.PRESERVE);\n\n                  String preserve = preserveInfo.string;\n\n                  if (preserve.length() > 0) {\n                    if (fileLevelJsDocBuilder != null) {\n                      fileLevelJsDocBuilder.append(preserve);\n                    }\n                  }\n\n                  token = preserveInfo.token;\n                  continue retry;\n\n                case ENUM:\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  type = null;\n                  if (token != JsDocToken.EOL && token != JsDocToken.EOC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n                  }\n\n                  if (type == null) {\n                    type = createJSTypeExpression(newStringNode(\"number\"));\n                  }\n                  if (!jsdocBuilder.recordEnumParameterType(type)) {\n                    parser.addTypeWarning(\n                        \"msg.jsdoc.incompat.type\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case EXPORT:\n                  if (!jsdocBuilder.recordExport()) {\n                    parser.addParserWarning(\"msg.jsdoc.export\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTERNS:\n                  if (!jsdocBuilder.recordExterns()) {\n                    parser.addParserWarning(\"msg.jsdoc.externs\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case JAVA_DISPATCH:\n                  if (!jsdocBuilder.recordJavaDispatch()) {\n                    parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case EXTENDS:\n                case IMPLEMENTS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  boolean matchingRc = false;\n\n                  if (token == JsDocToken.LC) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (token == JsDocToken.STRING) {\n                    Node typeNode = parseAndRecordTypeNameNode(\n                        token, lineno, charno, matchingRc);\n\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && !matchingRc) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                    type = createJSTypeExpression(typeNode);\n\n                    if (annotation == Annotation.EXTENDS) {\n                      // record the extended type, check later\n                      extendedTypes.add(new ExtendedTypeInfo(\n                          type, stream.getLineno(), stream.getCharno()));\n                    } else {\n                      Preconditions.checkState(\n                          annotation == Annotation.IMPLEMENTS);\n                      if (!jsdocBuilder.recordImplementedInterface(type)) {\n                        parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                            lineno, charno);\n                      }\n                    }\n                    token = next();\n                    if (matchingRc) {\n                      if (token != JsDocToken.RC) {\n                        parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                            stream.getLineno(), stream.getCharno());\n                      }\n                    } else if (token != JsDocToken.EOL &&\n                        token != JsDocToken.EOF && token != JsDocToken.EOC) {\n                      parser.addTypeWarning(\"msg.end.annotation.expected\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);\n                  }\n                  token = eatTokensUntilEOL(token);\n                  continue retry;\n\n                case HIDDEN:\n                  if (!jsdocBuilder.recordHiddenness()) {\n                    parser.addParserWarning(\"msg.jsdoc.hidden\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case LENDS:\n                  skipEOLs();\n\n                  matchingRc = false;\n                  if (match(JsDocToken.LC)) {\n                    token = next();\n                    matchingRc = true;\n                  }\n\n                  if (match(JsDocToken.STRING)) {\n                    token = next();\n                    if (!jsdocBuilder.recordLends(stream.getString())) {\n                      parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  } else {\n                    parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  if (matchingRc && !match(JsDocToken.RC)) {\n                    parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case MEANING:\n                  ExtractionInfo meaningInfo =\n                      extractMultilineTextualBlock(token);\n                  String meaning = meaningInfo.string;\n                  token = meaningInfo.token;\n                  if (!jsdocBuilder.recordMeaning(meaning)) {\n                    parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  continue retry;\n\n                case NO_ALIAS:\n                  if (!jsdocBuilder.recordNoAlias()) {\n                    parser.addParserWarning(\"msg.jsdoc.noalias\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_COMPILE:\n                  if (!jsdocBuilder.recordNoCompile()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_TYPE_CHECK:\n                  if (!jsdocBuilder.recordNoTypeCheck()) {\n                    parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NOT_IMPLEMENTED:\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case INHERIT_DOC:\n                case OVERRIDE:\n                  if (!jsdocBuilder.recordOverride()) {\n                    parser.addTypeWarning(\"msg.jsdoc.override\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case THROWS:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                  }\n\n                  // *Update* the token to that after the type annotation.\n                  token = current();\n\n                  // Save the throw type.\n                  jsdocBuilder.recordThrowType(type);\n\n                  // Find the throw's description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo descriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String description = descriptionInfo.string;\n\n                    if (description.length() > 0) {\n                      jsdocBuilder.recordThrowDescription(type, description);\n                    }\n\n                    token = descriptionInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PARAM:\n                  skipEOLs();\n                  token = next();\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n                  type = null;\n\n                  if (token == JsDocToken.LC) {\n                    type = createJSTypeExpression(\n                        parseAndRecordParamTypeNode(token));\n\n                    if (type == null) {\n                      // parsing error reported during recursive descent\n                      // recovering parsing\n                      token = eatTokensUntilEOL();\n                      continue retry;\n                    }\n                    skipEOLs();\n                    token = next();\n                    lineno = stream.getLineno();\n                    charno = stream.getCharno();\n                  }\n\n                  String name = null;\n                  boolean isBracketedParam = JsDocToken.LB == token;\n                  if (isBracketedParam) {\n                    token = next();\n                  }\n\n                  if (JsDocToken.STRING != token) {\n                    parser.addTypeWarning(\"msg.missing.variable.name\",\n                        lineno, charno);\n                  } else {\n                    name = stream.getString();\n\n                    if (isBracketedParam) {\n                      token = next();\n\n                      // Throw out JsDocToolkit's \"default\" parameter\n                      // annotation.  It makes no sense under our type\n                      // system.\n                      if (JsDocToken.EQUALS == token) {\n                        token = next();\n                        if (JsDocToken.STRING == token) {\n                          token = next();\n                        }\n                      }\n\n                      if (JsDocToken.RB != token) {\n                        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n                      } else if (type != null) {\n                        // Make the type expression optional, if it isn't\n                        // already.\n                        type = JSTypeExpression.makeOptionalArg(type);\n                      }\n                    }\n\n                    // If the param name has a DOT in it, just throw it out\n                    // quietly. We do not handle the JsDocToolkit method\n                    // for handling properties of params.\n                    if (name.indexOf('.') > -1) {\n                      name = null;\n                    } else if (!jsdocBuilder.recordParameter(name, type)) {\n                      if (jsdocBuilder.hasParameter(name)) {\n                        parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                            lineno, charno);\n                      } else {\n                        parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                            lineno, charno);\n                      }\n                    }\n                  }\n\n                  if (name == null) {\n                    token = eatTokensUntilEOL(token);\n                    continue retry;\n                  }\n\n                  jsdocBuilder.markName(name, lineno, charno);\n\n                  // Find the parameter's description (if applicable).\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo paramDescriptionInfo =\n                        extractMultilineTextualBlock(token);\n\n                    String paramDescription = paramDescriptionInfo.string;\n\n                    if (paramDescription.length() > 0) {\n                      jsdocBuilder.recordParameterDescription(name,\n                          paramDescription);\n                    }\n\n                    token = paramDescriptionInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case PRESERVE_TRY:\n                  if (!jsdocBuilder.recordPreserveTry()) {\n                    parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PRIVATE:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.private\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PROTECTED:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.protected\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case PUBLIC:\n                  if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                    parser.addParserWarning(\"msg.jsdoc.visibility.public\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SHADOW:\n                  if (!jsdocBuilder.recordNoShadow()) {\n                    parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case NO_SIDE_EFFECTS:\n                  if (!jsdocBuilder.recordNoSideEffects()) {\n                    parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case MODIFIES:\n                  token = parseModifiesTag(next());\n                  continue retry;\n\n                case IMPLICIT_CAST:\n                  if (!jsdocBuilder.recordImplicitCast()) {\n                    parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n                  token = eatTokensUntilEOL();\n                  continue retry;\n\n                case SEE:\n                  if (jsdocBuilder.shouldParseDocumentation()) {\n                    ExtractionInfo referenceInfo = extractSingleLineBlock();\n                    String reference = referenceInfo.string;\n\n                    if (reference.length() == 0) {\n                      parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                          stream.getLineno(), stream.getCharno());\n                    } else {\n                      jsdocBuilder.addReference(reference);\n                    }\n\n                    token = referenceInfo.token;\n                  } else {\n                    token = eatTokensUntilEOL(token);\n                  }\n                  continue retry;\n\n                case SUPPRESS:\n                  token = parseSuppressTag(next());\n                  continue retry;\n\n                case TEMPLATE:\n                  ExtractionInfo templateInfo = extractSingleLineBlock();\n                  String templateTypeName = templateInfo.string;\n\n                  if (templateTypeName.length() == 0) {\n                    parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else if (!jsdocBuilder.recordTemplateTypeName(\n                      templateTypeName)) {\n                    parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                        stream.getLineno(), stream.getCharno());\n                  }\n\n                  token = templateInfo.token;\n                  continue retry;\n\n                case VERSION:\n                  ExtractionInfo versionInfo = extractSingleLineBlock();\n                  String version = versionInfo.string;\n\n                  if (version.length() == 0) {\n                    parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                          stream.getLineno(), stream.getCharno());\n                  } else {\n                    if (!jsdocBuilder.recordVersion(version)) {\n                       parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                          stream.getLineno(), stream.getCharno());\n                    }\n                  }\n\n                  token = versionInfo.token;\n                  continue retry;\n\n                case DEFINE:\n                case RETURN:\n                case THIS:\n                case TYPE:\n                case TYPEDEF:\n                  lineno = stream.getLineno();\n                  charno = stream.getCharno();\n\n                  Node typeNode = null;\n                  if (!lookAheadForTypeAnnotation() &&\n                      annotation == Annotation.RETURN) {\n                    // If RETURN doesn't have a type annotation, record\n                    // it as the unknown type.\n                    typeNode = newNode(Token.QMARK);\n                  } else {\n                    skipEOLs();\n                    token = next();\n                    typeNode = parseAndRecordTypeNode(token, lineno, charno);\n                  }\n\n                  if (annotation == Annotation.THIS) {\n                    typeNode = wrapNode(Token.BANG, typeNode);\n                    if (typeNode != null && token != JsDocToken.LC) {\n                      typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n                    }\n                  }\n                  type = createJSTypeExpression(typeNode);\n\n                  if (type == null) {\n                    // error reported during recursive descent\n                    // recovering parsing\n                  } else {\n                    switch (annotation) {\n                      case DEFINE:\n                        if (!jsdocBuilder.recordDefineType(type)) {\n                          parser.addParserWarning(\"msg.jsdoc.define\",\n                              lineno, charno);\n                        }\n                        break;\n\n                      case RETURN:\n                        if (!jsdocBuilder.recordReturnType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                          break;\n                        }\n\n                        // Find the return's description (if applicable).\n                        if (jsdocBuilder.shouldParseDocumentation()) {\n                          ExtractionInfo returnDescriptionInfo =\n                              extractMultilineTextualBlock(token);\n\n                          String returnDescription =\n                              returnDescriptionInfo.string;\n\n                          if (returnDescription.length() > 0) {\n                            jsdocBuilder.recordReturnDescription(\n                                returnDescription);\n                          }\n\n                          token = returnDescriptionInfo.token;\n                        } else {\n                          token = eatTokensUntilEOL(token);\n                        }\n                        continue retry;\n\n                      case THIS:\n                        if (!jsdocBuilder.recordThisType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPE:\n                        if (!jsdocBuilder.recordType(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n\n                      case TYPEDEF:\n                        if (!jsdocBuilder.recordTypedef(type)) {\n                          parser.addTypeWarning(\n                              \"msg.jsdoc.incompat.type\", lineno, charno);\n                        }\n                        break;\n                    }\n                  }\n\n                  token = eatTokensUntilEOL();\n                  continue retry;\n              }\n            }\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();\n          }\n          checkExtendedTypes(extendedTypes);\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          checkExtendedTypes(extendedTypes);\n          return false;\n\n        case EOL:\n          if (state == State.SEARCHING_NEWLINE) {\n            state = State.SEARCHING_ANNOTATION;\n          }\n          token = next();\n          continue retry;\n\n        default:\n          if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {\n            token = next();\n            continue retry;\n          } else {\n            state = State.SEARCHING_NEWLINE;\n            token = eatTokensUntilEOL();\n            continue retry;\n          }\n      }\n\n      // next token\n      token = next();\n    }\n  }\n",
                "comment": "  /**\n   * Parses a {@link JSDocInfo} object. This parsing method reads all tokens\n   * returned by the {@link JsDocTokenStream#getJsDocToken()} method until the\n   * {@link JsDocToken#EOC} is returned.\n   *\n   * @return {@code true} if JSDoc information was correctly parsed,\n   *     {@code false} otherwise\n   */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
                "start_loc": 1685,
                "end_loc": 1710,
                "buggy_function": "  private Node parseBasicTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.STAR) {\n      return newNode(Token.STAR);\n    } else if (token == JsDocToken.LB) {\n      skipEOLs();\n      return parseArrayType(next());\n    } else if (token == JsDocToken.LC) {\n      skipEOLs();\n      return parseRecordType(next());\n    } else if (token == JsDocToken.LP) {\n      skipEOLs();\n      return parseUnionType(next());\n    } else if (token == JsDocToken.STRING) {\n      String string = stream.getString();\n      if (\"function\".equals(string)) {\n        skipEOLs();\n        return parseFunctionType(next());\n      } else if (\"null\".equals(string) || \"undefined\".equals(string)) {\n        return newStringNode(string);\n      } else {\n        return parseTypeName(token);\n      }\n    }\n\n    return reportGenericTypeSyntaxWarning();\n  }\n",
                "fixed_function": "  private Node parseBasicTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.STAR) {\n      return newNode(Token.STAR);\n    } else if (token == JsDocToken.LB) {\n      skipEOLs();\n      return parseArrayType(next());\n    } else if (token == JsDocToken.LC) {\n      skipEOLs();\n      return parseRecordType(next());\n    } else if (token == JsDocToken.LP) {\n      skipEOLs();\n      return parseUnionType(next());\n    } else if (token == JsDocToken.STRING) {\n      String string = stream.getString();\n      if (\"function\".equals(string)) {\n        skipEOLs();\n        return parseFunctionType(next());\n      } else if (\"null\".equals(string) || \"undefined\".equals(string)) {\n        return newStringNode(string);\n      } else {\n        return parseTypeName(token);\n      }\n    }\n\n    restoreLookAhead(token);\n    return reportGenericTypeSyntaxWarning();\n  }\n",
                "comment": "  /**\n   * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName\n   *     | FunctionType | UnionType | RecordType | ArrayType\n   */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
                "start_loc": 1757,
                "end_loc": 1826,
                "buggy_function": "  private Node parseFunctionType(JsDocToken token) {\n    // NOTE(nicksantos): We're not implementing generics at the moment, so\n    // just throw out TypeParameters.\n    if (token != JsDocToken.LP) {\n      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n    }\n\n    Node functionType = newNode(Token.FUNCTION);\n    Node parameters = null;\n    skipEOLs();\n    if (!match(JsDocToken.RP)) {\n      token = next();\n\n      boolean hasParams = true;\n      if (token == JsDocToken.STRING) {\n        String tokenStr = stream.getString();\n        boolean isThis = \"this\".equals(tokenStr);\n        boolean isNew = \"new\".equals(tokenStr);\n        if (isThis || isNew) {\n          if (match(JsDocToken.COLON)) {\n            next();\n            skipEOLs();\n            Node contextType = wrapNode(\n                isThis ? Token.THIS : Token.NEW,\n                parseTypeName(next()));\n            if (contextType == null) {\n              return null;\n            }\n\n            functionType.addChildToFront(contextType);\n          } else {\n            return reportTypeSyntaxWarning(\"msg.jsdoc.missing.colon\");\n          }\n\n          if (match(JsDocToken.COMMA)) {\n            next();\n            skipEOLs();\n            token = next();\n          } else {\n            hasParams = false;\n          }\n        }\n      }\n\n      if (hasParams) {\n        parameters = parseParametersType(token);\n        if (parameters == null) {\n          return null;\n        }\n      }\n    }\n\n    if (parameters != null) {\n      functionType.addChildToBack(parameters);\n    }\n\n    skipEOLs();\n    if (!match(JsDocToken.RP)) {\n      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");\n    }\n\n    skipEOLs();\n    Node resultType = parseResultType(next());\n    if (resultType == null) {\n      return null;\n    } else {\n      functionType.addChildToBack(resultType);\n    }\n    return functionType;\n  }\n",
                "fixed_function": "  private Node parseFunctionType(JsDocToken token) {\n    // NOTE(nicksantos): We're not implementing generics at the moment, so\n    // just throw out TypeParameters.\n    if (token != JsDocToken.LP) {\n      restoreLookAhead(token);\n      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n    }\n\n    Node functionType = newNode(Token.FUNCTION);\n    Node parameters = null;\n    skipEOLs();\n    if (!match(JsDocToken.RP)) {\n      token = next();\n\n      boolean hasParams = true;\n      if (token == JsDocToken.STRING) {\n        String tokenStr = stream.getString();\n        boolean isThis = \"this\".equals(tokenStr);\n        boolean isNew = \"new\".equals(tokenStr);\n        if (isThis || isNew) {\n          if (match(JsDocToken.COLON)) {\n            next();\n            skipEOLs();\n            Node contextType = wrapNode(\n                isThis ? Token.THIS : Token.NEW,\n                parseTypeName(next()));\n            if (contextType == null) {\n              return null;\n            }\n\n            functionType.addChildToFront(contextType);\n          } else {\n            return reportTypeSyntaxWarning(\"msg.jsdoc.missing.colon\");\n          }\n\n          if (match(JsDocToken.COMMA)) {\n            next();\n            skipEOLs();\n            token = next();\n          } else {\n            hasParams = false;\n          }\n        }\n      }\n\n      if (hasParams) {\n        parameters = parseParametersType(token);\n        if (parameters == null) {\n          return null;\n        }\n      }\n    }\n\n    if (parameters != null) {\n      functionType.addChildToBack(parameters);\n    }\n\n    skipEOLs();\n    if (!match(JsDocToken.RP)) {\n      return reportTypeSyntaxWarning(\"msg.jsdoc.missing.rp\");\n    }\n\n    skipEOLs();\n    Node resultType = parseResultType(next());\n    if (resultType == null) {\n      return null;\n    } else {\n      functionType.addChildToBack(resultType);\n    }\n    return functionType;\n  }\n",
                "comment": "  /**\n   * FunctionType := 'function' FunctionSignatureType\n   * FunctionSignatureType :=\n   *    TypeParameters '(' 'this' ':' TypeName, ParametersType ')' ResultType\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testIssue477"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testIssue477": {
                "path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
                "function_name": "testIssue477",
                "src": "  public void testIssue477() throws Exception {\n    parse(\"@type function */\",\n        \"Bad type annotation. missing opening (\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: extra warning: Unexpected end of file\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat com.google.javascript.jscomp.testing.TestErrorReporter.warning(TestErrorReporter.java:62)\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser.addParserWarning(JsDocInfoParser.java:65)\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParser.parse(JsDocInfoParser.java:887)\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(JsDocInfoParserTest.java:2690)\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(JsDocInfoParserTest.java:2672)\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(JsDocInfoParserTest.java:2667)\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIssue477(JsDocInfoParserTest.java:509)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: extra warning: Unexpected end of file\n\tat com.google.javascript.jscomp.testing.TestErrorReporter.warning(TestErrorReporter.java:62)  fail(\"extra warning: \" + message);\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParser.parse(JsDocInfoParser.java:887)  parser.addParserWarning(\"msg.unexpected.eof\",              stream.getLineno(), stream.getCharno());\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(JsDocInfoParserTest.java:2690)  jsdocParser.parse();\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(JsDocInfoParserTest.java:2672)  return parse(comment, parseDocumentation, false, warnings);\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(JsDocInfoParserTest.java:2667)  return parse(comment, false, warnings);\n\tat com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIssue477(JsDocInfoParserTest.java:509)  parse(\"@type function */\",        \"Bad type annotation. missing opening (\");  }  public void testMalformedThisAnnotation() throws Exception {    parse(\"@this */\",        \"Bad type annotation. type not recognized due to syntax error\");  }  public void testParseFunctionalTypeError1() throws Exception {    parse(\"@type {function number):string}*/\",        \"Bad type annotation. missing opening (\");  }  public void testParseFunctionalTypeError2() throws Exception {    parse(\"@type {function( number}*/\",        \"Bad type annotation. missing closing )\");  }  public void testParseFunctionalTypeError3() throws Exception {    parse(\"@type {function(...[number], string)}*/\",        \"Bad type annotation. variable length argument must be last\");  }  public void testParseFunctionalTypeError4() throws Exception {    parse(\"@type {function(string, ...[number], boolean):string}*/\",        \"Bad type annotation. variable length argument must be last\");  }  public void testParseFunctionalTypeError5() throws Exception {    parse(\"@type {function (thi:Array)}*/\",        \"Bad type annotation. missing closing )\");",
                "failed_line": 509
            }
        }
    },
    "Closure_72": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
                "start_loc": 142,
                "end_loc": 152,
                "buggy_function": "  private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {\n    Supplier<String> idSupplier = compiler.getUniqueNameIdSupplier();\n    // Make variable names unique to this instance.\n    NodeTraversal.traverse(\n        compiler, fnNode, new MakeDeclaredNamesUnique(\n            new InlineRenamer(\n                idSupplier,\n                \"inline_\",\n                isCallInLoop)));\n    // Make label names unique to this instance.\n  }\n",
                "fixed_function": "  private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {\n    Supplier<String> idSupplier = compiler.getUniqueNameIdSupplier();\n    // Make variable names unique to this instance.\n    NodeTraversal.traverse(\n        compiler, fnNode, new MakeDeclaredNamesUnique(\n            new InlineRenamer(\n                idSupplier,\n                \"inline_\",\n                isCallInLoop)));\n    // Make label names unique to this instance.\n    new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false)\n        .process(null, fnNode);\n  }\n",
                "comment": "  /**\n   * Fix-up all local names to be unique for this subtree.\n   * @param fnNode A mutable instance of the function to be inlined.\n   */\n",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions31"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/RenameLabels.java",
                "start_loc": 209,
                "end_loc": 235,
                "buggy_function": "    private void visitLabel(Node node, Node parent) {\n      Node nameNode = node.getFirstChild();\n      Preconditions.checkState(nameNode != null);\n      String name = nameNode.getString();\n      LabelInfo li = getLabelInfo(name);\n      // This is a label...\n      if (li.referenced) {\n        String newName = getNameForId(li.id);\n        if (!name.equals(newName)) {\n          // ... and it is used, give it the short name.\n          nameNode.setString(newName);\n          compiler.reportCodeChange();\n        }\n      } else {\n        // ... and it is not referenced, just remove it.\n        Node newChild = node.getLastChild();\n        node.removeChild(newChild);\n        parent.replaceChild(node, newChild);\n        if (newChild.getType() == Token.BLOCK) {\n          NodeUtil.tryMergeBlock(newChild);\n        }\n        compiler.reportCodeChange();\n      }\n\n      // Remove the label from the current stack of labels.\n      namespaceStack.peek().renameMap.remove(name);\n    }\n",
                "fixed_function": "    private void visitLabel(Node node, Node parent) {\n      Node nameNode = node.getFirstChild();\n      Preconditions.checkState(nameNode != null);\n      String name = nameNode.getString();\n      LabelInfo li = getLabelInfo(name);\n      // This is a label...\n      if (li.referenced || !removeUnused) {\n        String newName = getNameForId(li.id);\n        if (!name.equals(newName)) {\n          // ... and it is used, give it the short name.\n          nameNode.setString(newName);\n          compiler.reportCodeChange();\n        }\n      } else {\n        // ... and it is not referenced, just remove it.\n        Node newChild = node.getLastChild();\n        node.removeChild(newChild);\n        parent.replaceChild(node, newChild);\n        if (newChild.getType() == Token.BLOCK) {\n          NodeUtil.tryMergeBlock(newChild);\n        }\n        compiler.reportCodeChange();\n      }\n\n      // Remove the label from the current stack of labels.\n      namespaceStack.peek().renameMap.remove(name);\n    }\n",
                "comment": "    /**\n     * Rename or remove labels.\n     * @param node  The label node.\n     * @param parent The parent of the label node.\n     */\n",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions31"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions31": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions31",
                "src": "  public void testInlineFunctions31() {\n    // Don't introduce a duplicate label in the same scope\n    test(\"function foo(){ lab:{4;} }\" +\n        \"lab:{foo();}\",\n        \"lab:{{JSCompiler_inline_label_0:{4}}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: lab:JSCompiler_inline_label_0:4\nResult: lab:lab:4\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        LABEL 1 [sourcename: expected0]\n            LABEL_NAME lab 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    LABEL 1 [sourcename: expected0]\n                        LABEL_NAME JSCompiler_inline_label_0 1 [sourcename: expected0]\n                        BLOCK 1 [sourcename: expected0]\n                            EXPR_RESULT 1 [sourcename: expected0]\n                                NUMBER 4.0 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        LABEL 1 [sourcename: testcode]\n            LABEL_NAME lab 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    LABEL 1 [sourcename: testcode]\n                        LABEL_NAME lab 1 [sourcename: testcode]\n                        BLOCK 1 [sourcename: testcode]\n                            EXPR_RESULT 1 [sourcename: testcode]\n                                NUMBER 4.0 1 [sourcename: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_0 1 [sourcename: expected0]\n\n\nSubtree2: LABEL_NAME lab 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions31(InlineFunctionsTest.java:388)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: lab:JSCompiler_inline_label_0:4\nResult: lab:lab:4\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        LABEL 1 [sourcename: expected0]\n            LABEL_NAME lab 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    LABEL 1 [sourcename: expected0]\n                        LABEL_NAME JSCompiler_inline_label_0 1 [sourcename: expected0]\n                        BLOCK 1 [sourcename: expected0]\n                            EXPR_RESULT 1 [sourcename: expected0]\n                                NUMBER 4.0 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        LABEL 1 [sourcename: testcode]\n            LABEL_NAME lab 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    LABEL 1 [sourcename: testcode]\n                        LABEL_NAME lab 1 [sourcename: testcode]\n                        BLOCK 1 [sourcename: testcode]\n                            EXPR_RESULT 1 [sourcename: testcode]\n                                NUMBER 4.0 1 [sourcename: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_0 1 [sourcename: expected0]\n\n\nSubtree2: LABEL_NAME lab 1 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions31(InlineFunctionsTest.java:388)  test(\"function foo(){ lab:{4;} }\" +        \"lab:{foo();}\",        \"lab:{{JSCompiler_inline_label_0:{4}}}\");",
                "failed_line": 388
            }
        }
    },
    "Closure_75": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/NodeUtil.java",
                "start_loc": 312,
                "end_loc": 353,
                "buggy_function": "  static Double getStringNumberValue(String rawJsString) {\n      // vertical tab is not always whitespace\n\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n      return 0.0;\n    }\n\n    if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n      // Attempt to convert hex numbers.\n      try {\n        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n      } catch (NumberFormatException e) {\n        return Double.NaN;\n      }\n    }\n\n    if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n      // hex numbers with explicit signs vary between browsers.\n      return null;\n    }\n\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\")) {\n      return null;\n    }\n\n    try {\n      return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n      return Double.NaN;\n    }\n  }\n",
                "fixed_function": "  static Double getStringNumberValue(String rawJsString) {\n    if (rawJsString.contains(\"\\u000b\")) {\n      // vertical tab is not always whitespace\n      return null;\n    }\n\n    String s = trimJsWhiteSpace(rawJsString);\n    // return ScriptRuntime.toNumber(s);\n    if (s.length() == 0) {\n      return 0.0;\n    }\n\n    if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n      // Attempt to convert hex numbers.\n      try {\n        return Double.valueOf(Integer.parseInt(s.substring(2), 16));\n      } catch (NumberFormatException e) {\n        return Double.NaN;\n      }\n    }\n\n    if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {\n      // hex numbers with explicit signs vary between browsers.\n      return null;\n    }\n\n    // FireFox and IE treat the \"Infinity\" differently. FireFox is case\n    // insensitive, but IE treats \"infinity\" as NaN.  So leave it alone.\n    if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\")) {\n      return null;\n    }\n\n    try {\n      return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n      return Double.NaN;\n    }\n  }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testIEString"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/NodeUtil.java",
                "start_loc": 372,
                "end_loc": 390,
                "buggy_function": "  static TernaryValue isStrWhiteSpaceChar(int c) {\n    switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.TRUE;\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }\n  }\n",
                "fixed_function": "  static TernaryValue isStrWhiteSpaceChar(int c) {\n    switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.UNKNOWN;  // IE says \"no\", EcmaScript says \"yes\"\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }\n  }\n",
                "comment": "  /**\n   * Copied from Rhino's ScriptRuntime\n   */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testIEString": {
                "path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
                "function_name": "testIEString",
                "src": "  public void testIEString() {\n    testSame(\"!+'\\\\v1'\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: !+\"\\u000b1\"\nResult: !1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: expected0]\n            NOT 1 [sourcename: expected0]\n                POS 1 [sourcename: expected0]\n                    STRING \u000b1 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NOT 1 [sourcename: testcode]\n                NUMBER 1.0 1 [sourcename: testcode]\n\n\nSubtree1: POS 1 [sourcename: expected0]\n    STRING \u000b1 1 [sourcename: expected0]\n\n\nSubtree2: NUMBER 1.0 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.testIEString(PeepholeFoldConstantsTest.java:992)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: !+\"\\u000b1\"\nResult: !1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: expected0]\n            NOT 1 [sourcename: expected0]\n                POS 1 [sourcename: expected0]\n                    STRING \u000b1 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NOT 1 [sourcename: testcode]\n                NUMBER 1.0 1 [sourcename: testcode]\n\n\nSubtree1: POS 1 [sourcename: expected0]\n    STRING \u000b1 1 [sourcename: expected0]\n\n\nSubtree2: NUMBER 1.0 1 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:524)  test(js, js);\n\tat com.google.javascript.jscomp.PeepholeFoldConstantsTest.testIEString(PeepholeFoldConstantsTest.java:992)  testSame(\"!+'\\\\v1'\");",
                "failed_line": 992
            }
        }
    },
    "Closure_76": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
                "start_loc": 290,
                "end_loc": 324,
                "buggy_function": "  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }\n",
                "fixed_function": "  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n          if (n.getNext() != null) {\n            state = isVariableReadBeforeKill(\n                n.getNext(), variable);\n            if (state == VariableLiveness.KILL) {\n              state = VariableLiveness.MAYBE_LIVE;\n            }\n          }\n          break;\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n          if (n.getNext() != null && n.getNext().getNext() != null) {\n            state = checkHookBranchReadBeforeKill(\n                n.getNext(), n.getNext().getNext(), variable);\n          }\n          break;\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            state = isVariableReadBeforeKill(sibling, variable);\n            if (state != VariableLiveness.MAYBE_LIVE) {\n              break;\n            }\n          }\n      }\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n      }\n      n = n.getParent();\n    }\n    return false;\n  }\n",
                "comment": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b",
                    "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c",
                    "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
                "start_loc": 338,
                "end_loc": 382,
                "buggy_function": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }\n",
                "fixed_function": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION\n      return VariableLiveness.MAYBE_LIVE;\n    }\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        VariableLiveness v1 = isVariableReadBeforeKill(\n          n.getFirstChild(), variable);\n        VariableLiveness v2 = isVariableReadBeforeKill(\n          n.getLastChild(), variable);\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n        if (v1 != VariableLiveness.MAYBE_LIVE) {\n          return v1;\n        } else if (v2 == VariableLiveness.READ) {\n          return VariableLiveness.READ;\n        } else {\n          return VariableLiveness.MAYBE_LIVE;\n        }\n      case Token.HOOK:\n        VariableLiveness first = isVariableReadBeforeKill(\n            n.getFirstChild(), variable);\n        if (first != VariableLiveness.MAYBE_LIVE) {\n          return first;\n        }\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }\n",
                "comment": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2": {
                "path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
                "function_name": "testInExpression2",
                "src": "  public void testInExpression2() {\n    // This can be improved.  \"a = 1\" is dead but \"a\" is read in the following\n    // expression.\n    inFunction(\n        \"var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}\",\n        \"var a; a = 1; if ((    2) || (a = 3) || (a)) {}\");\n\n    inFunction(\n        \"var a; (a = 1) || (a = 2)\",\n        \"var a; 1 || 2\");\n\n    inFunction(\"var a; (a = 1) || (a = 2); return a\");\n\n    inFunction(\n        \"var a; a = 1; a ? a = 2 : a;\",\n        \"var a; a = 1; a ?     2 : a;\");\n\n    inFunction(\"var a; a = 1; a ? a = 2 : a; return a\");\n\n    inFunction(\n        \"var a; a = 1; a ? a : a = 2;\",\n        \"var a; a = 1; a ? a : 2;\");\n\n    inFunction(\"var a; a = 1; a ? a : a =2; return a\");\n\n    inFunction(\n        \"var a; (a = 1) ? a = 2 : a = 3;\",\n        \"var a;      1  ?     2 :     3;\");\n\n    // This can be improved.  \"a = 1\" is dead but \"a\" is read in the following\n    // expression.\n    inFunction(\"var a; (a = 1) ? a = 2 : a = 3; return a\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function FUNC(param1,param2){var a;a=1;if(2||(a=3)||a);}\nResult: function FUNC(param1,param2){var a;a=1;if((a=2)||(a=3)||a);}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                EXPR_RESULT 1 [sourcename: expected0]\n                    ASSIGN 1 [sourcename: expected0]\n                        NAME a 1 [sourcename: expected0]\n                        NUMBER 1.0 1 [sourcename: expected0]\n                IF 1 [sourcename: expected0]\n                    OR 1 [sourcename: expected0]\n                        NUMBER 2.0 1 [sourcename: expected0] [parenthesized: true]\n                        OR 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0] [parenthesized: true]\n                                NAME a 1 [sourcename: expected0]\n                                NUMBER 3.0 1 [sourcename: expected0]\n                            NAME a 1 [sourcename: expected0] [parenthesized: true]\n                    BLOCK 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                EXPR_RESULT 1 [sourcename: testcode]\n                    ASSIGN 1 [sourcename: testcode]\n                        NAME a 1 [sourcename: testcode]\n                        NUMBER 1.0 1 [sourcename: testcode]\n                IF 1 [sourcename: testcode]\n                    OR 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n                            NAME a 1 [sourcename: testcode]\n                            NUMBER 2.0 1 [sourcename: testcode]\n                        OR 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n                                NAME a 1 [sourcename: testcode]\n                                NUMBER 3.0 1 [sourcename: testcode]\n                            NAME a 1 [sourcename: testcode] [parenthesized: true]\n                    BLOCK 1 [sourcename: testcode]\n\n\nSubtree1: NUMBER 2.0 1 [sourcename: expected0] [parenthesized: true]\n\n\nSubtree2: ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n    NAME a 1 [sourcename: testcode]\n    NUMBER 2.0 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testInExpression2(DeadAssignmentsEliminationTest.java:459)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function FUNC(param1,param2){var a;a=1;if(2||(a=3)||a);}\nResult: function FUNC(param1,param2){var a;a=1;if((a=2)||(a=3)||a);}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                EXPR_RESULT 1 [sourcename: expected0]\n                    ASSIGN 1 [sourcename: expected0]\n                        NAME a 1 [sourcename: expected0]\n                        NUMBER 1.0 1 [sourcename: expected0]\n                IF 1 [sourcename: expected0]\n                    OR 1 [sourcename: expected0]\n                        NUMBER 2.0 1 [sourcename: expected0] [parenthesized: true]\n                        OR 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0] [parenthesized: true]\n                                NAME a 1 [sourcename: expected0]\n                                NUMBER 3.0 1 [sourcename: expected0]\n                            NAME a 1 [sourcename: expected0] [parenthesized: true]\n                    BLOCK 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                EXPR_RESULT 1 [sourcename: testcode]\n                    ASSIGN 1 [sourcename: testcode]\n                        NAME a 1 [sourcename: testcode]\n                        NUMBER 1.0 1 [sourcename: testcode]\n                IF 1 [sourcename: testcode]\n                    OR 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n                            NAME a 1 [sourcename: testcode]\n                            NUMBER 2.0 1 [sourcename: testcode]\n                        OR 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n                                NAME a 1 [sourcename: testcode]\n                                NUMBER 3.0 1 [sourcename: testcode]\n                            NAME a 1 [sourcename: testcode] [parenthesized: true]\n                    BLOCK 1 [sourcename: testcode]\n\n\nSubtree1: NUMBER 2.0 1 [sourcename: expected0] [parenthesized: true]\n\n\nSubtree2: ASSIGN 1 [sourcename: testcode] [parenthesized: true]\n    NAME a 1 [sourcename: testcode]\n    NUMBER 2.0 1 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)  test(\"function FUNC(param1, param2){\" + src + \"}\",         \"function FUNC(param1, param2){\" + expected + \"}\");\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testInExpression2(DeadAssignmentsEliminationTest.java:459)  inFunction(        \"var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}\",        \"var a; a = 1; if ((    2) || (a = 3) || (a)) {}\");",
                "failed_line": 459
            },
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b": {
                "path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
                "function_name": "testIssue384b",
                "src": "  public void testIssue384b() {\n    inFunction(\n            \" var a, b;\\n\" +\n            \" (f(b = true) || f(b = false)) ? (a = b) : (a = null);\\n\" +\n            \" return a;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function FUNC(param1,param2){var a,b;f(b=true)||f(b=false)?a=b:a=null;return a}\nResult: function FUNC(param1,param2){var a,b;f(true)||f(b=false)?a=b:a=null;return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    HOOK 2 [sourcename: expected0]\n                        OR 2 [sourcename: expected0] [parenthesized: true]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NULL 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    HOOK 2 [sourcename: testcode]\n                        OR 2 [sourcename: testcode] [parenthesized: true]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NULL 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384b(DeadAssignmentsEliminationTest.java:501)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function FUNC(param1,param2){var a,b;f(b=true)||f(b=false)?a=b:a=null;return a}\nResult: function FUNC(param1,param2){var a,b;f(true)||f(b=false)?a=b:a=null;return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    HOOK 2 [sourcename: expected0]\n                        OR 2 [sourcename: expected0] [parenthesized: true]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NULL 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    HOOK 2 [sourcename: testcode]\n                        OR 2 [sourcename: testcode] [parenthesized: true]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NULL 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)  test(\"function FUNC(param1, param2){\" + src + \"}\",         \"function FUNC(param1, param2){\" + expected + \"}\");\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)  inFunction(src, src);\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384b(DeadAssignmentsEliminationTest.java:501)  inFunction(            \" var a, b;\\n\" +            \" (f(b = true) || f(b = false)) ? (a = b) : (a = null);\\n\" +            \" return a;\");",
                "failed_line": 501
            },
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c": {
                "path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
                "function_name": "testIssue384c",
                "src": "  public void testIssue384c() {\n    inFunction(\n            \" var a, b;\\n\" +\n            \" (a ? f(b = true) : f(b = false)) && (a = b);\\n\" +\n            \" return a;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function FUNC(param1,param2){var a,b;(a?f(b=true):f(b=false))&&(a=b);return a}\nResult: function FUNC(param1,param2){var a,b;(a?f(true):f(b=false))&&(a=b);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    AND 2 [sourcename: expected0]\n                        HOOK 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    AND 2 [sourcename: testcode]\n                        HOOK 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384c(DeadAssignmentsEliminationTest.java:508)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function FUNC(param1,param2){var a,b;(a?f(b=true):f(b=false))&&(a=b);return a}\nResult: function FUNC(param1,param2){var a,b;(a?f(true):f(b=false))&&(a=b);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    AND 2 [sourcename: expected0]\n                        HOOK 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    AND 2 [sourcename: testcode]\n                        HOOK 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)  test(\"function FUNC(param1, param2){\" + src + \"}\",         \"function FUNC(param1, param2){\" + expected + \"}\");\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)  inFunction(src, src);\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384c(DeadAssignmentsEliminationTest.java:508)  inFunction(            \" var a, b;\\n\" +            \" (a ? f(b = true) : f(b = false)) && (a = b);\\n\" +            \" return a;\");",
                "failed_line": 508
            },
            "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d": {
                "path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
                "function_name": "testIssue384d",
                "src": "  public void testIssue384d() {\n    inFunction(\n            \" var a, b;\\n\" +\n            \" (f(b = true) || f(b = false)) && (a = b);\\n\" +\n            \" return a;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function FUNC(param1,param2){var a,b;(f(b=true)||f(b=false))&&(a=b);return a}\nResult: function FUNC(param1,param2){var a,b;(f(true)||f(b=false))&&(a=b);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    AND 2 [sourcename: expected0]\n                        OR 2 [sourcename: expected0] [parenthesized: true]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    AND 2 [sourcename: testcode]\n                        OR 2 [sourcename: testcode] [parenthesized: true]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384d(DeadAssignmentsEliminationTest.java:515)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function FUNC(param1,param2){var a,b;(f(b=true)||f(b=false))&&(a=b);return a}\nResult: function FUNC(param1,param2){var a,b;(f(true)||f(b=false))&&(a=b);return a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME FUNC 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n                NAME param1 1 [sourcename: expected0]\n                NAME param2 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n                VAR 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    NAME b 1 [sourcename: expected0]\n                EXPR_RESULT 2 [sourcename: expected0]\n                    AND 2 [sourcename: expected0]\n                        OR 2 [sourcename: expected0] [parenthesized: true]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    TRUE 2 [sourcename: expected0]\n                            CALL 2 [sourcename: expected0] [free_call: 1]\n                                NAME f 2 [sourcename: expected0]\n                                ASSIGN 2 [sourcename: expected0]\n                                    NAME b 2 [sourcename: expected0]\n                                    FALSE 2 [sourcename: expected0]\n                        ASSIGN 2 [sourcename: expected0] [parenthesized: true]\n                            NAME a 2 [sourcename: expected0]\n                            NAME b 2 [sourcename: expected0]\n                RETURN 3 [sourcename: expected0]\n                    NAME a 3 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME FUNC 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n                NAME param1 1 [sourcename: testcode]\n                NAME param2 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n                VAR 1 [sourcename: testcode]\n                    NAME a 1 [sourcename: testcode]\n                    NAME b 1 [sourcename: testcode]\n                EXPR_RESULT 2 [sourcename: testcode]\n                    AND 2 [sourcename: testcode]\n                        OR 2 [sourcename: testcode] [parenthesized: true]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                TRUE 2 [sourcename: testcode]\n                            CALL 2 [sourcename: testcode] [free_call: 1]\n                                NAME f 2 [sourcename: testcode]\n                                ASSIGN 2 [sourcename: testcode]\n                                    NAME b 2 [sourcename: testcode]\n                                    FALSE 2 [sourcename: testcode]\n                        ASSIGN 2 [sourcename: testcode] [parenthesized: true]\n                            NAME a 2 [sourcename: testcode]\n                            NAME b 2 [sourcename: testcode]\n                RETURN 3 [sourcename: testcode]\n                    NAME a 3 [sourcename: testcode]\n\n\nSubtree1: ASSIGN 2 [sourcename: expected0]\n    NAME b 2 [sourcename: expected0]\n    TRUE 2 [sourcename: expected0]\n\n\nSubtree2: TRUE 2 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:843)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:335)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:304)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:345)  test(\"function FUNC(param1, param2){\" + src + \"}\",         \"function FUNC(param1, param2){\" + expected + \"}\");\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.inFunction(DeadAssignmentsEliminationTest.java:341)  inFunction(src, src);\n\tat com.google.javascript.jscomp.DeadAssignmentsEliminationTest.testIssue384d(DeadAssignmentsEliminationTest.java:515)  inFunction(            \" var a, b;\\n\" +            \" (f(b = true) || f(b = false)) && (a = b);\\n\" +            \" return a;\");",
                "failed_line": 515
            }
        }
    },
    "Closure_80": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/NodeUtil.java",
                "start_loc": 1242,
                "end_loc": 1266,
                "buggy_function": "  static boolean isBooleanResultHelper(Node n) {\n    switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n        return true;\n      default:\n        return false;\n    }\n  }\n",
                "fixed_function": "  static boolean isBooleanResultHelper(Node n) {\n    switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.NodeUtilTest::testIsBooleanResult"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/NodeUtil.java",
                "start_loc": 2864,
                "end_loc": 2927,
                "buggy_function": "  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n",
                "fixed_function": "  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n",
                "comment": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.NodeUtilTest::testLocalValue1"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.NodeUtilTest::testIsBooleanResult": {
                "path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
                "function_name": "testIsBooleanResult",
                "src": "  public void testIsBooleanResult() {\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"1\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"true\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"+true\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"+1\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"-1\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"-Infinity\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"Infinity\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"NaN\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"undefined\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"void 0\")));\n\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a << b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a >> b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a >>> b\")));\n\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a == b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a != b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a === b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a !== b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a < b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a > b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a <= b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a >= b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a in b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a instanceof b\")));\n\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"'a'\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"'a'+b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a+'b'\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a+b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a()\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"''.a\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a.b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a.b()\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a().b()\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"new a()\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"delete a\")));\n\n    // Definitely not boolean\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"([true,false])\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"({a:true})\")));\n\n    // These are boolean but aren't handled yet, \"false\" here means \"unknown\".\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"true && false\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"true || false\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a ? true : false\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a,true\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a=true\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a=1\")));\n  }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat com.google.javascript.jscomp.NodeUtilTest.testIsBooleanResult(NodeUtilTest.java:1504)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat com.google.javascript.jscomp.NodeUtilTest.testIsBooleanResult(NodeUtilTest.java:1504)  assertTrue(NodeUtil.isBooleanResult(getNode(\"delete a\")));",
                "failed_line": 1504
            },
            "com.google.javascript.jscomp.NodeUtilTest::testLocalValue1": {
                "path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
                "function_name": "testLocalValue1",
                "src": "  public void testLocalValue1() throws Exception {\n    // Names are not known to be local.\n    assertFalse(testLocalValue(\"x\"));\n    assertFalse(testLocalValue(\"x()\"));\n    assertFalse(testLocalValue(\"this\"));\n    assertFalse(testLocalValue(\"arguments\"));\n\n    // We can't know if new objects are local unless we know\n    // that they don't alias themselves.\n    assertFalse(testLocalValue(\"new x()\"));\n\n    // property references are assume to be non-local\n    assertFalse(testLocalValue(\"(new x()).y\"));\n    assertFalse(testLocalValue(\"(new x())['y']\"));\n\n    // Primitive values are local\n    assertTrue(testLocalValue(\"null\"));\n    assertTrue(testLocalValue(\"undefined\"));\n    assertTrue(testLocalValue(\"Infinity\"));\n    assertTrue(testLocalValue(\"NaN\"));\n    assertTrue(testLocalValue(\"1\"));\n    assertTrue(testLocalValue(\"'a'\"));\n    assertTrue(testLocalValue(\"true\"));\n    assertTrue(testLocalValue(\"false\"));\n    assertTrue(testLocalValue(\"[]\"));\n    assertTrue(testLocalValue(\"{}\"));\n\n    // The contents of arrays and objects don't matter\n    assertTrue(testLocalValue(\"[x]\"));\n    assertTrue(testLocalValue(\"{'a':x}\"));\n\n    // Pre-increment results in primitive number\n    assertTrue(testLocalValue(\"++x\"));\n    assertTrue(testLocalValue(\"--x\"));\n\n    // Post-increment, the previous value matters.\n    assertFalse(testLocalValue(\"x++\"));\n    assertFalse(testLocalValue(\"x--\"));\n\n    // The left side of an only assign matters if it is an alias or mutable.\n    assertTrue(testLocalValue(\"x=1\"));\n    assertFalse(testLocalValue(\"x=[]\"));\n    assertFalse(testLocalValue(\"x=y\"));\n    // The right hand side of assignment opts don't matter, as they force\n    // a local result.\n    assertTrue(testLocalValue(\"x+=y\"));\n    assertTrue(testLocalValue(\"x*=y\"));\n    // Comparisons always result in locals, as they force a local boolean\n    // result.\n    assertTrue(testLocalValue(\"x==y\"));\n    assertTrue(testLocalValue(\"x!=y\"));\n    assertTrue(testLocalValue(\"x>y\"));\n    // Only the right side of a comma matters\n    assertTrue(testLocalValue(\"(1,2)\"));\n    assertTrue(testLocalValue(\"(x,1)\"));\n    assertFalse(testLocalValue(\"(x,y)\"));\n\n    // Both the operands of OR matter\n    assertTrue(testLocalValue(\"1||2\"));\n    assertFalse(testLocalValue(\"x||1\"));\n    assertFalse(testLocalValue(\"x||y\"));\n    assertFalse(testLocalValue(\"1||y\"));\n\n    // Both the operands of AND matter\n    assertTrue(testLocalValue(\"1&&2\"));\n    assertFalse(testLocalValue(\"x&&1\"));\n    assertFalse(testLocalValue(\"x&&y\"));\n    assertFalse(testLocalValue(\"1&&y\"));\n\n    // Only the results of HOOK matter\n    assertTrue(testLocalValue(\"x?1:2\"));\n    assertFalse(testLocalValue(\"x?x:2\"));\n    assertFalse(testLocalValue(\"x?1:x\"));\n    assertFalse(testLocalValue(\"x?x:y\"));\n\n    // Results of ops are local values\n    assertTrue(testLocalValue(\"!y\"));\n    assertTrue(testLocalValue(\"~y\"));\n    assertTrue(testLocalValue(\"y + 1\"));\n    assertTrue(testLocalValue(\"y + z\"));\n    assertTrue(testLocalValue(\"y * z\"));\n\n    assertTrue(testLocalValue(\"'a' in x\"));\n    assertTrue(testLocalValue(\"typeof x\"));\n    assertTrue(testLocalValue(\"x instanceof y\"));\n\n    assertTrue(testLocalValue(\"void x\"));\n    assertTrue(testLocalValue(\"void 0\"));\n\n    assertFalse(testLocalValue(\"{}.x\"));\n\n    assertTrue(testLocalValue(\"{}.toString()\"));\n    assertTrue(testLocalValue(\"o.toString()\"));\n\n    assertFalse(testLocalValue(\"o.valueOf()\"));\n\n    assertTrue(testLocalValue(\"delete a.b\"));\n  }",
                "stack_trace": "java.lang.IllegalStateException: Unexpected expression nodeDELPROP 1 [sourcename:  [testcode] ] [parenthesized: true]\n parent:NAME a 1 [sourcename:  [testcode] ]\n\tat com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(NodeUtil.java:2923)\n\tat com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(NodeUtil.java:2856)\n\tat com.google.javascript.jscomp.NodeUtilTest.testLocalValue(NodeUtilTest.java:1281)\n\tat com.google.javascript.jscomp.NodeUtilTest.testLocalValue1(NodeUtilTest.java:1169)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.IllegalStateException: Unexpected expression nodeDELPROP 1 [sourcename:  [testcode] ] [parenthesized: true]\n parent:NAME a 1 [sourcename:  [testcode] ]\n\tat com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(NodeUtil.java:2923)  throw new IllegalStateException(            \"Unexpected expression node\" + value +            \"\\n parent:\" + value.getParent());\n\tat com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(NodeUtil.java:2856)  return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());\n\tat com.google.javascript.jscomp.NodeUtilTest.testLocalValue(NodeUtilTest.java:1281)  return NodeUtil.evaluatesToLocalValue(getNode(js));\n\tat com.google.javascript.jscomp.NodeUtilTest.testLocalValue1(NodeUtilTest.java:1169)  assertTrue(testLocalValue(\"delete a.b\"));",
                "failed_line": 1169
            }
        }
    },
    "Closure_85": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
                "start_loc": 130,
                "end_loc": 192,
                "buggy_function": "    \n  private Node tryRemoveUnconditionalBranching(Node n) {\n    /*\n     * For each of the unconditional branching control flow node, check to see\n     * if the ControlFlowAnalysis.computeFollowNode of that node is same as\n     * the branching target. If it is, the branch node is safe to be removed.\n     *\n     * This is not as clever as MinimizeExitPoints because it doesn't do any\n     * if-else conversion but it handles more complicated switch statements\n     * much nicer.\n     */\n\n    // If n is null the target is the end of the function, nothing to do.\n    if (n == null) {\n       return n;\n    }\n\n    DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);\n\n    if (gNode == null) {\n      return n;\n    }\n\n    if (n.getParent() == null) {\n      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\n      if (outEdges.size() == 1) {\n        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());\n      }\n    }\n    switch (n.getType()) {\n      case Token.BLOCK:\n        if (n.hasChildren()) {\n          Node first = n.getFirstChild();\n          return tryRemoveUnconditionalBranching(first);\n        } else {\n          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));\n        }\n      case Token.RETURN:\n        if (n.hasChildren()) {\n          break;\n        }\n      case Token.BREAK:\n      case Token.CONTINUE:\n\n        // We are looking for a control flow changing statement that always\n        // branches to the same node. If removing it the control flow still\n        // branches to that same node. It is safe to remove it.\n        List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\n        if (outEdges.size() == 1 &&\n            // If there is a next node, there is no chance this jump is useless.\n            (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n\n          Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));\n          Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n          if (nextCfgNode == fallThrough) {\n            removeDeadExprStatementSafely(n);\n            return fallThrough;\n          }\n        }\n    }\n    return n;\n  }\n",
                "fixed_function": "    \n  private Node tryRemoveUnconditionalBranching(Node n) {\n    /*\n     * For each of the unconditional branching control flow node, check to see\n     * if the ControlFlowAnalysis.computeFollowNode of that node is same as\n     * the branching target. If it is, the branch node is safe to be removed.\n     *\n     * This is not as clever as MinimizeExitPoints because it doesn't do any\n     * if-else conversion but it handles more complicated switch statements\n     * much nicer.\n     */\n\n    // If n is null the target is the end of the function, nothing to do.\n    if (n == null) {\n       return n;\n    }\n\n    DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);\n\n    if (gNode == null) {\n      return n;\n    }\n\n    switch (n.getType()) {\n      case Token.RETURN:\n        if (n.hasChildren()) {\n          break;\n        }\n      case Token.BREAK:\n      case Token.CONTINUE:\n\n        // We are looking for a control flow changing statement that always\n        // branches to the same node. If removing it the control flow still\n        // branches to that same node. It is safe to remove it.\n        List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\n        if (outEdges.size() == 1 &&\n            // If there is a next node, there is no chance this jump is useless.\n            (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n\n          Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n          Node fallThrough = computeFollowing(n);\n          Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n          if (nextCfgNode == fallThrough) {\n            removeDeadExprStatementSafely(n);\n            return fallThrough;\n          }\n        }\n    }\n    return n;\n  }\n",
                "comment": "  /**\n   * Tries to remove n if an unconditional branch node (break, continue or\n   * return) if the target of n is the same as the the follow of n. That is, if\n   * we remove n, the control flow remains the same. Also if n targets to\n   * another unconditional branch, this function will recursively try to remove\n   * the target branch as well. The reason why we want to cascade this removal\n   * is because we only run this pass once. If we have code such as\n   *\n   * break -> break -> break\n   *\n   * where all 3 break's are useless. The order of removal matters. When we\n   * first look at the first break, we see that it branches to the 2nd break.\n   * However, if we remove the last break, the 2nd break becomes useless and\n   * finally the first break becomes useless as well.\n   *\n   * @return The target of this jump. If the target is also useless jump,\n   *     the target of that useless jump recursively.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps",
                    "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
                "start_loc": 194,
                "end_loc": 197,
                "buggy_function": "  private Node computeFollowing(Node n) {\n    Node next = ControlFlowAnalysis.computeFollowNode(n);\n    return next;\n  }\n",
                "fixed_function": "  private Node computeFollowing(Node n) {\n    Node next = ControlFlowAnalysis.computeFollowNode(n);\n    while (next != null && next.getType() == Token.BLOCK) {\n      if (next.hasChildren()) {\n        next = next.getFirstChild();\n      } else {\n        next = computeFollowing(next);\n      }\n    }\n    return next;\n  }\n",
                "comment": "",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps": {
                "path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
                "function_name": "testCascadedRemovalOfUnlessUnconditonalJumps",
                "src": "  public void testCascadedRemovalOfUnlessUnconditonalJumps() {\n    test(\"switch (a) { case 'a': break; case 'b': break; case 'c': break }\",\n         \"switch (a) { case 'a': break; case 'b': case 'c': }\");\n    // Only one break removed per pass.\n    test(\"switch (a) { case 'a': break; case 'b': case 'c': }\",\n         \"switch (a) { case 'a': case 'b': case 'c': }\");\n\n    test(\"function foo() {\" +\n      \"  switch (a) { case 'a':return; case 'b':return; case 'c':return }}\",\n      \"function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}\");\n    test(\"function foo() {\" +\n      \"  switch (a) { case 'a':return; case 'b': case 'c': }}\",\n      \"function foo() { switch (a) { case 'a': case 'b': case 'c': }}\");\n\n    testSame(\"function foo() {\" +\n             \"switch (a) { case 'a':return 2; case 'b':return 1}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: switch(a){case \"a\":break;case \"b\":case \"c\":}\nResult: switch(a){case \"a\":case \"b\":case \"c\":}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        SWITCH 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            CASE 1 [sourcename: expected0]\n                STRING a 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0] [synthetic: 1]\n                    BREAK 1 [sourcename: expected0]\n            CASE 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0] [synthetic: 1]\n            CASE 1 [sourcename: expected0]\n                STRING c 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0] [synthetic: 1]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        SWITCH 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n            CASE 1 [sourcename: testcode]\n                STRING a 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode] [synthetic: 1]\n            CASE 1 [sourcename: testcode]\n                STRING b 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode] [synthetic: 1]\n            CASE 1 [sourcename: testcode]\n                STRING c 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode] [synthetic: 1]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0] [synthetic: 1]\n    BREAK 1 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode] [synthetic: 1]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:818)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:398)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:323)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:280)\n\tat com.google.javascript.jscomp.UnreachableCodeEliminationTest.testCascadedRemovalOfUnlessUnconditonalJumps(UnreachableCodeEliminationTest.java:235)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: switch(a){case \"a\":break;case \"b\":case \"c\":}\nResult: switch(a){case \"a\":case \"b\":case \"c\":}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        SWITCH 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            CASE 1 [sourcename: expected0]\n                STRING a 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0] [synthetic: 1]\n                    BREAK 1 [sourcename: expected0]\n            CASE 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0] [synthetic: 1]\n            CASE 1 [sourcename: expected0]\n                STRING c 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0] [synthetic: 1]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        SWITCH 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n            CASE 1 [sourcename: testcode]\n                STRING a 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode] [synthetic: 1]\n            CASE 1 [sourcename: testcode]\n                STRING b 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode] [synthetic: 1]\n            CASE 1 [sourcename: testcode]\n                STRING c 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode] [synthetic: 1]\n\n\nSubtree1: BLOCK 1 [sourcename: expected0] [synthetic: 1]\n    BREAK 1 [sourcename: expected0]\n\n\nSubtree2: BLOCK 1 [sourcename: testcode] [synthetic: 1]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:818)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:398)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:323)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:280)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.UnreachableCodeEliminationTest.testCascadedRemovalOfUnlessUnconditonalJumps(UnreachableCodeEliminationTest.java:235)  test(\"switch (a) { case 'a': break; case 'b': break; case 'c': break }\",         \"switch (a) { case 'a': break; case 'b': case 'c': }\");",
                "failed_line": 235
            },
            "com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311": {
                "path": "test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java",
                "function_name": "testIssue311",
                "src": "  public void testIssue311() {\n    test(\"function a(b) {\\n\" +\n         \"  switch (b.v) {\\n\" +\n         \"    case 'SWITCH':\\n\" +\n         \"      if (b.i >= 0) {\\n\" +\n         \"        return b.o;\\n\" +\n         \"      } else {\\n\" +\n         \"        return;\\n\" +\n         \"      }\\n\" +\n         \"      break;\\n\" +\n         \"  }\\n\" +\n         \"}\",\n         \"function a(b) {\\n\" +\n         \"  switch (b.v) {\\n\" +\n         \"    case 'SWITCH':\\n\" +\n         \"      if (b.i >= 0) {\\n\" +\n         \"        return b.o;\\n\" +\n         \"      } else {\\n\" +\n         \"      }\\n\" +\n         \"  }\\n\" +\n         \"}\");\n  }",
                "stack_trace": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n  Node(BREAK): testcode:9:6\n      break;\n  Parent: NULL\n\tat com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(NodeUtil.java:1369)\n\tat com.google.javascript.jscomp.NodeUtil.removeChild(NodeUtil.java:1382)\n\tat com.google.javascript.jscomp.UnreachableCodeElimination.removeDeadExprStatementSafely(UnreachableCodeElimination.java:234)\n\tat com.google.javascript.jscomp.UnreachableCodeElimination.visit(UnreachableCodeElimination.java:105)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:464)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:502)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:449)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:249)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:422)\n\tat com.google.javascript.jscomp.UnreachableCodeElimination.process(UnreachableCodeElimination.java:87)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:736)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:398)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:323)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:280)\n\tat com.google.javascript.jscomp.UnreachableCodeEliminationTest.testIssue311(UnreachableCodeEliminationTest.java:253)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\nCaused by: java.lang.NullPointerException\n\t... 56 more",
                "clean_error_message": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n  Node(BREAK): testcode:9:6\n      break;\n  Parent: NULL\n\tat com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(NodeUtil.java:1369)  return parent.getType() == Token.TRY && parent.getChildCount() == 3\n\tat com.google.javascript.jscomp.NodeUtil.removeChild(NodeUtil.java:1382)  if (isTryFinallyNode(parent, node)) {      if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {        // A finally can only be removed if there is a catch.        parent.removeChild(node);      } else {        // Otherwise only its children can be removed.        node.detachChildren();      }    } else if (node.getType() == Token.CATCH) {      // The CATCH can can only be removed if there is a finally clause.      Node tryNode = node.getParent().getParent();      Preconditions.checkState(NodeUtil.hasFinally(tryNode));      node.detachFromParent();    } else if (isTryCatchNodeContainer(node)) {      // The container node itself can't be removed, but the contained CATCH      // can if there is a 'finally' clause      Node tryNode = node.getParent();      Preconditions.checkState(NodeUtil.hasFinally(tryNode));      node.detachChildren();    } else if (node.getType() == Token.BLOCK) {      // Simply empty the block.  This maintains source location and      // \"synthetic\"-ness.      node.detachChildren();    } else if (isStatementBlock(parent)        || isSwitchCase(node)) {      // A statement in a block can simply be removed.      parent.removeChild(node);    } else if (parent.getType() == Token.VAR) {      if (parent.hasMoreThanOneChild()) {        parent.removeChild(node);      } else {        // Remove the node from the parent, so it can be reused.        parent.removeChild(node);        // This would leave an empty VAR, remove the VAR itself.        removeChild(parent.getParent(), parent);      }    } else if (parent.getType() == Token.LABEL        && node == parent.getLastChild()) {      // Remove the node from the parent, so it can be reused.      parent.removeChild(node);      // A LABEL without children can not be referred to, remove it.      removeChild(parent.getParent(), parent);    } else if (parent.getType() == Token.FOR        && parent.getChildCount() == 4) {      // Only Token.FOR can have an Token.EMPTY other control structure      // need something for the condition. Others need to be replaced      // or the structure removed.      parent.replaceChild(node, new Node(Token.EMPTY));    } else {      throw new IllegalStateException(\"Invalid attempt to remove node: \" +          node.toString() + \" of \"+ parent.toString());    }\n\tat com.google.javascript.jscomp.UnreachableCodeElimination.removeDeadExprStatementSafely(UnreachableCodeElimination.java:234)  NodeUtil.removeChild(n.getParent(), n);\n\tat com.google.javascript.jscomp.UnreachableCodeElimination.visit(UnreachableCodeElimination.java:105)  removeDeadExprStatementSafely(n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:464)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:502)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:449)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:457)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:249)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:422)  t.traverse(root);\n\tat com.google.javascript.jscomp.UnreachableCodeElimination.process(UnreachableCodeElimination.java:87)  NodeTraversal.traverse(compiler, root, this);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:736)  getProcessor(compiler).process(externsRoot, mainRoot);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:398)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:323)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:292)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:280)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.UnreachableCodeEliminationTest.testIssue311(UnreachableCodeEliminationTest.java:253)  test(\"function a(b) {\\n\" +         \"  switch (b.v) {\\n\" +         \"    case 'SWITCH':\\n\" +         \"      if (b.i >= 0) {\\n\" +         \"        return b.o;\\n\" +         \"      } else {\\n\" +         \"        return;\\n\" +         \"      }\\n\" +         \"      break;\\n\" +         \"  }\\n\" +         \"}\",         \"function a(b) {\\n\" +         \"  switch (b.v) {\\n\" +         \"    case 'SWITCH':\\n\" +         \"      if (b.i >= 0) {\\n\" +         \"        return b.o;\\n\" +         \"      } else {\\n\" +         \"      }\\n\" +         \"  }\\n\" +         \"}\");\nCaused by: java.lang.NullPointerException\n\t... 56 more",
                "failed_line": 253
            }
        }
    },
    "Closure_89": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/CollapseProperties.java",
                "start_loc": 477,
                "end_loc": 540,
                "buggy_function": "  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }\n",
                "fixed_function": "  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n    if (rvalue != null && rvalue.getType() == Token.FUNCTION) {\n      checkForHosedThisReferences(rvalue, refName.docInfo, refName);\n    }\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }\n",
                "comment": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
                "start_loc": 896,
                "end_loc": 925,
                "buggy_function": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (type != Type.FUNCTION && aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }\n",
                "fixed_function": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToChildOfUncollapsibleFunctionInLocalScope",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_1",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_2",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_3",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth2"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToChildOfUncollapsibleFunctionInLocalScope": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testAddPropertyToChildOfUncollapsibleFunctionInLocalScope",
                "src": "  public void testAddPropertyToChildOfUncollapsibleFunctionInLocalScope() {\n    testSame(\n        \"function a() {} a.b = {x: 0}; var c = a;\" +\n        \"(function() {a.b.y = 0;})(); a.b.y;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function a(){}a.b={x:0};var c=a;(function(){a.b.y=0})();a.b.y\nResult: function a(){}var a$b$x=0;var a$b$y;var c=a;(function(){a$b$y=0})();a$b$y\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                OBJECTLIT 1 [sourcename: expected0]\n                    STRING x 1 [sourcename: expected0]\n                        NUMBER 0.0 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME c 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n                        EXPR_RESULT 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    GETPROP 1 [sourcename: expected0]\n                                        NAME a 1 [sourcename: expected0]\n                                        STRING b 1 [sourcename: expected0]\n                                    STRING y 1 [sourcename: expected0]\n                                NUMBER 0.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                STRING y 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b$x 1 [sourcename: testcode]\n                NUMBER 0.0 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b$y 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME c 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n                        EXPR_RESULT 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode]\n                                NAME a$b$y 1 [sourcename: testcode] [originalname: a.b.y]\n                                NUMBER 0.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b$y 1 [sourcename: testcode] [originalname: a.b.y]\n\n\nSubtree1: SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n    FUNCTION  1 [sourcename: expected0]\n        NAME a 1 [sourcename: expected0]\n        LP 1 [sourcename: expected0]\n        BLOCK 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        ASSIGN 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n            OBJECTLIT 1 [sourcename: expected0]\n                STRING x 1 [sourcename: expected0]\n                    NUMBER 0.0 1 [sourcename: expected0]\n    VAR 1 [sourcename: expected0]\n        NAME c 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        CALL 1 [sourcename: expected0] [free_call: 1]\n            FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    EXPR_RESULT 1 [sourcename: expected0]\n                        ASSIGN 1 [sourcename: expected0]\n                            GETPROP 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    NAME a 1 [sourcename: expected0]\n                                    STRING b 1 [sourcename: expected0]\n                                STRING y 1 [sourcename: expected0]\n                            NUMBER 0.0 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n            STRING y 1 [sourcename: expected0]\n\n\nSubtree2: SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n    FUNCTION  1 [sourcename: testcode]\n        NAME a 1 [sourcename: testcode]\n        LP 1 [sourcename: testcode]\n        BLOCK 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b$x 1 [sourcename: testcode]\n            NUMBER 0.0 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b$y 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME c 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        CALL 1 [sourcename: testcode] [free_call: 1]\n            FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    EXPR_RESULT 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode]\n                            NAME a$b$y 1 [sourcename: testcode] [originalname: a.b.y]\n                            NUMBER 0.0 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        NAME a$b$y 1 [sourcename: testcode] [originalname: a.b.y]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAddPropertyToChildOfUncollapsibleFunctionInLocalScope(CollapsePropertiesTest.java:610)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function a(){}a.b={x:0};var c=a;(function(){a.b.y=0})();a.b.y\nResult: function a(){}var a$b$x=0;var a$b$y;var c=a;(function(){a$b$y=0})();a$b$y\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                OBJECTLIT 1 [sourcename: expected0]\n                    STRING x 1 [sourcename: expected0]\n                        NUMBER 0.0 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME c 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n                        EXPR_RESULT 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    GETPROP 1 [sourcename: expected0]\n                                        NAME a 1 [sourcename: expected0]\n                                        STRING b 1 [sourcename: expected0]\n                                    STRING y 1 [sourcename: expected0]\n                                NUMBER 0.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                STRING y 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b$x 1 [sourcename: testcode]\n                NUMBER 0.0 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b$y 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME c 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n                        EXPR_RESULT 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode]\n                                NAME a$b$y 1 [sourcename: testcode] [originalname: a.b.y]\n                                NUMBER 0.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b$y 1 [sourcename: testcode] [originalname: a.b.y]\n\n\nSubtree1: SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n    FUNCTION  1 [sourcename: expected0]\n        NAME a 1 [sourcename: expected0]\n        LP 1 [sourcename: expected0]\n        BLOCK 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        ASSIGN 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n            OBJECTLIT 1 [sourcename: expected0]\n                STRING x 1 [sourcename: expected0]\n                    NUMBER 0.0 1 [sourcename: expected0]\n    VAR 1 [sourcename: expected0]\n        NAME c 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        CALL 1 [sourcename: expected0] [free_call: 1]\n            FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    EXPR_RESULT 1 [sourcename: expected0]\n                        ASSIGN 1 [sourcename: expected0]\n                            GETPROP 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    NAME a 1 [sourcename: expected0]\n                                    STRING b 1 [sourcename: expected0]\n                                STRING y 1 [sourcename: expected0]\n                            NUMBER 0.0 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n            STRING y 1 [sourcename: expected0]\n\n\nSubtree2: SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n    FUNCTION  1 [sourcename: testcode]\n        NAME a 1 [sourcename: testcode]\n        LP 1 [sourcename: testcode]\n        BLOCK 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b$x 1 [sourcename: testcode]\n            NUMBER 0.0 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b$y 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME c 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        CALL 1 [sourcename: testcode] [free_call: 1]\n            FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    EXPR_RESULT 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode]\n                            NAME a$b$y 1 [sourcename: testcode] [originalname: a.b.y]\n                            NUMBER 0.0 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        NAME a$b$y 1 [sourcename: testcode] [originalname: a.b.y]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)  test(js, js);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAddPropertyToChildOfUncollapsibleFunctionInLocalScope(CollapsePropertiesTest.java:610)  testSame(        \"function a() {} a.b = {x: 0}; var c = a;\" +        \"(function() {a.b.y = 0;})(); a.b.y;\");",
                "failed_line": 610
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_1": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testAliasCreatedForFunctionDepth1_1",
                "src": "  public void testAliasCreatedForFunctionDepth1_1() {\n    testSame(\"var a = function(){}; a.b = 1; var c = a; c.b = 2; a.b != c.b;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a=function(){};a.b=1;var c=a;c.b=2;a.b!=c.b\nResult: var a=function(){};var a$b=1;var c=a;c.b=2;a$b!=c.b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                NUMBER 1.0 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME c 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME c 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                NUMBER 2.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            NE 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME c 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                NUMBER 1.0 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME c 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            ASSIGN 1 [sourcename: testcode]\n                GETPROP 1 [sourcename: testcode]\n                    NAME c 1 [sourcename: testcode]\n                    STRING b 1 [sourcename: testcode]\n                NUMBER 2.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NE 1 [sourcename: testcode]\n                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                GETPROP 1 [sourcename: testcode]\n                    NAME c 1 [sourcename: testcode]\n                    STRING b 1 [sourcename: testcode]\n\n\nSubtree1: EXPR_RESULT 1 [sourcename: expected0]\n    ASSIGN 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n        NUMBER 1.0 1 [sourcename: expected0]\n\n\nSubtree2: VAR 1 [sourcename: testcode]\n    NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        NUMBER 1.0 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAliasCreatedForFunctionDepth1_1(CollapsePropertiesTest.java:279)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a=function(){};a.b=1;var c=a;c.b=2;a.b!=c.b\nResult: var a=function(){};var a$b=1;var c=a;c.b=2;a$b!=c.b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                NUMBER 1.0 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME c 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME c 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                NUMBER 2.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            NE 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME c 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                NUMBER 1.0 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME c 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            ASSIGN 1 [sourcename: testcode]\n                GETPROP 1 [sourcename: testcode]\n                    NAME c 1 [sourcename: testcode]\n                    STRING b 1 [sourcename: testcode]\n                NUMBER 2.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NE 1 [sourcename: testcode]\n                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                GETPROP 1 [sourcename: testcode]\n                    NAME c 1 [sourcename: testcode]\n                    STRING b 1 [sourcename: testcode]\n\n\nSubtree1: EXPR_RESULT 1 [sourcename: expected0]\n    ASSIGN 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n        NUMBER 1.0 1 [sourcename: expected0]\n\n\nSubtree2: VAR 1 [sourcename: testcode]\n    NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        NUMBER 1.0 1 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)  test(js, js);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAliasCreatedForFunctionDepth1_1(CollapsePropertiesTest.java:279)  testSame(\"var a = function(){}; a.b = 1; var c = a; c.b = 2; a.b != c.b;\");",
                "failed_line": 279
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_2": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testAliasCreatedForFunctionDepth1_2",
                "src": "  public void testAliasCreatedForFunctionDepth1_2() {\n    testSame(\"var a = function(){}; a.b = 1; f(a); a.b;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a=function(){};a.b=1;f(a);a.b\nResult: var a=function(){};var a$b=1;f(a);a$b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                NUMBER 1.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                NAME f 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                NUMBER 1.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                NAME f 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\nSubtree1: EXPR_RESULT 1 [sourcename: expected0]\n    ASSIGN 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n        NUMBER 1.0 1 [sourcename: expected0]\n\n\nSubtree2: VAR 1 [sourcename: testcode]\n    NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        NUMBER 1.0 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAliasCreatedForFunctionDepth1_2(CollapsePropertiesTest.java:295)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a=function(){};a.b=1;f(a);a.b\nResult: var a=function(){};var a$b=1;f(a);a$b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                NUMBER 1.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                NAME f 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                NUMBER 1.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                NAME f 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\nSubtree1: EXPR_RESULT 1 [sourcename: expected0]\n    ASSIGN 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n        NUMBER 1.0 1 [sourcename: expected0]\n\n\nSubtree2: VAR 1 [sourcename: testcode]\n    NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        NUMBER 1.0 1 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)  test(js, js);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAliasCreatedForFunctionDepth1_2(CollapsePropertiesTest.java:295)  testSame(\"var a = function(){}; a.b = 1; f(a); a.b;\");",
                "failed_line": 295
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_3": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testAliasCreatedForFunctionDepth1_3",
                "src": "  public void testAliasCreatedForFunctionDepth1_3() {\n    testSame(\"var a = function(){}; a.b = 1; new f(a); a.b;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a=function(){};a.b=1;new f(a);a.b\nResult: var a=function(){};var a$b=1;new f(a);a$b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                NUMBER 1.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            NEW 1 [sourcename: expected0]\n                NAME f 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                NUMBER 1.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NEW 1 [sourcename: testcode]\n                NAME f 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\nSubtree1: EXPR_RESULT 1 [sourcename: expected0]\n    ASSIGN 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n        NUMBER 1.0 1 [sourcename: expected0]\n\n\nSubtree2: VAR 1 [sourcename: testcode]\n    NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        NUMBER 1.0 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAliasCreatedForFunctionDepth1_3(CollapsePropertiesTest.java:304)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a=function(){};a.b=1;new f(a);a.b\nResult: var a=function(){};var a$b=1;new f(a);a$b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a 1 [sourcename: expected0]\n                    STRING b 1 [sourcename: expected0]\n                NUMBER 1.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            NEW 1 [sourcename: expected0]\n                NAME f 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                NUMBER 1.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NEW 1 [sourcename: testcode]\n                NAME f 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\nSubtree1: EXPR_RESULT 1 [sourcename: expected0]\n    ASSIGN 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n        NUMBER 1.0 1 [sourcename: expected0]\n\n\nSubtree2: VAR 1 [sourcename: testcode]\n    NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        NUMBER 1.0 1 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)  test(js, js);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAliasCreatedForFunctionDepth1_3(CollapsePropertiesTest.java:304)  testSame(\"var a = function(){}; a.b = 1; new f(a); a.b;\");",
                "failed_line": 304
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1",
                "src": "  public void testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1() {\n    // This technically should be collapsed, according to the rules.\n    // We don't collapse named constructors for legacy reasons\n    // (this pass has been around too long, and we don't know who's\n    // depending on this behavior).\n    testSame(\n          \"/** @constructor */ function a() {} var c = a; \" +\n          \"(function() {a.b = 0;})(); a.b;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function a(){}var c=a;(function(){a.b=0})();a.b\nResult: function a(){}var a$b;var c=a;(function(){a$b=0})();a$b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n            NAME a 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME c 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n                        EXPR_RESULT 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    NAME a 1 [sourcename: expected0]\n                                    STRING b 1 [sourcename: expected0]\n                                NUMBER 0.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode] [jsdoc_info: JSDocInfo]\n            NAME a 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME c 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n                        EXPR_RESULT 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode]\n                                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                                NUMBER 0.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\nSubtree1: SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n    FUNCTION  1 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n        NAME a 1 [sourcename: expected0]\n        LP 1 [sourcename: expected0]\n        BLOCK 1 [sourcename: expected0]\n    VAR 1 [sourcename: expected0]\n        NAME c 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        CALL 1 [sourcename: expected0] [free_call: 1]\n            FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    EXPR_RESULT 1 [sourcename: expected0]\n                        ASSIGN 1 [sourcename: expected0]\n                            GETPROP 1 [sourcename: expected0]\n                                NAME a 1 [sourcename: expected0]\n                                STRING b 1 [sourcename: expected0]\n                            NUMBER 0.0 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n\n\nSubtree2: SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n    FUNCTION  1 [sourcename: testcode] [jsdoc_info: JSDocInfo]\n        NAME a 1 [sourcename: testcode]\n        LP 1 [sourcename: testcode]\n        BLOCK 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME c 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        CALL 1 [sourcename: testcode] [free_call: 1]\n            FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    EXPR_RESULT 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode]\n                            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                            NUMBER 0.0 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1(CollapsePropertiesTest.java:552)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function a(){}var c=a;(function(){a.b=0})();a.b\nResult: function a(){}var a$b;var c=a;(function(){a$b=0})();a$b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n            NAME a 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME c 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n                        EXPR_RESULT 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    NAME a 1 [sourcename: expected0]\n                                    STRING b 1 [sourcename: expected0]\n                                NUMBER 0.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode] [jsdoc_info: JSDocInfo]\n            NAME a 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME c 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n                        EXPR_RESULT 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode]\n                                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                                NUMBER 0.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\nSubtree1: SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n    FUNCTION  1 [sourcename: expected0] [jsdoc_info: JSDocInfo]\n        NAME a 1 [sourcename: expected0]\n        LP 1 [sourcename: expected0]\n        BLOCK 1 [sourcename: expected0]\n    VAR 1 [sourcename: expected0]\n        NAME c 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        CALL 1 [sourcename: expected0] [free_call: 1]\n            FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    EXPR_RESULT 1 [sourcename: expected0]\n                        ASSIGN 1 [sourcename: expected0]\n                            GETPROP 1 [sourcename: expected0]\n                                NAME a 1 [sourcename: expected0]\n                                STRING b 1 [sourcename: expected0]\n                            NUMBER 0.0 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n\n\nSubtree2: SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n    FUNCTION  1 [sourcename: testcode] [jsdoc_info: JSDocInfo]\n        NAME a 1 [sourcename: testcode]\n        LP 1 [sourcename: testcode]\n        BLOCK 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME c 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        CALL 1 [sourcename: testcode] [free_call: 1]\n            FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    EXPR_RESULT 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode]\n                            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                            NUMBER 0.0 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)  test(js, js);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1(CollapsePropertiesTest.java:552)  testSame(          \"/** @constructor */ function a() {} var c = a; \" +          \"(function() {a.b = 0;})(); a.b;\");",
                "failed_line": 552
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1",
                "src": "  public void testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1() {\n    testSame(\"function a() {} var c = a; (function() {a.b = 0;})(); a.b;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function a(){}var c=a;(function(){a.b=0})();a.b\nResult: function a(){}var a$b;var c=a;(function(){a$b=0})();a$b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME c 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n                        EXPR_RESULT 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    NAME a 1 [sourcename: expected0]\n                                    STRING b 1 [sourcename: expected0]\n                                NUMBER 0.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME c 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n                        EXPR_RESULT 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode]\n                                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                                NUMBER 0.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\nSubtree1: SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n    FUNCTION  1 [sourcename: expected0]\n        NAME a 1 [sourcename: expected0]\n        LP 1 [sourcename: expected0]\n        BLOCK 1 [sourcename: expected0]\n    VAR 1 [sourcename: expected0]\n        NAME c 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        CALL 1 [sourcename: expected0] [free_call: 1]\n            FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    EXPR_RESULT 1 [sourcename: expected0]\n                        ASSIGN 1 [sourcename: expected0]\n                            GETPROP 1 [sourcename: expected0]\n                                NAME a 1 [sourcename: expected0]\n                                STRING b 1 [sourcename: expected0]\n                            NUMBER 0.0 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n\n\nSubtree2: SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n    FUNCTION  1 [sourcename: testcode]\n        NAME a 1 [sourcename: testcode]\n        LP 1 [sourcename: testcode]\n        BLOCK 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME c 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        CALL 1 [sourcename: testcode] [free_call: 1]\n            FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    EXPR_RESULT 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode]\n                            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                            NUMBER 0.0 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1(CollapsePropertiesTest.java:544)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function a(){}var c=a;(function(){a.b=0})();a.b\nResult: function a(){}var a$b;var c=a;(function(){a$b=0})();a$b\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION  1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            LP 1 [sourcename: expected0]\n            BLOCK 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME c 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n                        EXPR_RESULT 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    NAME a 1 [sourcename: expected0]\n                                    STRING b 1 [sourcename: expected0]\n                                NUMBER 0.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a 1 [sourcename: expected0]\n                STRING b 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION  1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n            LP 1 [sourcename: testcode]\n            BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME c 1 [sourcename: testcode]\n                NAME a 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n                        EXPR_RESULT 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode]\n                                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                                NUMBER 0.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\nSubtree1: SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n    FUNCTION  1 [sourcename: expected0]\n        NAME a 1 [sourcename: expected0]\n        LP 1 [sourcename: expected0]\n        BLOCK 1 [sourcename: expected0]\n    VAR 1 [sourcename: expected0]\n        NAME c 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        CALL 1 [sourcename: expected0] [free_call: 1]\n            FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    EXPR_RESULT 1 [sourcename: expected0]\n                        ASSIGN 1 [sourcename: expected0]\n                            GETPROP 1 [sourcename: expected0]\n                                NAME a 1 [sourcename: expected0]\n                                STRING b 1 [sourcename: expected0]\n                            NUMBER 0.0 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a 1 [sourcename: expected0]\n            STRING b 1 [sourcename: expected0]\n\n\nSubtree2: SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n    FUNCTION  1 [sourcename: testcode]\n        NAME a 1 [sourcename: testcode]\n        LP 1 [sourcename: testcode]\n        BLOCK 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME c 1 [sourcename: testcode]\n            NAME a 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        CALL 1 [sourcename: testcode] [free_call: 1]\n            FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    EXPR_RESULT 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode]\n                            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                            NUMBER 0.0 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:491)  test(js, js);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1(CollapsePropertiesTest.java:544)  testSame(\"function a() {} var c = a; (function() {a.b = 0;})(); a.b;\");",
                "failed_line": 544
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2",
                "src": "  public void testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2() {\n    test(\"var a = {}; a.b = function (){}; var d = a.b;\" +\n         \"(function() {a.b.c = 0;})(); a.b.c;\",\n         \"var a$b = function (){}; var d = a$b;\" +\n         \"(function() {a$b.c = 0;})(); a$b.c;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$b=function(){};var d=a$b;(function(){a$b.c=0})();a$b.c\nResult: var a$b=function(){};var a$b$c;var d=a$b;(function(){a$b$c=0})();a$b$c\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME d 1 [sourcename: expected0]\n                NAME a$b 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n                        EXPR_RESULT 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    NAME a$b 1 [sourcename: expected0]\n                                    STRING c 1 [sourcename: expected0]\n                                NUMBER 0.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a$b 1 [sourcename: expected0]\n                STRING c 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b$c 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME d 1 [sourcename: testcode]\n                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n                        EXPR_RESULT 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode]\n                                NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n                                NUMBER 0.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n\n\nSubtree1: SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n    VAR 1 [sourcename: expected0]\n        NAME a$b 1 [sourcename: expected0]\n            FUNCTION  1 [sourcename: expected0]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n    VAR 1 [sourcename: expected0]\n        NAME d 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        CALL 1 [sourcename: expected0] [free_call: 1]\n            FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    EXPR_RESULT 1 [sourcename: expected0]\n                        ASSIGN 1 [sourcename: expected0]\n                            GETPROP 1 [sourcename: expected0]\n                                NAME a$b 1 [sourcename: expected0]\n                                STRING c 1 [sourcename: expected0]\n                            NUMBER 0.0 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n            STRING c 1 [sourcename: expected0]\n\n\nSubtree2: SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n    VAR 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n            FUNCTION  1 [sourcename: testcode]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b$c 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME d 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n    EXPR_RESULT 1 [sourcename: testcode]\n        CALL 1 [sourcename: testcode] [free_call: 1]\n            FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    EXPR_RESULT 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode]\n                            NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n                            NUMBER 0.0 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2(CollapsePropertiesTest.java:572)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$b=function(){};var d=a$b;(function(){a$b.c=0})();a$b.c\nResult: var a$b=function(){};var a$b$c;var d=a$b;(function(){a$b$c=0})();a$b$c\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME d 1 [sourcename: expected0]\n                NAME a$b 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            CALL 1 [sourcename: expected0] [free_call: 1]\n                FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n                        EXPR_RESULT 1 [sourcename: expected0]\n                            ASSIGN 1 [sourcename: expected0]\n                                GETPROP 1 [sourcename: expected0]\n                                    NAME a$b 1 [sourcename: expected0]\n                                    STRING c 1 [sourcename: expected0]\n                                NUMBER 0.0 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            GETPROP 1 [sourcename: expected0]\n                NAME a$b 1 [sourcename: expected0]\n                STRING c 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b$c 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME d 1 [sourcename: testcode]\n                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        EXPR_RESULT 1 [sourcename: testcode]\n            CALL 1 [sourcename: testcode] [free_call: 1]\n                FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n                        EXPR_RESULT 1 [sourcename: testcode]\n                            ASSIGN 1 [sourcename: testcode]\n                                NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n                                NUMBER 0.0 1 [sourcename: testcode]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n\n\nSubtree1: SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n    VAR 1 [sourcename: expected0]\n        NAME a$b 1 [sourcename: expected0]\n            FUNCTION  1 [sourcename: expected0]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n    VAR 1 [sourcename: expected0]\n        NAME d 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        CALL 1 [sourcename: expected0] [free_call: 1]\n            FUNCTION  1 [sourcename: expected0] [parenthesized: true]\n                NAME  1 [sourcename: expected0]\n                LP 1 [sourcename: expected0]\n                BLOCK 1 [sourcename: expected0]\n                    EXPR_RESULT 1 [sourcename: expected0]\n                        ASSIGN 1 [sourcename: expected0]\n                            GETPROP 1 [sourcename: expected0]\n                                NAME a$b 1 [sourcename: expected0]\n                                STRING c 1 [sourcename: expected0]\n                            NUMBER 0.0 1 [sourcename: expected0]\n    EXPR_RESULT 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n            STRING c 1 [sourcename: expected0]\n\n\nSubtree2: SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n    VAR 1 [sourcename: testcode]\n        NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n            FUNCTION  1 [sourcename: testcode]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME a$b$c 1 [sourcename: testcode]\n    VAR 1 [sourcename: testcode]\n        NAME d 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n    EXPR_RESULT 1 [sourcename: testcode]\n        CALL 1 [sourcename: testcode] [free_call: 1]\n            FUNCTION  1 [sourcename: testcode] [parenthesized: true]\n                NAME  1 [sourcename: testcode]\n                LP 1 [sourcename: testcode]\n                BLOCK 1 [sourcename: testcode]\n                    EXPR_RESULT 1 [sourcename: testcode]\n                        ASSIGN 1 [sourcename: testcode]\n                            NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n                            NUMBER 0.0 1 [sourcename: testcode]\n    EXPR_RESULT 1 [sourcename: testcode]\n        NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2(CollapsePropertiesTest.java:572)  test(\"var a = {}; a.b = function (){}; var d = a.b;\" +         \"(function() {a.b.c = 0;})(); a.b.c;\",         \"var a$b = function (){}; var d = a$b;\" +         \"(function() {a$b.c = 0;})(); a$b.c;\");",
                "failed_line": 572
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth2": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testAliasCreatedForFunctionDepth2",
                "src": "  public void testAliasCreatedForFunctionDepth2() {\n    test(\n        \"var a = {}; a.b = function() {}; a.b.c = 1; var d = a.b;\" +\n        \"a.b.c != d.c;\",\n        \"var a$b = function() {}; a$b.c = 1; var d = a$b;\" +\n        \"a$b.c != d.c;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$b=function(){};a$b.c=1;var d=a$b;a$b.c!=d.c\nResult: var a$b=function(){};var a$b$c=1;var d=a$b;a$b$c!=d.c\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a$b 1 [sourcename: expected0]\n                    STRING c 1 [sourcename: expected0]\n                NUMBER 1.0 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME d 1 [sourcename: expected0]\n                NAME a$b 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            NE 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a$b 1 [sourcename: expected0]\n                    STRING c 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME d 1 [sourcename: expected0]\n                    STRING c 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n                NUMBER 1.0 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME d 1 [sourcename: testcode]\n                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NE 1 [sourcename: testcode]\n                NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n                GETPROP 1 [sourcename: testcode]\n                    NAME d 1 [sourcename: testcode]\n                    STRING c 1 [sourcename: testcode]\n\n\nSubtree1: EXPR_RESULT 1 [sourcename: expected0]\n    ASSIGN 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n            STRING c 1 [sourcename: expected0]\n        NUMBER 1.0 1 [sourcename: expected0]\n\n\nSubtree2: VAR 1 [sourcename: testcode]\n    NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n        NUMBER 1.0 1 [sourcename: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAliasCreatedForFunctionDepth2(CollapsePropertiesTest.java:313)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$b=function(){};a$b.c=1;var d=a$b;a$b.c!=d.c\nResult: var a$b=function(){};var a$b$c=1;var d=a$b;a$b$c!=d.c\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1 [sourcename: expected0]\n                    LP 1 [sourcename: expected0]\n                    BLOCK 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            ASSIGN 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a$b 1 [sourcename: expected0]\n                    STRING c 1 [sourcename: expected0]\n                NUMBER 1.0 1 [sourcename: expected0]\n        VAR 1 [sourcename: expected0]\n            NAME d 1 [sourcename: expected0]\n                NAME a$b 1 [sourcename: expected0]\n        EXPR_RESULT 1 [sourcename: expected0]\n            NE 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME a$b 1 [sourcename: expected0]\n                    STRING c 1 [sourcename: expected0]\n                GETPROP 1 [sourcename: expected0]\n                    NAME d 1 [sourcename: expected0]\n                    STRING c 1 [sourcename: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1 [sourcename: testcode]\n            NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1 [sourcename: testcode]\n                    LP 1 [sourcename: testcode]\n                    BLOCK 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n                NUMBER 1.0 1 [sourcename: testcode]\n        VAR 1 [sourcename: testcode]\n            NAME d 1 [sourcename: testcode]\n                NAME a$b 1 [sourcename: testcode] [originalname: a.b]\n        EXPR_RESULT 1 [sourcename: testcode]\n            NE 1 [sourcename: testcode]\n                NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n                GETPROP 1 [sourcename: testcode]\n                    NAME d 1 [sourcename: testcode]\n                    STRING c 1 [sourcename: testcode]\n\n\nSubtree1: EXPR_RESULT 1 [sourcename: expected0]\n    ASSIGN 1 [sourcename: expected0]\n        GETPROP 1 [sourcename: expected0]\n            NAME a$b 1 [sourcename: expected0]\n            STRING c 1 [sourcename: expected0]\n        NUMBER 1.0 1 [sourcename: expected0]\n\n\nSubtree2: VAR 1 [sourcename: testcode]\n    NAME a$b$c 1 [sourcename: testcode] [originalname: a.b.c]\n        NUMBER 1.0 1 [sourcename: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:797)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:377)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:306)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:275)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:263)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testAliasCreatedForFunctionDepth2(CollapsePropertiesTest.java:313)  test(        \"var a = {}; a.b = function() {}; a.b.c = 1; var d = a.b;\" +        \"a.b.c != d.c;\",        \"var a$b = function() {}; a$b.c = 1; var d = a$b;\" +        \"a$b.c != d.c;\");",
                "failed_line": 313
            }
        }
    },
    "Closure_100": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
                "start_loc": 84,
                "end_loc": 128,
                "buggy_function": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (lhs.getType() == Token.GETPROP) {\n          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          String leftName = lhs.getQualifiedName();\n          if (leftName != null && leftName.contains(\".prototype.\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n",
                "fixed_function": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (lhs.getType() == Token.GETPROP) {\n          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          String leftName = lhs.getQualifiedName();\n          if (leftName != null && leftName.contains(\".prototype.\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n",
                "comment": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction6",
                    "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction7",
                    "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticMethod2",
                    "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticMethod3"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
                "start_loc": 139,
                "end_loc": 147,
                "buggy_function": "  private boolean shouldReportThis(Node n, Node parent) {\n    if (assignLhsChild != null) {\n      // Always report a THIS on the left side of an assign.\n      return true;\n    }\n\n    // Also report a THIS with a property access.\n    return false;\n  }\n",
                "fixed_function": "  private boolean shouldReportThis(Node n, Node parent) {\n    if (assignLhsChild != null) {\n      // Always report a THIS on the left side of an assign.\n      return true;\n    }\n\n    // Also report a THIS with a property access.\n    return parent != null && NodeUtil.isGet(parent);\n  }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction8",
                    "com.google.javascript.jscomp.CheckGlobalThisTest::testGlobalThis7",
                    "com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction1",
                    "com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction2",
                    "com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction3"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction6": {
                "path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
                "function_name": "testStaticFunction6",
                "src": "  public void testStaticFunction6() {\n    testSame(\"function a() { return function() { this = 8; } }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction6(CheckGlobalThisTest.java:88)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)  assertEquals(          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)  test(js, js);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction6(CheckGlobalThisTest.java:88)  testSame(\"function a() { return function() { this = 8; } }\");",
                "failed_line": 88
            },
            "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction7": {
                "path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
                "function_name": "testStaticFunction7",
                "src": "  public void testStaticFunction7() {\n    testSame(\"var a = function() { return function() { this = 8; } }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 41 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction7(CheckGlobalThisTest.java:92)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 41 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)  assertEquals(          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)  test(js, js);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction7(CheckGlobalThisTest.java:92)  testSame(\"var a = function() { return function() { this = 8; } }\");",
                "failed_line": 92
            },
            "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction8": {
                "path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
                "function_name": "testStaticFunction8",
                "src": "  public void testStaticFunction8() {\n    testFailure(\"var a = function() { return this.foo; };\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction8(CheckGlobalThisTest.java:96)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)  assertEquals(\"There should be one error. \" + errors,          1, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)  test(js, null, CheckGlobalThis.GLOBAL_THIS);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticFunction8(CheckGlobalThisTest.java:96)  testFailure(\"var a = function() { return this.foo; };\");",
                "failed_line": 96
            },
            "com.google.javascript.jscomp.CheckGlobalThisTest::testGlobalThis7": {
                "path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
                "function_name": "testGlobalThis7",
                "src": "  public void testGlobalThis7() {\n    testFailure(\"var a = this.foo;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testGlobalThis7(CheckGlobalThisTest.java:64)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)  assertEquals(\"There should be one error. \" + errors,          1, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)  test(js, null, CheckGlobalThis.GLOBAL_THIS);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testGlobalThis7(CheckGlobalThisTest.java:64)  testFailure(\"var a = this.foo;\");",
                "failed_line": 64
            },
            "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticMethod2": {
                "path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
                "function_name": "testStaticMethod2",
                "src": "  public void testStaticMethod2() {\n    testSame(\"a.b = function() { return function() { this.m2 = 5; } }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 39 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticMethod2(CheckGlobalThisTest.java:148)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 39 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)  assertEquals(          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)  test(js, js);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticMethod2(CheckGlobalThisTest.java:148)  testSame(\"a.b = function() { return function() { this.m2 = 5; } }\");",
                "failed_line": 148
            },
            "com.google.javascript.jscomp.CheckGlobalThisTest::testStaticMethod3": {
                "path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
                "function_name": "testStaticMethod3",
                "src": "  public void testStaticMethod3() {\n    testSame(\"a.b.c = function() { return function() { this.m2 = 5; } }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 41 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticMethod3(CheckGlobalThisTest.java:152)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 41 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:712)  assertEquals(          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:258)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:486)  test(js, js);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testStaticMethod3(CheckGlobalThisTest.java:152)  testSame(\"a.b.c = function() { return function() { this.m2 = 5; } }\");",
                "failed_line": 152
            },
            "com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction1": {
                "path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
                "function_name": "testInnerFunction1",
                "src": "  public void testInnerFunction1() {\n    testFailure(\"function f() { function g() { return this.x; } }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction1(CheckGlobalThisTest.java:171)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)  assertEquals(\"There should be one error. \" + errors,          1, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)  test(js, null, CheckGlobalThis.GLOBAL_THIS);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction1(CheckGlobalThisTest.java:171)  testFailure(\"function f() { function g() { return this.x; } }\");",
                "failed_line": 171
            },
            "com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction2": {
                "path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
                "function_name": "testInnerFunction2",
                "src": "  public void testInnerFunction2() {\n    testFailure(\"function f() { var g = function() { return this.x; } }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction2(CheckGlobalThisTest.java:175)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)  assertEquals(\"There should be one error. \" + errors,          1, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)  test(js, null, CheckGlobalThis.GLOBAL_THIS);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction2(CheckGlobalThisTest.java:175)  testFailure(\"function f() { var g = function() { return this.x; } }\");",
                "failed_line": 175
            },
            "com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction3": {
                "path": "test/com/google/javascript/jscomp/CheckGlobalThisTest.java",
                "function_name": "testInnerFunction3",
                "src": "  public void testInnerFunction3() {\n    testFailure(\n        \"function f() { var x = {}; x.y = function() { return this.x; } }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction3(CheckGlobalThisTest.java:179)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:817)  assertEquals(\"There should be one error. \" + errors,          1, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:301)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:270)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testFailure(CheckGlobalThisTest.java:36)  test(js, null, CheckGlobalThis.GLOBAL_THIS);\n\tat com.google.javascript.jscomp.CheckGlobalThisTest.testInnerFunction3(CheckGlobalThisTest.java:179)  testFailure(        \"function f() { var x = {}; x.y = function() { return this.x; } }\");",
                "failed_line": 179
            }
        }
    },
    "Closure_103": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
                "start_loc": 884,
                "end_loc": 904,
                "buggy_function": "  private static boolean mayThrowException(Node n) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.THROW:\n      case Token.NEW:\n      case Token.ASSIGN:\n      case Token.INC:\n      case Token.DEC:\n        return true;\n      case Token.FUNCTION:\n        return false;\n    }\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
                "fixed_function": "  private static boolean mayThrowException(Node n) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.THROW:\n      case Token.NEW:\n      case Token.ASSIGN:\n      case Token.INC:\n      case Token.DEC:\n      case Token.INSTANCEOF:\n        return true;\n      case Token.FUNCTION:\n        return false;\n    }\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
                "comment": "  /**\n   * Determines if the subtree might throw an exception.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.CheckUnreachableCodeTest::testInstanceOfThrowsException",
                    "com.google.javascript.jscomp.ControlFlowAnalysisTest::testInstanceOf"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
                "start_loc": 736,
                "end_loc": 767,
                "buggy_function": "    @Override public ObjectType getTypeWithProperty(String field, JSType type) {\n      if (!(type instanceof ObjectType)) {\n        if (type.autoboxesTo() != null) {\n          type = type.autoboxesTo();\n        } else {\n          return null;\n        }\n      }\n\n      // Ignore the prototype itself at all times.\n      if (\"prototype\".equals(field)) {\n        return null;\n      }\n\n      // We look up the prototype chain to find the highest place (if any) that\n      // this appears.  This will make references to overriden properties look\n      // like references to the initial property, so they are renamed alike.\n      ObjectType foundType = null;\n      ObjectType objType = ObjectType.cast(type);\n      while (objType != null && objType.getImplicitPrototype() != objType) {\n        if (objType.hasOwnProperty(field)) {\n          foundType = objType;\n        }\n        objType = objType.getImplicitPrototype();\n      }\n      // If the property does not exist on the referenced type but the original\n      // type is an object type, see if any subtype has the property.\n        // getGreatestSubtypeWithProperty does not guarantee that the property\n        // is defined on the returned type, it just indicates that it might be,\n        // so we have to double check.\n      return foundType;\n    }\n",
                "fixed_function": "    @Override public ObjectType getTypeWithProperty(String field, JSType type) {\n      if (!(type instanceof ObjectType)) {\n        if (type.autoboxesTo() != null) {\n          type = type.autoboxesTo();\n        } else {\n          return null;\n        }\n      }\n\n      // Ignore the prototype itself at all times.\n      if (\"prototype\".equals(field)) {\n        return null;\n      }\n\n      // We look up the prototype chain to find the highest place (if any) that\n      // this appears.  This will make references to overriden properties look\n      // like references to the initial property, so they are renamed alike.\n      ObjectType foundType = null;\n      ObjectType objType = ObjectType.cast(type);\n      while (objType != null && objType.getImplicitPrototype() != objType) {\n        if (objType.hasOwnProperty(field)) {\n          foundType = objType;\n        }\n        objType = objType.getImplicitPrototype();\n      }\n      // If the property does not exist on the referenced type but the original\n      // type is an object type, see if any subtype has the property.\n      if (foundType == null) {\n        ObjectType maybeType = ObjectType.cast(\n            registry.getGreatestSubtypeWithProperty(type, field));\n        // getGreatestSubtypeWithProperty does not guarantee that the property\n        // is defined on the returned type, it just indicates that it might be,\n        // so we have to double check.\n        if (maybeType != null && maybeType.hasOwnProperty(field)) {\n          foundType = maybeType;\n        }\n      }\n      return foundType;\n    }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.DisambiguatePropertiesTest::testSupertypeReferenceOfSubtypeProperty"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.CheckUnreachableCodeTest::testInstanceOfThrowsException": {
                "path": "test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java",
                "function_name": "testInstanceOfThrowsException",
                "src": "  public void testInstanceOfThrowsException() {\n    testSame(\"function f() {try { if (value instanceof type) return true; } \" +\n             \"catch (e) { }}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_UNREACHABLE_CODE. unreachable code at testcode line 1 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:688)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:278)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:247)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:235)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:462)\n\tat com.google.javascript.jscomp.CheckUnreachableCodeTest.testInstanceOfThrowsException(CheckUnreachableCodeTest.java:140)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_UNREACHABLE_CODE. unreachable code at testcode line 1 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:688)  assertEquals(          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:278)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:247)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:235)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:462)  test(js, js);\n\tat com.google.javascript.jscomp.CheckUnreachableCodeTest.testInstanceOfThrowsException(CheckUnreachableCodeTest.java:140)  testSame(\"function f() {try { if (value instanceof type) return true; } \" +             \"catch (e) { }}\");",
                "failed_line": 140
            },
            "com.google.javascript.jscomp.ControlFlowAnalysisTest::testInstanceOf": {
                "path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
                "function_name": "testInstanceOf",
                "src": "  public void testInstanceOf() {\n    String src = \"try { x instanceof 'x' } catch (e) { }\";\n    ControlFlowGraph<Node> cfg = createCfg(src, true);\n    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.ON_EX);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: No cross edges found\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n\tat com.google.javascript.jscomp.ControlFlowAnalysisTest.assertCrossEdge(ControlFlowAnalysisTest.java:178)\n\tat com.google.javascript.jscomp.ControlFlowAnalysisTest.testInstanceOf(ControlFlowAnalysisTest.java:1246)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: No cross edges found\n\tat com.google.javascript.jscomp.ControlFlowAnalysisTest.assertCrossEdge(ControlFlowAnalysisTest.java:178)  assertTrue(\"No cross edges found\", numDownEdges + numUpEdges < numEdges);\n\tat com.google.javascript.jscomp.ControlFlowAnalysisTest.testInstanceOf(ControlFlowAnalysisTest.java:1246)  assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.ON_EX);",
                "failed_line": 1246
            },
            "com.google.javascript.jscomp.DisambiguatePropertiesTest::testSupertypeReferenceOfSubtypeProperty": {
                "path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
                "function_name": "testSupertypeReferenceOfSubtypeProperty",
                "src": "  public void testSupertypeReferenceOfSubtypeProperty() {\n    String externs = \"\"\n        + \"/** @constructor */ function Ext() {}\"\n        + \"Ext.prototype.a;\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"/** @constructor \\n@extends Foo*/ function Bar() {}\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"/** @param {Foo} foo */\"\n        + \"function foo(foo) {\\n\"\n        + \"  var x = foo.a;\\n\"\n        + \"}\\n\";\n    String result = \"\"\n        + \"function Foo() {}\\n\"\n        + \"function Bar() {}\\n\"\n        + \"Bar.prototype.Bar_prototype$a;\\n\"\n        + \"function foo(foo) {\\n\"\n        + \"  var x = foo.Bar_prototype$a;\\n\"\n        + \"}\\n\";\n    testSets(false, externs, js, result, \"{a=[[Bar.prototype]]}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function Foo(){}function Bar(){}Bar.prototype.Bar_prototype$a;function foo(foo){var x=foo.Bar_prototype$a}\nResult: function Foo(){}function Bar(){}Bar.prototype.a;function foo(foo){var x=foo.a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION Foo 1 [sourcename: expected0]\n            NAME Foo 1\n            LP 1\n            BLOCK 1\n        FUNCTION Bar 2 [sourcename: expected0]\n            NAME Bar 2\n            LP 2\n            BLOCK 2\n        EXPR_RESULT 3\n            GETPROP 3\n                GETPROP 3\n                    NAME Bar 3\n                    STRING prototype 3\n                STRING Bar_prototype$a 3\n        FUNCTION foo 4 [sourcename: expected0]\n            NAME foo 4\n            LP 4\n                NAME foo 4\n            BLOCK 4\n                VAR 5\n                    NAME x 5\n                        GETPROP 5\n                            NAME foo 5\n                            STRING Bar_prototype$a 5\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION Foo 1 [sourcename: testcode] [jsdoc_info: JSDocInfo] : function (this:Foo): ?\n            NAME Foo 1 : function (this:Foo): ?\n            LP 1\n            BLOCK 1\n        FUNCTION Bar 3 [sourcename: testcode] [jsdoc_info: JSDocInfo] : function (this:Bar): ?\n            NAME Bar 3 : function (this:Bar): ?\n            LP 3\n            BLOCK 3\n        EXPR_RESULT 4\n            GETPROP 4 : ?\n                GETPROP 4 : Bar.prototype\n                    NAME Bar 4 : function (this:Bar): ?\n                    STRING prototype 4 : string\n                STRING a 4 : string\n        FUNCTION foo 5 [sourcename: testcode] [jsdoc_info: JSDocInfo] : function ((Foo|null)): ?\n            NAME foo 5 : function ((Foo|null)): ?\n            LP 5\n                NAME foo 5\n            BLOCK 5\n                VAR 6\n                    NAME x 6 : ?\n                        GETPROP 6 : ?\n                            NAME foo 6 : (Foo|null)\n                            STRING a 6 : string\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:758)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(DisambiguatePropertiesTest.java:964)\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(DisambiguatePropertiesTest.java:956)\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testSupertypeReferenceOfSubtypeProperty(DisambiguatePropertiesTest.java:606)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function Foo(){}function Bar(){}Bar.prototype.Bar_prototype$a;function foo(foo){var x=foo.Bar_prototype$a}\nResult: function Foo(){}function Bar(){}Bar.prototype.a;function foo(foo){var x=foo.a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        FUNCTION Foo 1 [sourcename: expected0]\n            NAME Foo 1\n            LP 1\n            BLOCK 1\n        FUNCTION Bar 2 [sourcename: expected0]\n            NAME Bar 2\n            LP 2\n            BLOCK 2\n        EXPR_RESULT 3\n            GETPROP 3\n                GETPROP 3\n                    NAME Bar 3\n                    STRING prototype 3\n                STRING Bar_prototype$a 3\n        FUNCTION foo 4 [sourcename: expected0]\n            NAME foo 4\n            LP 4\n                NAME foo 4\n            BLOCK 4\n                VAR 5\n                    NAME x 5\n                        GETPROP 5\n                            NAME foo 5\n                            STRING Bar_prototype$a 5\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        FUNCTION Foo 1 [sourcename: testcode] [jsdoc_info: JSDocInfo] : function (this:Foo): ?\n            NAME Foo 1 : function (this:Foo): ?\n            LP 1\n            BLOCK 1\n        FUNCTION Bar 3 [sourcename: testcode] [jsdoc_info: JSDocInfo] : function (this:Bar): ?\n            NAME Bar 3 : function (this:Bar): ?\n            LP 3\n            BLOCK 3\n        EXPR_RESULT 4\n            GETPROP 4 : ?\n                GETPROP 4 : Bar.prototype\n                    NAME Bar 4 : function (this:Bar): ?\n                    STRING prototype 4 : string\n                STRING a 4 : string\n        FUNCTION foo 5 [sourcename: testcode] [jsdoc_info: JSDocInfo] : function ((Foo|null)): ?\n            NAME foo 5 : function ((Foo|null)): ?\n            LP 5\n                NAME foo 5\n            BLOCK 5\n                VAR 6\n                    NAME x 6 : ?\n                        GETPROP 6 : ?\n                            NAME foo 6 : (Foo|null)\n                            STRING a 6 : string\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:758)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(externsInputs, js, expected, error, warning, description);\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(DisambiguatePropertiesTest.java:964)  test(externs, js, expected, null, warning, description);\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(DisambiguatePropertiesTest.java:956)  testSets(runTightenTypes, externs, js, expected, fieldTypes, null, null);\n\tat com.google.javascript.jscomp.DisambiguatePropertiesTest.testSupertypeReferenceOfSubtypeProperty(DisambiguatePropertiesTest.java:606)  testSets(false, externs, js, result, \"{a=[[Bar.prototype]]}\");",
                "failed_line": 606
            }
        }
    },
    "Closure_106": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
                "start_loc": 899,
                "end_loc": 913,
                "buggy_function": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n\n      if (isClassOrEnum) {\n        return true;\n      }\n      return (type == Type.FUNCTION || aliasingGets == 0) &&\n          (parent == null || parent.canCollapseUnannotatedChildNames());\n    }\n",
                "fixed_function": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n      return (type == Type.FUNCTION || aliasingGets == 0) &&\n          (parent == null || parent.canCollapseUnannotatedChildNames());\n    }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testTwinReferenceCancelsChildCollapsing",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInNestedAssign",
                    "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInCommaOperator"
                ]
            },
            {
                "path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
                "start_loc": 188,
                "end_loc": 193,
                "buggy_function": "  public boolean recordBlockDescription(String description) {\n    if (parseDocumentation) {\n    populated = true;\n    }\n    return currentInfo.documentBlock(description);\n  }\n",
                "fixed_function": "  public boolean recordBlockDescription(String description) {\n    populated = true;\n    return currentInfo.documentBlock(description);\n  }\n",
                "comment": "  /**\n   * Records a block-level description.\n   *\n   * @return {@code true} if the description was recorded.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments": {
                "path": "test/com/google/javascript/jscomp/CheckSideEffectsTest.java",
                "function_name": "testJSDocComments",
                "src": "  public void testJSDocComments() {\n    test(\"function A() { /** This is a jsdoc comment */ this.foo; }\", ok);\n    test(\"function A() { /* This is a normal comment */ this.foo; }\", e);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USELESS_CODE. Suspicious code. This code lacks side-effects. Is there a bug? at testcode line 1 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:659)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.test(CheckSideEffectsTest.java:33)\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.testJSDocComments(CheckSideEffectsTest.java:86)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USELESS_CODE. Suspicious code. This code lacks side-effects. Is there a bug? at testcode line 1 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:659)  assertEquals(          \"Unexpected error(s): \" + Join.join(\"\\n\", compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.test(CheckSideEffectsTest.java:33)  test(js, error == null ? js : null, error);\n\tat com.google.javascript.jscomp.CheckSideEffectsTest.testJSDocComments(CheckSideEffectsTest.java:86)  test(\"function A() { /** This is a jsdoc comment */ this.foo; }\", ok);",
                "failed_line": 86
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testTwinReferenceCancelsChildCollapsing": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testTwinReferenceCancelsChildCollapsing",
                "src": "  public void testTwinReferenceCancelsChildCollapsing() {\n    test(\"var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }\",\n         \"var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){}){a$b.c=3;a$b(a$b.c)}\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    ASSIGN 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n                        NUMBER 3.0 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testTwinReferenceCancelsChildCollapsing(CollapsePropertiesTest.java:1111)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){}){a$b.c=3;a$b(a$b.c)}\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    ASSIGN 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n                        NUMBER 3.0 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n                        GETPROP 1\n                            NAME a$b 1\n                            STRING c 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testTwinReferenceCancelsChildCollapsing(CollapsePropertiesTest.java:1111)  test(\"var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }\",         \"var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }\");",
                "failed_line": 1111
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInNestedAssign": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testCrashInNestedAssign",
                "src": "  public void testCrashInNestedAssign() {\n    test(\"var a = {}; if (a.b = function() {}) a.b();\",\n         \"var a$b; if (a$b=function() {}) { a$b(); }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){})a$b()\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInNestedAssign(CollapsePropertiesTest.java:1106)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$b;if(a$b=function(){})a$b()\nResult: var a$b=function(){}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n        VAR 1\n            NAME a$b 1\n        IF 1\n            ASSIGN 1\n                NAME a$b 1\n                FUNCTION  1 [sourcename: expected0]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n            BLOCK 1\n                EXPR_RESULT 1\n                    CALL 1\n                        NAME a$b 1\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        VAR 1\n            NAME a$b 1 [originalname: a.b]\n                FUNCTION  1 [sourcename: testcode]\n                    NAME  1\n                    LP 1\n                    BLOCK 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:720)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInNestedAssign(CollapsePropertiesTest.java:1106)  test(\"var a = {}; if (a.b = function() {}) a.b();\",         \"var a$b; if (a$b=function() {}) { a$b(); }\");",
                "failed_line": 1106
            },
            "com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInCommaOperator": {
                "path": "test/com/google/javascript/jscomp/CollapsePropertiesTest.java",
                "function_name": "testCrashInCommaOperator",
                "src": "  public void testCrashInCommaOperator() {\n    test(\"var a = {}; a.b = function() {},a.b();\",\n         \"var a$b; a$b=function() {},a$b();\");\n  }",
                "stack_trace": "java.lang.IllegalArgumentException\n\tat com.google.common.base.Preconditions.checkArgument(Preconditions.java:71)\n\tat com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties(CollapseProperties.java:813)\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(CollapseProperties.java:617)\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(CollapseProperties.java:550)\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:445)\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:451)\n\tat com.google.javascript.jscomp.CollapseProperties.process(CollapseProperties.java:143)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:644)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInCommaOperator(CollapsePropertiesTest.java:1101)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.IllegalArgumentException\n\tat com.google.javascript.jscomp.CollapseProperties.addStubsForUndeclaredProperties(CollapseProperties.java:813)  Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclarationAtAssignNode(CollapseProperties.java:617)  addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n\tat com.google.javascript.jscomp.CollapseProperties.updateObjLitOrFunctionDeclaration(CollapseProperties.java:550)  updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:445)  updateObjLitOrFunctionDeclaration(n, alias);\n\tat com.google.javascript.jscomp.CollapseProperties.collapseDeclarationOfNameAndDescendants(CollapseProperties.java:451)  collapseDeclarationOfNameAndDescendants(p, alias + '$' + p.name);\n\tat com.google.javascript.jscomp.CollapseProperties.process(CollapseProperties.java:143)  collapseDeclarationOfNameAndDescendants(n, n.name);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:644)  getProcessor(compiler).process(externsRoot, mainRoot);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:326)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:256)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:225)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:213)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.CollapsePropertiesTest.testCrashInCommaOperator(CollapsePropertiesTest.java:1101)  test(\"var a = {}; a.b = function() {},a.b();\",         \"var a$b; a$b=function() {},a$b();\");",
                "failed_line": 1101
            }
        }
    },
    "Closure_110": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
                "start_loc": 352,
                "end_loc": 422,
                "buggy_function": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        boolean isVar = parent.isVar();\n        if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n          recordAlias(v);\n        } else if (v.isBleedingFunction()) {\n          // Bleeding functions already get a BAD_PARAMETERS error, so just\n          // do nothing.\n        } else if (parent.getType() == Token.LP) {\n          // Parameters of the scope function also get a BAD_PARAMETERS\n          // error.\n        } else if (isVar) {\n          Node grandparent = parent.getParent();\n          Node value = n.hasChildren() ?\n              v.getInitialValue().detachFromParent() :\n              null;\n          Node varNode = parent;\n\n          String name = n.getString();\n          int nameCount = scopedAliasNames.count(name);\n          scopedAliasNames.add(name);\n          String globalName =\n              \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));\n\n          compiler.ensureLibraryInjected(\"base\");\n\n          // First, we need to free up the function expression (EXPR)\n          // to be used in another expression.\n            // Replace \"function NAME() { ... }\" with \"var NAME;\".\n\n            // We can't keep the local name on the function expression,\n            // because IE is buggy and will leak the name into the global\n            // scope. This is covered in more detail here:\n            // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf\n            //\n            // This will only cause problems if this is a hoisted, recursive\n            // function, and the programmer is using the hoisting.\n\n              // If this is a VAR, we can just detach the expression and\n              // the tree will still be valid.\n\n          // Add $jscomp.scope.name = EXPR;\n          // Make sure we copy over all the jsdoc and debug info.\n          if (value != null || v.getJSDocInfo() != null) {\n            Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n                compiler.getCodingConvention(),\n                globalName,\n                value,\n                v.getJSDocInfo())\n                .useSourceInfoIfMissingFromForTree(n);\n            NodeUtil.setDebugInformation(\n                newDecl.getFirstChild().getFirstChild(), n, name);\n\n              grandparent.addChildBefore(newDecl, varNode);\n          }\n\n          // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n          v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, n, name));\n\n          recordAlias(v);\n        } else {\n          // Do not other kinds of local symbols, like catch params.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }\n",
                "fixed_function": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        boolean isVar = parent.isVar();\n        boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);\n        if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n          recordAlias(v);\n        } else if (v.isBleedingFunction()) {\n          // Bleeding functions already get a BAD_PARAMETERS error, so just\n          // do nothing.\n        } else if (parent.getType() == Token.LP) {\n          // Parameters of the scope function also get a BAD_PARAMETERS\n          // error.\n        } else if (isVar || isFunctionDecl) {\n          boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);\n          Node grandparent = parent.getParent();\n          Node value = v.getInitialValue() != null ?\n              v.getInitialValue() :\n              null;\n          Node varNode = null;\n\n          String name = n.getString();\n          int nameCount = scopedAliasNames.count(name);\n          scopedAliasNames.add(name);\n          String globalName =\n              \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));\n\n          compiler.ensureLibraryInjected(\"base\");\n\n          // First, we need to free up the function expression (EXPR)\n          // to be used in another expression.\n          if (isFunctionDecl) {\n            // Replace \"function NAME() { ... }\" with \"var NAME;\".\n            Node existingName = v.getNameNode();\n\n            // We can't keep the local name on the function expression,\n            // because IE is buggy and will leak the name into the global\n            // scope. This is covered in more detail here:\n            // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf\n            //\n            // This will only cause problems if this is a hoisted, recursive\n            // function, and the programmer is using the hoisting.\n            Node newName = IR.name(\"\").useSourceInfoFrom(existingName);\n            value.replaceChild(existingName, newName);\n\n            varNode = IR.var(existingName).useSourceInfoFrom(existingName);\n            grandparent.replaceChild(parent, varNode);\n          } else {\n            if (value != null) {\n              // If this is a VAR, we can just detach the expression and\n              // the tree will still be valid.\n              value.detachFromParent();\n            }\n            varNode = parent;\n          }\n\n          // Add $jscomp.scope.name = EXPR;\n          // Make sure we copy over all the jsdoc and debug info.\n          if (value != null || v.getJSDocInfo() != null) {\n            Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n                compiler.getCodingConvention(),\n                globalName,\n                value,\n                v.getJSDocInfo())\n                .useSourceInfoIfMissingFromForTree(n);\n            NodeUtil.setDebugInformation(\n                newDecl.getFirstChild().getFirstChild(), n, name);\n\n            if (isHoisted) {\n              grandparent.addChildToFront(newDecl);\n            } else {\n              grandparent.addChildBefore(newDecl, varNode);\n            }\n          }\n\n          // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n          v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, n, name));\n\n          recordAlias(v);\n        } else {\n          // Do not other kinds of local symbols, like catch params.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.ScopedAliasesTest::testHoistedFunctionDeclaration",
                    "com.google.javascript.jscomp.ScopedAliasesTest::testFunctionDeclaration"
                ]
            },
            {
                "path": "src/com/google/javascript/rhino/Node.java",
                "start_loc": 549,
                "end_loc": 562,
                "buggy_function": "  public Node getChildBefore(Node child) {\n    if (child == first) {\n      return null;\n    }\n    Node n = first;\n\n    while (n.next != child) {\n      n = n.next;\n      if (n == null) {\n        throw new RuntimeException(\"node is not a child\");\n      }\n    }\n    return n;\n  }\n",
                "fixed_function": "  public Node getChildBefore(Node child) {\n    if (child == first) {\n      return null;\n    }\n    Node n = first;\n    if (n == null) {\n      throw new RuntimeException(\"node is not a child\");\n    }\n\n    while (n.next != child) {\n      n = n.next;\n      if (n == null) {\n        throw new RuntimeException(\"node is not a child\");\n      }\n    }\n    return n;\n  }\n",
                "comment": "",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.ScopedAliasesTest::testHoistedFunctionDeclaration": {
                "path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
                "function_name": "testHoistedFunctionDeclaration",
                "src": "  public void testHoistedFunctionDeclaration() {\n    testScoped(\" g(f); function f() {} \",\n               SCOPE_NAMESPACE +\n               \" $jscomp.scope.f = function () {}; \" +\n               \"g($jscomp.scope.f); \");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable f is in a goog.scope and is not an alias. at testcode line 1 : 39 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:871)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testScoped(ScopedAliasesTest.java:55)\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testHoistedFunctionDeclaration(ScopedAliasesTest.java:522)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable f is in a goog.scope and is not an alias. at testcode line 1 : 39 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:871)  assertEquals(          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)  test(compiler, maybeCreateArray(expected), error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testScoped(ScopedAliasesTest.java:55)  test(GOOG_SCOPE_START_BLOCK + code + GOOG_SCOPE_END_BLOCK, expected);\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testHoistedFunctionDeclaration(ScopedAliasesTest.java:522)  testScoped(\" g(f); function f() {} \",               SCOPE_NAMESPACE +               \" $jscomp.scope.f = function () {}; \" +               \"g($jscomp.scope.f); \");",
                "failed_line": 522
            },
            "com.google.javascript.jscomp.ScopedAliasesTest::testFunctionDeclaration": {
                "path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
                "function_name": "testFunctionDeclaration",
                "src": "  public void testFunctionDeclaration() {\n    testScoped(\"if (x) { function f() {} } g(f)\",\n               SCOPE_NAMESPACE +\n               \"if (x) { $jscomp.scope.f = function () {}; } \" +\n               \"g($jscomp.scope.f); \");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable f is in a goog.scope and is not an alias. at testcode line 1 : 41 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:871)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testScoped(ScopedAliasesTest.java:55)\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testFunctionDeclaration(ScopedAliasesTest.java:515)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable f is in a goog.scope and is not an alias. at testcode line 1 : 41 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:871)  assertEquals(          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)  test(compiler, maybeCreateArray(expected), error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testScoped(ScopedAliasesTest.java:55)  test(GOOG_SCOPE_START_BLOCK + code + GOOG_SCOPE_END_BLOCK, expected);\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testFunctionDeclaration(ScopedAliasesTest.java:515)  testScoped(\"if (x) { function f() {} } g(f)\",               SCOPE_NAMESPACE +               \"if (x) { $jscomp.scope.f = function () {}; } \" +               \"g($jscomp.scope.f); \");",
                "failed_line": 515
            }
        }
    },
    "Closure_141": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/NodeUtil.java",
                "start_loc": 584,
                "end_loc": 613,
                "buggy_function": "  static boolean canBeSideEffected(Node n, Set<String> knownConstants) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !NodeUtil.isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n        // Anonymous functions definitions are not changed by side-effects,\n        // and named functions are not part of expressions.\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (canBeSideEffected(c, knownConstants)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
                "fixed_function": "  static boolean canBeSideEffected(Node n, Set<String> knownConstants) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !NodeUtil.isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Anonymous functions definitions are not changed by side-effects,\n        // and named functions are not part of expressions.\n        Preconditions.checkState(NodeUtil.isAnonymousFunction(n));\n        return false;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (canBeSideEffected(c, knownConstants)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
                "comment": "  /**\n   * @param knownConstants A set of names known to be constant value at\n   * node 'n' (such as locals that are last written before n can execute).\n   * @return Whether the tree can be affected by side-effects or\n   * has side-effects.\n   */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
                "start_loc": 175,
                "end_loc": 198,
                "buggy_function": "  private static Collection<Definition> getCallableDefinitions(\n      DefinitionProvider definitionProvider, Node name) {\n      List<Definition> result = Lists.newArrayList();\n\n      if (!NodeUtil.isGetProp(name) && !NodeUtil.isName(name)) {\n        return null;\n      }\n      Collection<Definition> decls =\n          definitionProvider.getDefinitionsReferencedAt(name);\n      if (decls == null) {\n        return null;\n      }\n\n      for (Definition current : decls) {\n        Node rValue = current.getRValue();\n        if ((rValue != null) && NodeUtil.isFunction(rValue)) {\n          result.add(current);\n        } else {\n          return null;\n        }\n      }\n\n      return result;\n  }\n",
                "fixed_function": "  private static Collection<Definition> getCallableDefinitions(\n      DefinitionProvider definitionProvider, Node name) {\n    if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {\n      List<Definition> result = Lists.newArrayList();\n\n      Collection<Definition> decls =\n          definitionProvider.getDefinitionsReferencedAt(name);\n      if (decls == null) {\n        return null;\n      }\n\n      for (Definition current : decls) {\n        Node rValue = current.getRValue();\n        if ((rValue != null) && NodeUtil.isFunction(rValue)) {\n          result.add(current);\n        } else {\n          return null;\n        }\n      }\n\n      return result;\n    } else if (name.getType() == Token.OR || name.getType() == Token.HOOK) {\n      Node firstVal;\n      if (name.getType() == Token.HOOK) {\n        firstVal = name.getFirstChild().getNext();\n      } else {\n        firstVal = name.getFirstChild();\n      }\n\n      Collection<Definition> defs1 = getCallableDefinitions(definitionProvider,\n                                                            firstVal);\n      Collection<Definition> defs2 = getCallableDefinitions(definitionProvider,\n                                                            firstVal.getNext());\n      if (defs1 != null && defs2 != null) {\n        defs1.addAll(defs2);\n        return defs1;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n",
                "comment": "  /**\n   * Query the DefinitionProvider for the list of definitions that\n   * correspond to a given qualified name subtree.  Return null if\n   * DefinitionProvider does not contain an entry for a given name,\n   * one or more of the values returned by getDeclarations is not\n   * callable, or the \"name\" node is not a GETPROP or NAME.\n   *\n   * @param definitionProvider The name reference graph\n   * @param name Query node\n   * @return non-empty definition list or null\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHookWithSideEffects",
                    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionForGorH",
                    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrG",
                    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHook",
                    "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGWithSideEffects"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression2": {
                "path": "test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java",
                "function_name": "testCanExposeExpression2",
                "src": "  public void testCanExposeExpression2() {\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");\n\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<MOVABLE> but was:<DECOMPOSABLE>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.helperCanExposeExpression(ExpresssionDecomposerTest.java:388)\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.helperCanExposeExpression(ExpresssionDecomposerTest.java:334)\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.testCanExposeExpression2(ExpresssionDecomposerTest.java:85)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<MOVABLE> but was:<DECOMPOSABLE>\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.helperCanExposeExpression(ExpresssionDecomposerTest.java:388)  assertEquals(expectedResult, result);\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.helperCanExposeExpression(ExpresssionDecomposerTest.java:334)  helperCanExposeExpression(expectedResult, code, fnName, null);\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.testCanExposeExpression2(ExpresssionDecomposerTest.java:85)  helperCanExposeExpression(        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");",
                "failed_line": 85
            },
            "com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression7": {
                "path": "test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java",
                "function_name": "testCanExposeExpression7",
                "src": "  public void testCanExposeExpression7() {\n    // Verify calls to anonymous function are movable.\n    helperCanExposeAnonymousFunctionExpression(\n        DecompositionType.MOVABLE,\n        \"(function(map){descriptions_=map})(\\n\" +\n            \"function(){\\n\" +\n                \"var ret={};\\n\" +\n                \"ret[INIT]='a';\\n\" +\n                \"ret[MIGRATION_BANNER_DISMISS]='b';\\n\" +\n                \"return ret\\n\" +\n            \"}()\\n\" +\n        \");\", 2);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<MOVABLE> but was:<DECOMPOSABLE>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.helperCanExposeAnonymousFunctionExpression(ExpresssionDecomposerTest.java:358)\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.testCanExposeExpression7(ExpresssionDecomposerTest.java:138)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<MOVABLE> but was:<DECOMPOSABLE>\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.helperCanExposeAnonymousFunctionExpression(ExpresssionDecomposerTest.java:358)  assertEquals(expectedResult, result);\n\tat com.google.javascript.jscomp.ExpresssionDecomposerTest.testCanExposeExpression7(ExpresssionDecomposerTest.java:138)  helperCanExposeAnonymousFunctionExpression(        DecompositionType.MOVABLE,        \"(function(map){descriptions_=map})(\\n\" +            \"function(){\\n\" +                \"var ret={};\\n\" +                \"ret[INIT]='a';\\n\" +                \"ret[MIGRATION_BANNER_DISMISS]='b';\\n\" +                \"return ret\\n\" +            \"}()\\n\" +        \");\", 2);",
                "failed_line": 138
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeAnonymousInCall": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testDecomposeAnonymousInCall",
                "src": "  public void testDecomposeAnonymousInCall() {\n    test(\n        \"(function(map){descriptions_=map})(\\n\" +\n           \"function(){\\n\" +\n              \"var ret={};\\n\" +\n              \"ret[ONE]='a';\\n\" +\n              \"ret[TWO]='b';\\n\" +\n              \"return ret\\n\" +\n           \"}()\\n\" +\n        \");\",\n        \"{\" +\n        \"var JSCompiler_inline_result_0;\" +\n        \"var ret$$inline_2={};\\n\" +\n        \"ret$$inline_2[ONE]='a';\\n\" +\n        \"ret$$inline_2[TWO]='b';\\n\" +\n        \"JSCompiler_inline_result_0 = ret$$inline_2;\\n\" +\n        \"}\" +\n        \"{\" +\n        \"descriptions_=JSCompiler_inline_result_0;\" +\n        \"}\"\n        );\n  }",
                "stack_trace": "java.lang.IllegalStateException: Call site missed.\n\tat com.google.javascript.jscomp.InlineFunctions.verifyAllReferencesInlined(InlineFunctions.java:754)\n\tat com.google.javascript.jscomp.InlineFunctions.removeInlinedFunctions(InlineFunctions.java:740)\n\tat com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:143)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:694)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:302)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:271)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:259)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testDecomposeAnonymousInCall(InlineFunctionsTest.java:1337)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.IllegalStateException: Call site missed.\n\tat com.google.javascript.jscomp.InlineFunctions.verifyAllReferencesInlined(InlineFunctions.java:754)  throw new IllegalStateException(\"Call site missed.\");\n\tat com.google.javascript.jscomp.InlineFunctions.removeInlinedFunctions(InlineFunctions.java:740)  verifyAllReferencesInlined(fs);\n\tat com.google.javascript.jscomp.InlineFunctions.process(InlineFunctions.java:143)  removeInlinedFunctions();\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:694)  getProcessor(compiler).process(externsRoot, mainRoot);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:302)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:271)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:259)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testDecomposeAnonymousInCall(InlineFunctionsTest.java:1337)  test(        \"(function(map){descriptions_=map})(\\n\" +           \"function(){\\n\" +              \"var ret={};\\n\" +              \"ret[ONE]='a';\\n\" +              \"ret[TWO]='b';\\n\" +              \"return ret\\n\" +           \"}()\\n\" +        \");\",        \"{\" +        \"var JSCompiler_inline_result_0;\" +        \"var ret$$inline_2={};\\n\" +        \"ret$$inline_2[ONE]='a';\\n\" +        \"ret$$inline_2[TWO]='b';\\n\" +        \"JSCompiler_inline_result_0 = ret$$inline_2;\\n\" +        \"}\" +        \"{\" +        \"descriptions_=JSCompiler_inline_result_0;\" +        \"}\"        );",
                "failed_line": 1337
            },
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHookWithSideEffects": {
                "path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
                "function_name": "testCallFunctionFOrGViaHookWithSideEffects",
                "src": "  public void testCallFunctionFOrGViaHookWithSideEffects() throws Exception {\n    String source = \"var x = 0;\\n\" +\n        \"function f(){x = 10}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){ (false ? f : g)() }\\n\" +\n        \"function i(){ (false ? g : f)() }\\n\" +\n        \"function j(){ (false ? f : f)() }\\n\" +\n        \"function k(){ (false ? g : g)() }\\n\" +\n        \"h(); i(); j(); k()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(g : g)\", \"k\"));\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<[(g : g), k]> but was:<[]>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrGViaHookWithSideEffects(PureFunctionIdentifierTest.java:654)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<[(g : g), k]> but was:<[]>\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)  assertEquals(expected, noSideEffectCalls);\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrGViaHookWithSideEffects(PureFunctionIdentifierTest.java:654)  checkMarkedCalls(source, ImmutableList.<String>of(\"(g : g)\", \"k\"));",
                "failed_line": 654
            },
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionForGorH": {
                "path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
                "function_name": "testCallFunctionForGorH",
                "src": "  public void testCallFunctionForGorH() throws Exception {\n    String source = \"function f(){}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){}\\n\" +\n        \"function i(){ (false ? f : (g || h))() }\\n\" +\n        \"i()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(f : (g || h))\", \"i\"));\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<[(f : (g || h)), i]> but was:<[]>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionForGorH(PureFunctionIdentifierTest.java:628)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<[(f : (g || h)), i]> but was:<[]>\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)  assertEquals(expected, noSideEffectCalls);\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionForGorH(PureFunctionIdentifierTest.java:628)  checkMarkedCalls(source, ImmutableList.<String>of(\"(f : (g || h))\", \"i\"));",
                "failed_line": 628
            },
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrG": {
                "path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
                "function_name": "testCallFunctionFOrG",
                "src": "  public void testCallFunctionFOrG() throws Exception {\n    String source = \"function f(){}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){ (f || g)() }\\n\" +\n        \"h()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(f || g)\", \"h\"));\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<[(f || g), h]> but was:<[]>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrG(PureFunctionIdentifierTest.java:609)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<[(f || g), h]> but was:<[]>\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)  assertEquals(expected, noSideEffectCalls);\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrG(PureFunctionIdentifierTest.java:609)  checkMarkedCalls(source, ImmutableList.<String>of(\"(f || g)\", \"h\"));",
                "failed_line": 609
            },
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHook": {
                "path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
                "function_name": "testCallFunctionFOrGViaHook",
                "src": "  public void testCallFunctionFOrGViaHook() throws Exception {\n    String source = \"function f(){}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){ (false ? f : g)() }\\n\" +\n        \"h()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(f : g)\", \"h\"));\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<[(f : g), h]> but was:<[]>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrGViaHook(PureFunctionIdentifierTest.java:618)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<[(f : g), h]> but was:<[]>\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)  assertEquals(expected, noSideEffectCalls);\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrGViaHook(PureFunctionIdentifierTest.java:618)  checkMarkedCalls(source, ImmutableList.<String>of(\"(f : g)\", \"h\"));",
                "failed_line": 618
            },
            "com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGWithSideEffects": {
                "path": "test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java",
                "function_name": "testCallFunctionFOrGWithSideEffects",
                "src": "  public void testCallFunctionFOrGWithSideEffects() throws Exception {\n    String source = \"var x = 0;\\n\" +\n        \"function f(){x = 10}\\n\" +\n        \"function g(){}\\n\" +\n        \"function h(){ (f || g)() }\\n\" +\n        \"function i(){ (g || f)() }\\n\" +\n        \"function j(){ (f || f)() }\\n\" +\n        \"function k(){ (g || g)() }\\n\" +\n        \"h(); i(); j(); k()\";\n\n    checkMarkedCalls(source, ImmutableList.<String>of(\"(g || g)\", \"k\"));\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<[(g || g), k]> but was:<[]>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrGWithSideEffects(PureFunctionIdentifierTest.java:641)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<[(g || g), k]> but was:<[]>\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.checkMarkedCalls(PureFunctionIdentifierTest.java:686)  assertEquals(expected, noSideEffectCalls);\n\tat com.google.javascript.jscomp.PureFunctionIdentifierTest.testCallFunctionFOrGWithSideEffects(PureFunctionIdentifierTest.java:641)  checkMarkedCalls(source, ImmutableList.<String>of(\"(g || g)\", \"k\"));",
                "failed_line": 641
            }
        }
    },
    "Closure_143": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
                "start_loc": 847,
                "end_loc": 895,
                "buggy_function": "  @VisibleForTesting\n  static void createDefineReplacements(List<String> definitions,\n      CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n      String[] assignment = override.split(\"=\", 2);\n      String defName = assignment[0];\n\n      if (defName.length() > 0) {\n        if (assignment.length == 1) {\n          options.setDefineToBooleanLiteral(defName, true);\n          continue;\n        } else {\n          String defValue = assignment[1];\n\n          if (defValue.equals(\"true\")) {\n            options.setDefineToBooleanLiteral(defName, true);\n            continue;\n          } else if (defValue.equals(\"false\")) {\n            options.setDefineToBooleanLiteral(defName, false);\n            continue;\n          } else if (defValue.length() > 1\n              && ((defValue.charAt(0) == '\\'' &&\n                  defValue.charAt(defValue.length() - 1) == '\\'')\n            )) {\n            // If the value starts and ends with a single quote,\n            // we assume that it's a string.\n            String maybeStringVal =\n                defValue.substring(1, defValue.length() - 1);\n            if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n              options.setDefineToStringLiteral(defName, maybeStringVal);\n              continue;\n            }\n          } else {\n            try {\n              options.setDefineToDoubleLiteral(defName,\n                  Double.parseDouble(defValue));\n              continue;\n            } catch (NumberFormatException e) {\n              // do nothing, it will be caught at the end\n            }\n          }\n        }\n      }\n\n      throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);\n    }\n  }\n",
                "fixed_function": "  @VisibleForTesting\n  static void createDefineReplacements(List<String> definitions,\n      CompilerOptions options) {\n    // Parse the definitions\n    for (String override : definitions) {\n      String[] assignment = override.split(\"=\", 2);\n      String defName = assignment[0];\n\n      if (defName.length() > 0) {\n        if (assignment.length == 1) {\n          options.setDefineToBooleanLiteral(defName, true);\n          continue;\n        } else {\n          String defValue = assignment[1];\n\n          if (defValue.equals(\"true\")) {\n            options.setDefineToBooleanLiteral(defName, true);\n            continue;\n          } else if (defValue.equals(\"false\")) {\n            options.setDefineToBooleanLiteral(defName, false);\n            continue;\n          } else if (defValue.length() > 1\n              && ((defValue.charAt(0) == '\\'' &&\n                  defValue.charAt(defValue.length() - 1) == '\\'')\n                  || (defValue.charAt(0) == '\\\"' &&\n                      defValue.charAt(defValue.length() - 1) == '\\\"'))) {\n            // If the value starts and ends with a single quote,\n            // we assume that it's a string.\n            String maybeStringVal =\n                defValue.substring(1, defValue.length() - 1);\n            if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n              options.setDefineToStringLiteral(defName, maybeStringVal);\n              continue;\n            }\n          } else {\n            try {\n              options.setDefineToDoubleLiteral(defName,\n                  Double.parseDouble(defValue));\n              continue;\n            } catch (NumberFormatException e) {\n              // do nothing, it will be caught at the end\n            }\n          }\n        }\n      }\n\n      throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);\n    }\n  }\n",
                "comment": "  /**\n   * Create a map of constant names to constant values from a textual\n   * description of the map.\n   *\n   * @param definitions A list of overriding definitions for defines in\n   *     the form <name>[=<val>], where <val> is a number, boolean, or\n   *     single-quoted string without single quotes.\n   */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
                "start_loc": 84,
                "end_loc": 94,
                "buggy_function": "    private void trySimplify(Node parent, Node node) {\n      if (node.getType() != Token.EXPR_RESULT) {\n        return;\n      }\n\n      Node exprBody = node.getFirstChild();\n      if (!NodeUtil.nodeTypeMayHaveSideEffects(exprBody)\n      ) {\n        changeProxy.replaceWith(parent, node, getSideEffectNodes(exprBody));\n      }\n    }\n",
                "fixed_function": "    private void trySimplify(Node parent, Node node) {\n      if (node.getType() != Token.EXPR_RESULT) {\n        return;\n      }\n\n      Node exprBody = node.getFirstChild();\n      if (!NodeUtil.nodeTypeMayHaveSideEffects(exprBody)\n          || exprBody.getType() == Token.NEW\n          || exprBody.getType() == Token.CALL) {\n        changeProxy.replaceWith(parent, node, getSideEffectNodes(exprBody));\n      }\n    }\n",
                "comment": "    /**\n     * Attempts to replace the input node with a simpler but functionally\n     * equivalent set of nodes.\n     */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.RemoveConstantExpressionsTest::testCall1",
                    "com.google.javascript.jscomp.RemoveConstantExpressionsTest::testNew1"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.CommandLineRunnerTest::testDefineFlag3": {
                "path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
                "function_name": "testDefineFlag3",
                "src": "  public void testDefineFlag3() {\n    args.add(\"--define=FOO=\\\"x'\\\"\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x'\\\";\");\n  }",
                "stack_trace": "java.lang.RuntimeException: --define flag syntax invalid: FOO=\"x'\"\n\tat com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineReplacements(AbstractCommandLineRunner.java:892)\n\tat com.google.javascript.jscomp.AbstractCommandLineRunner.initOptionsFromFlags(AbstractCommandLineRunner.java:138)\n\tat com.google.javascript.jscomp.CommandLineRunner.createOptions(CommandLineRunner.java:437)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.compile(CommandLineRunnerTest.java:309)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:254)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:246)\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag3(CommandLineRunnerTest.java:143)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.RuntimeException: --define flag syntax invalid: FOO=\"x'\"\n\tat com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineReplacements(AbstractCommandLineRunner.java:892)  throw new RuntimeException(          \"--define flag syntax invalid: \" + override);\n\tat com.google.javascript.jscomp.AbstractCommandLineRunner.initOptionsFromFlags(AbstractCommandLineRunner.java:138)  createDefineReplacements(config.define, options);\n\tat com.google.javascript.jscomp.CommandLineRunner.createOptions(CommandLineRunner.java:437)  initOptionsFromFlags(options);\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.compile(CommandLineRunnerTest.java:309)  CompilerOptions options = runner.createOptions();\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:254)  Compiler compiler = compile(original);\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.test(CommandLineRunnerTest.java:246)  test(new String[] { original }, new String[] { compiled });\n\tat com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag3(CommandLineRunnerTest.java:143)  test(\"/** @define {string} */ var FOO = \\\"a\\\";\",         \"var FOO = \\\"x'\\\";\");",
                "failed_line": 143
            },
            "com.google.javascript.jscomp.RemoveConstantExpressionsTest::testCall1": {
                "path": "test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java",
                "function_name": "testCall1",
                "src": "  public void testCall1() {\n    test(\"Math.sin(0);\", \"\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: \nResult: Math.sin(0)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        EXPR_RESULT 1\n            CALL 1\n                GETPROP 1\n                    NAME Math 1\n                    STRING sin 1\n                NUMBER 0.0 1\n\n\nSubtree1: SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n\n\nSubtree2: SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n    EXPR_RESULT 1\n        CALL 1\n            GETPROP 1\n                NAME Math 1\n                STRING sin 1\n            NUMBER 0.0 1\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:782)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:302)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:271)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:259)\n\tat com.google.javascript.jscomp.RemoveConstantExpressionsTest.testCall1(RemoveConstantExpressionsTest.java:282)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: \nResult: Math.sin(0)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        EXPR_RESULT 1\n            CALL 1\n                GETPROP 1\n                    NAME Math 1\n                    STRING sin 1\n                NUMBER 0.0 1\n\n\nSubtree1: SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n\n\nSubtree2: SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n    EXPR_RESULT 1\n        CALL 1\n            GETPROP 1\n                NAME Math 1\n                STRING sin 1\n            NUMBER 0.0 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:782)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:302)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:271)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:259)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.RemoveConstantExpressionsTest.testCall1(RemoveConstantExpressionsTest.java:282)  test(\"Math.sin(0);\", \"\");",
                "failed_line": 282
            },
            "com.google.javascript.jscomp.RemoveConstantExpressionsTest::testNew1": {
                "path": "test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java",
                "function_name": "testNew1",
                "src": "  public void testNew1() {\n    test(\"new Date;\", \"\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: \nResult: new Date\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        EXPR_RESULT 1\n            NEW 1\n                NAME Date 1\n\n\nSubtree1: SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n\n\nSubtree2: SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n    EXPR_RESULT 1\n        NEW 1\n            NAME Date 1\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:782)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:302)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:271)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:259)\n\tat com.google.javascript.jscomp.RemoveConstantExpressionsTest.testNew1(RemoveConstantExpressionsTest.java:290)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: \nResult: new Date\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n        EXPR_RESULT 1\n            NEW 1\n                NAME Date 1\n\n\nSubtree1: SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: expected0] [synthetic: 1]\n\n\nSubtree2: SCRIPT [source name: null] [encoded source length: 0] [base line: -1] [end line: -1] 1 [sourcename: testcode] [synthetic: 1]\n    EXPR_RESULT 1\n        NEW 1\n            NAME Date 1\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:782)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:302)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:271)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:259)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.RemoveConstantExpressionsTest.testNew1(RemoveConstantExpressionsTest.java:290)  test(\"new Date;\", \"\");",
                "failed_line": 290
            }
        }
    },
    "Closure_171": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/TypeInference.java",
                "start_loc": 719,
                "end_loc": 773,
                "buggy_function": "  private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type = n.getJSType();\n    Preconditions.checkNotNull(type);\n\n    for (Node name = n.getFirstChild(); name != null; name = name.getNext()) {\n      scope = traverse(name.getFirstChild(), scope);\n    }\n\n    // Object literals can be reflected on other types.\n    // See CodingConvention#getObjectLiteralCase and goog.object.reflect.\n    // Ignore these types of literals.\n    ObjectType objectType = ObjectType.cast(type);\n    if (objectType == null) {\n      return scope;\n    }\n    boolean hasLendsName = n.getJSDocInfo() != null &&\n        n.getJSDocInfo().getLendsName() != null;\n    if (objectType.hasReferenceName() && !hasLendsName) {\n      return scope;\n    }\n\n    String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));\n    for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext()) {\n      String memberName = NodeUtil.getObjectLitKeyName(name);\n      if (memberName != null) {\n        JSType rawValueType =  name.getFirstChild().getJSType();\n        JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);\n        if (valueType == null) {\n          valueType = unknownType;\n        }\n        objectType.defineInferredProperty(memberName, valueType, name);\n\n        // Do normal flow inference if this is a direct property assignment.\n        if (qObjName != null && name.isStringKey()) {\n          String qKeyName = qObjName + \".\" + memberName;\n          Var var = syntacticScope.getVar(qKeyName);\n          JSType oldType = var == null ? null : var.getType();\n          if (var != null && var.isTypeInferred()) {\n            var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));\n          }\n\n          scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? unknownType : oldType,\n              valueType);\n        }\n      } else {\n        n.setJSType(unknownType);\n      }\n    }\n    return scope;\n  }\n",
                "fixed_function": "  private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n    JSType type = n.getJSType();\n    Preconditions.checkNotNull(type);\n\n    for (Node name = n.getFirstChild(); name != null; name = name.getNext()) {\n      scope = traverse(name.getFirstChild(), scope);\n    }\n\n    // Object literals can be reflected on other types.\n    // See CodingConvention#getObjectLiteralCase and goog.object.reflect.\n    // Ignore these types of literals.\n    ObjectType objectType = ObjectType.cast(type);\n    if (objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT)) {\n      return scope;\n    }\n\n    String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));\n    for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext()) {\n      String memberName = NodeUtil.getObjectLitKeyName(name);\n      if (memberName != null) {\n        JSType rawValueType =  name.getFirstChild().getJSType();\n        JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);\n        if (valueType == null) {\n          valueType = unknownType;\n        }\n        objectType.defineInferredProperty(memberName, valueType, name);\n\n        // Do normal flow inference if this is a direct property assignment.\n        if (qObjName != null && name.isStringKey()) {\n          String qKeyName = qObjName + \".\" + memberName;\n          Var var = syntacticScope.getVar(qKeyName);\n          JSType oldType = var == null ? null : var.getType();\n          if (var != null && var.isTypeInferred()) {\n            var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));\n          }\n\n          scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? unknownType : oldType,\n              valueType);\n        }\n      } else {\n        n.setJSType(unknownType);\n      }\n    }\n    return scope;\n  }\n",
                "comment": "",
                "non_directly_related_tests": []
            },
            {
                "path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
                "start_loc": 1661,
                "end_loc": 1706,
                "buggy_function": "    private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType) {\n      if (valueType == null) {\n        return true;\n      }\n\n      // Prototype sets are always declared.\n\n      boolean inferred = true;\n      if (info != null) {\n        inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (isConstantSymbol(info, n) && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred && rhsValue != null && rhsValue.isFunction()) {\n        if (info != null) {\n          return false;\n        } else if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName()) {\n\n          // Check if this is in a conditional block.\n          // Functions assigned in conditional blocks are inferred.\n          for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent()) {\n            if (NodeUtil.isControlStructure(current)) {\n              return true;\n            }\n          }\n\n          // Check if this is assigned in an inner scope.\n          // Functions assigned in inner scopes are inferred.\n          AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());\n          if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName)) {\n            return false;\n          }\n        }\n      }\n      return inferred;\n    }\n",
                "fixed_function": "    private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType) {\n      if (valueType == null) {\n        return true;\n      }\n\n      // Prototype sets are always declared.\n      if (qName != null && qName.endsWith(\".prototype\")) {\n        return false;\n      }\n\n      boolean inferred = true;\n      if (info != null) {\n        inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (isConstantSymbol(info, n) && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred && rhsValue != null && rhsValue.isFunction()) {\n        if (info != null) {\n          return false;\n        } else if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName()) {\n\n          // Check if this is in a conditional block.\n          // Functions assigned in conditional blocks are inferred.\n          for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent()) {\n            if (NodeUtil.isControlStructure(current)) {\n              return true;\n            }\n          }\n\n          // Check if this is assigned in an inner scope.\n          // Functions assigned in inner scopes are inferred.\n          AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());\n          if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName)) {\n            return false;\n          }\n        }\n      }\n      return inferred;\n    }\n",
                "comment": "/* Reset goog.bar to a no-op. /     *   goog.bar = function() {};\n     * }\n     *\n     * In a dynamic language with first-class functions, it's very difficult\n     * to know which one the user intended without looking at lots of\n     * contextual information (the second example demonstrates a small case\n     * of this, but there are some really pathological cases as well).\n     *\n     * The current algorithm checks if either the declaration has\n     * JsDoc type information, or @const with a known type,\n     * or a function literal with a name we haven't seen before.\n     */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.TypeCheckTest::testIssue1023"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.TypeCheckTest::testIssue1023": {
                "path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
                "function_name": "testIssue1023",
                "src": "  public void testIssue1023() throws Exception {\n    testTypes(\n        \"/** @constructor */\" +\n        \"function F() {}\" +\n        \"(function () {\" +\n        \"  F.prototype = {\" +\n        \"    /** @param {string} x */\" +\n        \"    bar: function (x) {  }\" +\n        \"  };\" +\n        \"})();\" +\n        \"(new F()).bar(true)\",\n        \"actual parameter 1 of F.prototype.bar does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected a warning\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:11991)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:11971)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:11907)\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue1023(TypeCheckTest.java:6756)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected a warning\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:11991)  assertTrue(\"expected a warning\", warnings.length > 0);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:11971)  testTypes(DEFAULT_EXTERNS, js, description, isError);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:11907)  testTypes(js, description, false);\n\tat com.google.javascript.jscomp.TypeCheckTest.testIssue1023(TypeCheckTest.java:6756)  testTypes(        \"/** @constructor */\" +        \"function F() {}\" +        \"(function () {\" +        \"  F.prototype = {\" +        \"    /** @param {string} x */\" +        \"    bar: function (x) {  }\" +        \"  };\" +        \"})();\" +        \"(new F()).bar(true)\",        \"actual parameter 1 of F.prototype.bar does not match formal parameter\\n\" +        \"found   : boolean\\n\" +        \"required: string\");",
                "failed_line": 6756
            },
            "com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction2": {
                "path": "test/com/google/javascript/jscomp/TypedScopeCreatorTest.java",
                "function_name": "testMethodBeforeFunction2",
                "src": "  public void testMethodBeforeFunction2() throws Exception {\n    testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    assertEquals(\"Window\", x.toString());\n    assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));\n    assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());\n    assertFalse(x.isPropertyTypeDeclared(\"alert\"));\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<[function (this:Window, ?): undefined]> but was:<[?]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.javascript.jscomp.TypedScopeCreatorTest.testMethodBeforeFunction2(TypedScopeCreatorTest.java:452)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<[function (this:Window, ?): undefined]> but was:<[?]>\n\tat com.google.javascript.jscomp.TypedScopeCreatorTest.testMethodBeforeFunction2(TypedScopeCreatorTest.java:452)  assertEquals(\"function (this:Window, ?): undefined\",        y.getPropertyType(\"alert\").toString());",
                "failed_line": 452
            },
            "com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface2": {
                "path": "test/com/google/javascript/jscomp/TypedScopeCreatorTest.java",
                "function_name": "testPropertiesOnInterface2",
                "src": "  public void testPropertiesOnInterface2() throws Exception {\n    testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");\n\n    Var i = globalScope.getVar(\"I\");\n    assertEquals(\"function (this:I): ?\", i.getType().toString());\n    assertTrue(i.getType().isInterface());\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    assertEquals(\"I.prototype\", iPrototype.toString());\n    assertTrue(iPrototype.isFunctionPrototypeType());\n\n    assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());\n\n    assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());\n\n    assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());\n  }",
                "stack_trace": "java.lang.NullPointerException\n\tat com.google.javascript.jscomp.TypedScopeCreatorTest.testPropertiesOnInterface2(TypedScopeCreatorTest.java:551)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat com.google.javascript.jscomp.TypedScopeCreatorTest.testPropertiesOnInterface2(TypedScopeCreatorTest.java:551)  assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());",
                "failed_line": 551
            }
        }
    },
    "Closure_174": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/JsAst.java",
                "start_loc": 81,
                "end_loc": 108,
                "buggy_function": "  private void parse(AbstractCompiler compiler) {\n    try {\n      ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n      root = result.ast;\n      compiler.setOldParseTree(sourceFile.getName(), result.oldAst);\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n\n\n    if (root == null || compiler.hasHaltingErrors()) {\n        // Most passes try to report as many errors as possible,\n        // so there may already be errors. We only care if there were\n        // errors in the code we just parsed.\n      // There was a parse error or IOException, so use a dummy block.\n      root = IR.script();\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.setStaticSourceFile(sourceFile);\n  }\n",
                "fixed_function": "  private void parse(AbstractCompiler compiler) {\n    int startErrorCount = compiler.getErrorManager().getErrorCount();\n    try {\n      ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n      root = result.ast;\n      compiler.setOldParseTree(sourceFile.getName(), result.oldAst);\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n\n\n    if (root == null ||\n        // Most passes try to report as many errors as possible,\n        // so there may already be errors. We only care if there were\n        // errors in the code we just parsed.\n        (compiler.getErrorManager().getErrorCount() > startErrorCount && !compiler.isIdeMode())) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = IR.script();\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.setStaticSourceFile(sourceFile);\n  }\n",
                "comment": "",
                "non_directly_related_tests": []
            },
            {
                "path": "src/com/google/javascript/jscomp/NodeUtil.java",
                "start_loc": 2360,
                "end_loc": 2372,
                "buggy_function": "  public static Node newQualifiedNameNodeDeclaration(\n      CodingConvention convention, String name, Node value, JSDocInfo info) {\n    Node result;\n    Node nameNode = newQualifiedNameNode(convention, name);\n    if (nameNode.isName()) {\n      result = IR.var(nameNode, value);\n      result.setJSDocInfo(info);\n    } else {\n      result = IR.exprResult(IR.assign(nameNode, value));\n      result.getFirstChild().setJSDocInfo(info);\n    }\n    return result;\n  }\n",
                "fixed_function": "  public static Node newQualifiedNameNodeDeclaration(\n      CodingConvention convention, String name, Node value, JSDocInfo info) {\n    Node result;\n    Node nameNode = newQualifiedNameNode(convention, name);\n    if (nameNode.isName()) {\n      result = IR.var(nameNode, value);\n      result.setJSDocInfo(info);\n    } else if (value != null) {\n      result = IR.exprResult(IR.assign(nameNode, value));\n      result.getFirstChild().setJSDocInfo(info);\n    } else {\n      result = IR.exprResult(nameNode);\n      result.getFirstChild().setJSDocInfo(info);\n    }\n    return result;\n  }\n",
                "comment": "  /**\n   * Creates a node representing a qualified name.\n   *\n   * @param name A qualified name (e.g. \"foo\" or \"foo.bar.baz\")\n   * @return A NAME or GETPROP node\n   */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/com/google/javascript/jscomp/ScopedAliases.java",
                "start_loc": 351,
                "end_loc": 398,
                "buggy_function": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        boolean isVarAssign = parent.isVar() && n.hasChildren();\n        if (isVarAssign && n.getFirstChild().isQualifiedName()) {\n          recordAlias(v);\n        } else if (v.isBleedingFunction()) {\n          // Bleeding functions already get a BAD_PARAMETERS error, so just\n          // do nothing.\n        } else if (parent.getType() == Token.LP) {\n          // Parameters of the scope function also get a BAD_PARAMETERS\n          // error.\n        } else if (isVarAssign) {\n          Node value = v.getInitialValue().detachFromParent();\n          String name = n.getString();\n          int nameCount = scopedAliasNames.count(name);\n          scopedAliasNames.add(name);\n          String globalName =\n              \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));\n\n          compiler.ensureLibraryInjected(\"base\");\n\n          // Add $jscomp.scope.name = EXPR;\n          // Make sure we copy over all the jsdoc and debug info.\n            Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n                compiler.getCodingConvention(),\n                globalName,\n                value,\n                v.getJSDocInfo())\n                .useSourceInfoIfMissingFromForTree(n);\n            NodeUtil.setDebugInformation(\n                newDecl.getFirstChild().getFirstChild(), n, name);\n            parent.getParent().addChildBefore(newDecl, parent);\n\n          // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n          v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, n, name));\n\n          recordAlias(v);\n        } else {\n          // Do not allow hoisted functions or other kinds of local symbols.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }\n",
                "fixed_function": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        boolean isVar = parent.isVar();\n        if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n          recordAlias(v);\n        } else if (v.isBleedingFunction()) {\n          // Bleeding functions already get a BAD_PARAMETERS error, so just\n          // do nothing.\n        } else if (parent.getType() == Token.LP) {\n          // Parameters of the scope function also get a BAD_PARAMETERS\n          // error.\n        } else if (isVar) {\n          Node value = n.hasChildren() ?\n              v.getInitialValue().detachFromParent() :\n              null;\n          String name = n.getString();\n          int nameCount = scopedAliasNames.count(name);\n          scopedAliasNames.add(name);\n          String globalName =\n              \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));\n\n          compiler.ensureLibraryInjected(\"base\");\n\n          // Add $jscomp.scope.name = EXPR;\n          // Make sure we copy over all the jsdoc and debug info.\n          if (value != null || v.getJSDocInfo() != null) {\n            Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n                compiler.getCodingConvention(),\n                globalName,\n                value,\n                v.getJSDocInfo())\n                .useSourceInfoIfMissingFromForTree(n);\n            NodeUtil.setDebugInformation(\n                newDecl.getFirstChild().getFirstChild(), n, name);\n            parent.getParent().addChildBefore(newDecl, parent);\n          }\n\n          // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n          v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, n, name));\n\n          recordAlias(v);\n        } else {\n          // Do not allow hoisted functions or other kinds of local symbols.\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n      }\n    }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.ScopedAliasesTest::testIssue1103a",
                    "com.google.javascript.jscomp.ScopedAliasesTest::testIssue1103b"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.ScopedAliasesTest::testIssue1103a": {
                "path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
                "function_name": "testIssue1103a",
                "src": "  public void testIssue1103a() {\n    test(\"goog.scope(function () {\" +\n         \"  var a;\" +\n         \"  foo.bar = function () { a = 1; };\" +\n         \"});\",\n         SCOPE_NAMESPACE + \"foo.bar = function () { $jscomp.scope.a = 1; }\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable a is in a goog.scope and is not an alias. at testcode line 1 : 30 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:871)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testIssue1103a(ScopedAliasesTest.java:526)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable a is in a goog.scope and is not an alias. at testcode line 1 : 30 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:871)  assertEquals(          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)  test(compiler, maybeCreateArray(expected), error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testIssue1103a(ScopedAliasesTest.java:526)  test(\"goog.scope(function () {\" +         \"  var a;\" +         \"  foo.bar = function () { a = 1; };\" +         \"});\",         SCOPE_NAMESPACE + \"foo.bar = function () { $jscomp.scope.a = 1; }\");",
                "failed_line": 526
            },
            "com.google.javascript.jscomp.ScopedAliasesTest::testIssue1103b": {
                "path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
                "function_name": "testIssue1103b",
                "src": "  public void testIssue1103b() {\n    test(\"goog.scope(function () {\" +\n         \"  var a = foo, b, c = 1;\" +\n         \"});\",\n         SCOPE_NAMESPACE + \"$jscomp.scope.c=1\");\n  }",
                "stack_trace": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n  Node(FUNCTION ): testcode:1:11\ngoog.scope(function () {  var a = foo, b, c = 1;});\n  Parent(CALL): testcode:1:0\ngoog.scope(function () {  var a = foo, b, c = 1;});\n\n\tat com.google.javascript.jscomp.Compiler.ensureLibraryInjected(Compiler.java:2554)\n\tat com.google.javascript.jscomp.ScopedAliases$Traversal.findAliases(ScopedAliases.java:373)\n\tat com.google.javascript.jscomp.ScopedAliases$Traversal.enterScope(ScopedAliases.java:298)\n\tat com.google.javascript.jscomp.NodeTraversal.pushScope(NodeTraversal.java:600)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:558)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:287)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:494)\n\tat com.google.javascript.jscomp.ScopedAliases.hotSwapScript(ScopedAliases.java:133)\n\tat com.google.javascript.jscomp.ScopedAliases.process(ScopedAliases.java:127)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:845)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testIssue1103b(ScopedAliasesTest.java:534)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\nCaused by: java.lang.NullPointerException\n\t... 54 more",
                "clean_error_message": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n  Node(FUNCTION ): testcode:1:11\ngoog.scope(function () {  var a = foo, b, c = 1;});\n  Parent(CALL): testcode:1:0\ngoog.scope(function () {  var a = foo, b, c = 1;});\n\n\tat com.google.javascript.jscomp.Compiler.ensureLibraryInjected(Compiler.java:2554)  Node lastChild = firstChild.getLastSibling();\n\tat com.google.javascript.jscomp.NodeTraversal.pushScope(NodeTraversal.java:600)  scopeCallback.enterScope(this);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:558)  pushScope(n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:287)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:494)  t.traverse(root);\n\tat com.google.javascript.jscomp.ScopedAliases.hotSwapScript(ScopedAliases.java:133)  NodeTraversal.traverse(compiler, root, traversal);\n\tat com.google.javascript.jscomp.ScopedAliases.process(ScopedAliases.java:127)  hotSwapScript(root, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:845)  getProcessor(compiler).process(externsRoot, mainRoot);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)  test(compiler, maybeCreateArray(expected), error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testIssue1103b(ScopedAliasesTest.java:534)  test(\"goog.scope(function () {\" +         \"  var a = foo, b, c = 1;\" +         \"});\",         SCOPE_NAMESPACE + \"$jscomp.scope.c=1\");\nCaused by: java.lang.NullPointerException\n\t... 54 more",
                "failed_line": 534
            },
            "com.google.javascript.jscomp.ScopedAliasesTest::testIssue1103c": {
                "path": "test/com/google/javascript/jscomp/ScopedAliasesTest.java",
                "function_name": "testIssue1103c",
                "src": "  public void testIssue1103c() {\n    test(\"goog.scope(function () {\" +\n         \"  /** @type {number} */ var a;\" +\n         \"});\",\n         SCOPE_NAMESPACE + \"/** @type {number} */ $jscomp.scope.a;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable a is in a goog.scope and is not an alias. at testcode line 1 : 52 expected:<0> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:401)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:871)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testIssue1103c(ScopedAliasesTest.java:541)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable a is in a goog.scope and is not an alias. at testcode line 1 : 52 expected:<0> but was:<1>\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:871)  assertEquals(          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),          0, compiler.getErrorCount());\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:477)  test(compiler, maybeCreateArray(expected), error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:403)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:372)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:360)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.ScopedAliasesTest.testIssue1103c(ScopedAliasesTest.java:541)  test(\"goog.scope(function () {\" +         \"  /** @type {number} */ var a;\" +         \"});\",         SCOPE_NAMESPACE + \"/** @type {number} */ $jscomp.scope.a;\");",
                "failed_line": 541
            }
        }
    },
    "Lang_7": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
                "start_loc": 445,
                "end_loc": 598,
                "buggy_function": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }  \n        if (str.startsWith(\"--\")) {\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n            int hexDigits = str.length() - 2; // drop 0x\n            if (str.startsWith(\"-\")) { // drop -\n                hexDigits--;\n            }\n            if (hexDigits > 8) { // too many for an int\n                return createLong(str);\n            }\n            return createInteger(str);\n        }   \n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos || expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n\n            }\n        }\n    }\n",
                "fixed_function": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }  \n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n            int hexDigits = str.length() - 2; // drop 0x\n            if (str.startsWith(\"-\")) { // drop -\n                hexDigits--;\n            }\n            if (hexDigits > 8) { // too many for an int\n                return createLong(str);\n            }\n            return createInteger(str);\n        }   \n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos || expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n\n            }\n        }\n    }\n",
                "comment": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer - or long, if the number of digits after the 0x\n     * prefix is more than 8.\n     * Values with leading <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
                "start_loc": 713,
                "end_loc": 726,
                "buggy_function": "    public static BigDecimal createBigDecimal(String str) {\n        if (str == null) {\n            return null;\n        }\n        // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n        return new BigDecimal(str);\n    }\n",
                "fixed_function": "    public static BigDecimal createBigDecimal(String str) {\n        if (str == null) {\n            return null;\n        }\n        // handle JDK1.3.1 bug where \"\" throws IndexOutOfBoundsException\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.trim().startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        return new BigDecimal(str);\n    }\n",
                "comment": "    /**\n     * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>\n     * \n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * @param str  a <code>String</code> to convert, may be null\n     * @return converted <code>BigDecimal</code> (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber": {
                "path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
                "function_name": "testCreateNumber",
                "src": "    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());\n        assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));\n\n        // LANG-638\n        assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n\n        // LANG-693\n        assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        assertEquals(BigDecimal.class,bigNum.getClass());\n        assertNotNull(bigNum);\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            fail(\"Expected NumberFormatException\");\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber(NumberUtilsTest.java:242)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber(NumberUtilsTest.java:242)  fail(\"Expected NumberFormatException\");",
                "failed_line": 242
            }
        }
    },
    "Lang_15": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
                "start_loc": 179,
                "end_loc": 235,
                "buggy_function": "    private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n            Map<TypeVariable<?>, Type> typeVarAssigns) {\n        if (type == null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toParameterizedType == null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toParameterizedType.equals(type)) {\n            return true;\n        }\n\n        // get the target type's raw type\n        Class<?> toClass = getRawType(toParameterizedType);\n        // get the subject type's type arguments including owner type arguments\n        // and supertype arguments up to and including the target class.\n        Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);\n\n        // null means the two types are not compatible\n        if (fromTypeVarAssigns == null) {\n            return false;\n        }\n\n        // compatible types, but there's no type arguments. this is equivalent\n        // to comparing Map< ?, ? > to Map, and raw types are always assignable\n        // to parameterized types.\n        if (fromTypeVarAssigns.isEmpty()) {\n            return true;\n        }\n\n        // get the target type's type arguments including owner type arguments\n        Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\n                toClass, typeVarAssigns);\n\n        // now to check each type argument\n        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n            Type toTypeArg = entry.getValue();\n            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n\n            // parameters must either be absent from the subject type, within\n            // the bounds of the wildcard type, or be an exact match to the\n            // parameters of the target type.\n            if (fromTypeArg != null\n                    && !toTypeArg.equals(fromTypeArg)\n                    && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\n                            typeVarAssigns))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n",
                "fixed_function": "    private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n            Map<TypeVariable<?>, Type> typeVarAssigns) {\n        if (type == null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toParameterizedType == null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toParameterizedType.equals(type)) {\n            return true;\n        }\n\n        // get the target type's raw type\n        Class<?> toClass = getRawType(toParameterizedType);\n        // get the subject type's type arguments including owner type arguments\n        // and supertype arguments up to and including the target class.\n        Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);\n\n        // null means the two types are not compatible\n        if (fromTypeVarAssigns == null) {\n            return false;\n        }\n\n        // compatible types, but there's no type arguments. this is equivalent\n        // to comparing Map< ?, ? > to Map, and raw types are always assignable\n        // to parameterized types.\n        if (fromTypeVarAssigns.isEmpty()) {\n            return true;\n        }\n\n        // get the target type's type arguments including owner type arguments\n        Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\n                toClass, typeVarAssigns);\n\n        // now to check each type argument\n        for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {\n            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);\n            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);\n\n            // parameters must either be absent from the subject type, within\n            // the bounds of the wildcard type, or be an exact match to the\n            // parameters of the target type.\n            if (fromTypeArg != null\n                    && !toTypeArg.equals(fromTypeArg)\n                    && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\n                            typeVarAssigns))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n",
                "comment": "    /**\n     * <p> Checks if the subject type may be implicitly cast to the target\n     * parameterized type following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toParameterizedType the target parameterized type\n     * @param typeVarAssigns a map with type variables\n     * @return true if <code>type</code> is assignable to <code>toType</code>.\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
                "start_loc": 650,
                "end_loc": 681,
                "buggy_function": "    private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n        // make sure they're assignable\n        if (!isAssignable(cls, toClass)) {\n            return null;\n        }\n\n        // can't work with primitives\n        if (cls.isPrimitive()) {\n            // both classes are primitives?\n            if (toClass.isPrimitive()) {\n                // dealing with widening here. No type arguments to be\n                // harvested with these two types.\n                return new HashMap<TypeVariable<?>, Type>();\n            }\n\n            // work with wrapper the wrapper class instead of the primitive\n            cls = ClassUtils.primitiveToWrapper(cls);\n        }\n\n        // create a copy of the incoming map, or an empty one if it's null\n        HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n\n        // has target class been reached?\n        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n            return typeVarAssigns;\n        }\n\n        // walk the inheritance hierarchy until the target class is reached\n        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n    }\n",
                "fixed_function": "    private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n        // make sure they're assignable\n        if (!isAssignable(cls, toClass)) {\n            return null;\n        }\n\n        // can't work with primitives\n        if (cls.isPrimitive()) {\n            // both classes are primitives?\n            if (toClass.isPrimitive()) {\n                // dealing with widening here. No type arguments to be\n                // harvested with these two types.\n                return new HashMap<TypeVariable<?>, Type>();\n            }\n\n            // work with wrapper the wrapper class instead of the primitive\n            cls = ClassUtils.primitiveToWrapper(cls);\n        }\n\n        // create a copy of the incoming map, or an empty one if it's null\n        HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n\n        // has target class been reached?\n        if (toClass.equals(cls)) {\n            return typeVarAssigns;\n        }\n\n        // walk the inheritance hierarchy until the target class is reached\n        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n    }\n",
                "comment": "    /**\n     * <p> Return a map of the type arguments of a class in the context of <code>toClass</code>. </p>\n     *\n     * @param cls the class in question\n     * @param toClass the context class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments": {
                "path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
                "function_name": "testGetTypeArguments",
                "src": "    public void testGetTypeArguments() {\n        Map<TypeVariable<?>, Type> typeVarAssigns;\n        TypeVariable<?> treeSetTypeVar;\n        Type typeArg;\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        Assert.assertTrue(\"Type var assigns for Comparable from Integer: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        Assert.assertEquals(\"Type argument of Comparable from Integer: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));\n\n        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        Assert.assertTrue(\"Type var assigns for Comparable from int: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        Assert.assertEquals(\"Type argument of Comparable from int: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));\n\n        Collection<Integer> col = Arrays.asList(new Integer[0]);\n        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        Assert.assertFalse(\"Type var assigns for Collection from List: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));\n\n        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\n        Assert.assertTrue(typeVarAssigns.size() == 2);\n        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));\n        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n        Assert.assertEquals(2, typeVarAssigns.size());\n        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n\tat org.junit.Assert.assertEquals(Assert.java:555)\n\tat org.junit.Assert.assertEquals(Assert.java:542)\n\tat org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments(TypeUtilsTest.java:505)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments(TypeUtilsTest.java:505)  Assert.assertEquals(2, typeVarAssigns.size());",
                "failed_line": 505
            },
            "org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable": {
                "path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
                "function_name": "testIsAssignable",
                "src": "    public void testIsAssignable() throws SecurityException, NoSuchMethodException,\n            NoSuchFieldException {\n        List list0 = null;\n        List<Object> list1 = null;\n        List<?> list2 = null;\n        List<? super Object> list3 = null;\n        List<String> list4 = null;\n        List<? extends String> list5 = null;\n        List<? super String> list6 = null;\n        List[] list7 = null;\n        List<Object>[] list8 = null;\n        List<?>[] list9 = null;\n        List<? super Object>[] list10 = null;\n        List<String>[] list11 = null;\n        List<? extends String>[] list12 = null;\n        List<? super String>[] list13;\n        Class<?> clazz = getClass();\n        Method method = clazz.getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n        Type[] types = method.getGenericParameterTypes();\n//        list0 = list0;\n        delegateBooleanAssertion(types, 0, 0, true);\n        list1 = list0;\n        delegateBooleanAssertion(types, 0, 1, true);\n        list0 = list1;\n        delegateBooleanAssertion(types, 1, 0, true);\n        list2 = list0;\n        delegateBooleanAssertion(types, 0, 2, true);\n        list0 = list2;\n        delegateBooleanAssertion(types, 2, 0, true);\n        list3 = list0;\n        delegateBooleanAssertion(types, 0, 3, true);\n        list0 = list3;\n        delegateBooleanAssertion(types, 3, 0, true);\n        list4 = list0;\n        delegateBooleanAssertion(types, 0, 4, true);\n        list0 = list4;\n        delegateBooleanAssertion(types, 4, 0, true);\n        list5 = list0;\n        delegateBooleanAssertion(types, 0, 5, true);\n        list0 = list5;\n        delegateBooleanAssertion(types, 5, 0, true);\n        list6 = list0;\n        delegateBooleanAssertion(types, 0, 6, true);\n        list0 = list6;\n        delegateBooleanAssertion(types, 6, 0, true);\n//        list1 = list1;\n        delegateBooleanAssertion(types, 1, 1, true);\n        list2 = list1;\n        delegateBooleanAssertion(types, 1, 2, true);\n        list1 = (List<Object>) list2;\n        delegateBooleanAssertion(types, 2, 1, false);\n        list3 = list1;\n        delegateBooleanAssertion(types, 1, 3, true);\n        list1 = (List<Object>) list3;\n        delegateBooleanAssertion(types, 3, 1, false);\n        // list4 = list1;\n        delegateBooleanAssertion(types, 1, 4, false);\n        // list1 = list4;\n        delegateBooleanAssertion(types, 4, 1, false);\n        // list5 = list1;\n        delegateBooleanAssertion(types, 1, 5, false);\n        // list1 = list5;\n        delegateBooleanAssertion(types, 5, 1, false);\n        list6 = list1;\n        delegateBooleanAssertion(types, 1, 6, true);\n        list1 = (List<Object>) list6;\n        delegateBooleanAssertion(types, 6, 1, false);\n//        list2 = list2;\n        delegateBooleanAssertion(types, 2, 2, true);\n        list2 = list3;\n        delegateBooleanAssertion(types, 2, 3, false);\n        list2 = list4;\n        delegateBooleanAssertion(types, 3, 2, true);\n        list3 = (List<? super Object>) list2;\n        delegateBooleanAssertion(types, 2, 4, false);\n        list2 = list5;\n        delegateBooleanAssertion(types, 4, 2, true);\n        list4 = (List<String>) list2;\n        delegateBooleanAssertion(types, 2, 5, false);\n        list2 = list6;\n        delegateBooleanAssertion(types, 5, 2, true);\n        list5 = (List<? extends String>) list2;\n        delegateBooleanAssertion(types, 2, 6, false);\n//        list3 = list3;\n        delegateBooleanAssertion(types, 6, 2, true);\n        list6 = (List<? super String>) list2;\n        delegateBooleanAssertion(types, 3, 3, true);\n        // list4 = list3;\n        delegateBooleanAssertion(types, 3, 4, false);\n        // list3 = list4;\n        delegateBooleanAssertion(types, 4, 3, false);\n        // list5 = list3;\n        delegateBooleanAssertion(types, 3, 5, false);\n        // list3 = list5;\n        delegateBooleanAssertion(types, 5, 3, false);\n        list6 = list3;\n        delegateBooleanAssertion(types, 3, 6, true);\n        list3 = (List<? super Object>) list6;\n        delegateBooleanAssertion(types, 6, 3, false);\n//        list4 = list4;\n        delegateBooleanAssertion(types, 4, 4, true);\n        list5 = list4;\n        delegateBooleanAssertion(types, 4, 5, true);\n        list4 = (List<String>) list5;\n        delegateBooleanAssertion(types, 5, 4, false);\n        list6 = list4;\n        delegateBooleanAssertion(types, 4, 6, true);\n        list4 = (List<String>) list6;\n        delegateBooleanAssertion(types, 6, 4, false);\n//        list5 = list5;\n        delegateBooleanAssertion(types, 5, 5, true);\n        list6 = (List<? super String>) list5;\n        delegateBooleanAssertion(types, 5, 6, false);\n        list5 = (List<? extends String>) list6;\n        delegateBooleanAssertion(types, 6, 5, false);\n//        list6 = list6;\n        delegateBooleanAssertion(types, 6, 6, true);\n\n//        list7 = list7;\n        delegateBooleanAssertion(types, 7, 7, true);\n        list8 = list7;\n        delegateBooleanAssertion(types, 7, 8, true);\n        list7 = list8;\n        delegateBooleanAssertion(types, 8, 7, true);\n        list9 = list7;\n        delegateBooleanAssertion(types, 7, 9, true);\n        list7 = list9;\n        delegateBooleanAssertion(types, 9, 7, true);\n        list10 = list7;\n        delegateBooleanAssertion(types, 7, 10, true);\n        list7 = list10;\n        delegateBooleanAssertion(types, 10, 7, true);\n        list11 = list7;\n        delegateBooleanAssertion(types, 7, 11, true);\n        list7 = list11;\n        delegateBooleanAssertion(types, 11, 7, true);\n        list12 = list7;\n        delegateBooleanAssertion(types, 7, 12, true);\n        list7 = list12;\n        delegateBooleanAssertion(types, 12, 7, true);\n        list13 = list7;\n        delegateBooleanAssertion(types, 7, 13, true);\n        list7 = list13;\n        delegateBooleanAssertion(types, 13, 7, true);\n//        list8 = list8;\n        delegateBooleanAssertion(types, 8, 8, true);\n        list9 = list8;\n        delegateBooleanAssertion(types, 8, 9, true);\n        list8 = (List<Object>[]) list9;\n        delegateBooleanAssertion(types, 9, 8, false);\n        list10 = list8;\n        delegateBooleanAssertion(types, 8, 10, true);\n        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse\n        delegateBooleanAssertion(types, 10, 8, false);\n        // list11 = list8;\n        delegateBooleanAssertion(types, 8, 11, false);\n        // list8 = list11;\n        delegateBooleanAssertion(types, 11, 8, false);\n        // list12 = list8;\n        delegateBooleanAssertion(types, 8, 12, false);\n        // list8 = list12;\n        delegateBooleanAssertion(types, 12, 8, false);\n        list13 = list8;\n        delegateBooleanAssertion(types, 8, 13, true);\n        list8 = (List<Object>[]) list13;\n        delegateBooleanAssertion(types, 13, 8, false);\n//        list9 = list9;\n        delegateBooleanAssertion(types, 9, 9, true);\n        list10 = (List<? super Object>[]) list9;\n        delegateBooleanAssertion(types, 9, 10, false);\n        list9 = list10;\n        delegateBooleanAssertion(types, 10, 9, true);\n        list11 = (List<String>[]) list9;\n        delegateBooleanAssertion(types, 9, 11, false);\n        list9 = list11;\n        delegateBooleanAssertion(types, 11, 9, true);\n        list12 = (List<? extends String>[]) list9;\n        delegateBooleanAssertion(types, 9, 12, false);\n        list9 = list12;\n        delegateBooleanAssertion(types, 12, 9, true);\n        list13 = (List<? super String>[]) list9;\n        delegateBooleanAssertion(types, 9, 13, false);\n        list9 = list13;\n        delegateBooleanAssertion(types, 13, 9, true);\n//        list10 = list10;\n        delegateBooleanAssertion(types, 10, 10, true);\n        // list11 = list10;\n        delegateBooleanAssertion(types, 10, 11, false);\n        // list10 = list11;\n        delegateBooleanAssertion(types, 11, 10, false);\n        // list12 = list10;\n        delegateBooleanAssertion(types, 10, 12, false);\n        // list10 = list12;\n        delegateBooleanAssertion(types, 12, 10, false);\n        list13 = list10;\n        delegateBooleanAssertion(types, 10, 13, true);\n        list10 = (List<? super Object>[]) list13;\n        delegateBooleanAssertion(types, 13, 10, false);\n//        list11 = list11;\n        delegateBooleanAssertion(types, 11, 11, true);\n        list12 = list11;\n        delegateBooleanAssertion(types, 11, 12, true);\n        list11 = (List<String>[]) list12;\n        delegateBooleanAssertion(types, 12, 11, false);\n        list13 = list11;\n        delegateBooleanAssertion(types, 11, 13, true);\n        list11 = (List<String>[]) list13;\n        delegateBooleanAssertion(types, 13, 11, false);\n//        list12 = list12;\n        delegateBooleanAssertion(types, 12, 12, true);\n        list13 = (List<? super String>[]) list12;\n        delegateBooleanAssertion(types, 12, 13, false);\n        list12 = (List<? extends String>[]) list13;\n        delegateBooleanAssertion(types, 13, 12, false);\n//        list13 = list13;\n        delegateBooleanAssertion(types, 13, 13, true);\n        Type disType = getClass().getField(\"dis\").getGenericType();\n        // Reporter.log( ( ( ParameterizedType ) disType\n        // ).getOwnerType().getClass().toString() );\n        Type datType = getClass().getField(\"dat\").getGenericType();\n        Type daType = getClass().getField(\"da\").getGenericType();\n        Type uhderType = getClass().getField(\"uhder\").getGenericType();\n        Type dingType = getClass().getField(\"ding\").getGenericType();\n        Type testerType = getClass().getField(\"tester\").getGenericType();\n        Type tester2Type = getClass().getField(\"tester2\").getGenericType();\n        Type dat2Type = getClass().getField(\"dat2\").getGenericType();\n        Type dat3Type = getClass().getField(\"dat3\").getGenericType();\n        dis = dat;\n        Assert.assertTrue(TypeUtils.isAssignable(datType, disType));\n        // dis = da;\n        Assert.assertFalse(TypeUtils.isAssignable(daType, disType));\n        dis = uhder;\n        Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));\n        dis = ding;\n        Assert.assertFalse(String.format(\"type %s not assignable to %s!\", dingType, disType),\n                TypeUtils.isAssignable(dingType, disType));\n        dis = tester;\n        Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));\n        // dis = tester2;\n        Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));\n        // dat = dat2;\n        Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));\n        // dat2 = dat;\n        Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));\n        // dat = dat3;\n        Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));\n        char ch = 0;\n        boolean bo = false;\n        byte by = 0;\n        short sh = 0;\n        int in = 0;\n        long lo = 0;\n        float fl = 0;\n        double du = 0;\n        du = ch;\n        Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));\n        du = by;\n        Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));\n        du = sh;\n        Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));\n        du = in;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));\n        du = lo;\n        Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));\n        du = fl;\n        Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));\n        lo = in;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));\n        lo = Integer.valueOf(0);\n        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));\n        // Long lngW = 1;\n        Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));\n        // lngW = Integer.valueOf( 0 );\n        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));\n        in = Integer.valueOf(0);\n        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));\n        Integer inte = in;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));\n        Type intComparableType = getClass().getField(\"intComparable\").getGenericType();\n        intComparable = 1;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));\n        Serializable ser = 1;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));\n        Type longComparableType = getClass().getField(\"longComparable\").getGenericType();\n        // longComparable = 1;\n        Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));\n        // longComparable = Integer.valueOf( 0 );\n        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));\n        // int[] ia;\n        // long[] la = ia;\n        Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));\n        Integer[] ia = null;\n        Type caType = getClass().getField(\"intWildcardComparable\").getGenericType();\n        intWildcardComparable = ia;\n        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));\n        // int[] ina = ia;\n        Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));\n        int[] ina = null;\n        Object[] oa;\n        // oa = ina;\n        Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));\n        oa = new Integer[0];\n        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));\n        Type bClassType = AClass.class.getField(\"bClass\").getGenericType();\n        Type cClassType = AClass.class.getField(\"cClass\").getGenericType();\n        Type dClassType = AClass.class.getField(\"dClass\").getGenericType();\n        Type eClassType = AClass.class.getField(\"eClass\").getGenericType();\n        Type fClassType = AClass.class.getField(\"fClass\").getGenericType();\n        AClass aClass = new AClass(new AAClass<String>());\n        aClass.bClass = aClass.cClass;\n        Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));\n        aClass.bClass = aClass.dClass;\n        Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));\n        aClass.bClass = aClass.eClass;\n        Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));\n        aClass.bClass = aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));\n        aClass.cClass = aClass.dClass;\n        Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));\n        aClass.cClass = aClass.eClass;\n        Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));\n        aClass.cClass = aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));\n        aClass.dClass = aClass.eClass;\n        Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));\n        aClass.dClass = aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));\n        aClass.eClass = aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: type class org.apache.commons.lang3.reflect.TypeUtilsTest$Thing not assignable to org.apache.commons.lang3.reflect.TypeUtilsTest$This<java.lang.String, java.lang.String>!\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertFalse(Assert.java:64)\n\tat org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable(TypeUtilsTest.java:344)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: type class org.apache.commons.lang3.reflect.TypeUtilsTest$Thing not assignable to org.apache.commons.lang3.reflect.TypeUtilsTest$This<java.lang.String, java.lang.String>!\n\tat org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable(TypeUtilsTest.java:344)  Assert.assertFalse(String.format(\"type %s not assignable to %s!\", dingType, disType),                TypeUtils.isAssignable(dingType, disType));",
                "failed_line": 344
            }
        }
    },
    "Lang_20": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 3289,
                "end_loc": 3309,
                "buggy_function": "    public static String join(Object[] array, char separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        int noOfItems = (endIndex - startIndex);\n        if (noOfItems <= 0) {\n            return EMPTY;\n        }\n        \n        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }\n",
                "fixed_function": "    public static String join(Object[] array, char separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        int noOfItems = (endIndex - startIndex);\n        if (noOfItems <= 0) {\n            return EMPTY;\n        }\n        \n        StringBuilder buf = new StringBuilder(noOfItems * 16);\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }\n",
                "comment": "    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayChar"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 3368,
                "end_loc": 3394,
                "buggy_function": "    public static String join(Object[] array, String separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        if (separator == null) {\n            separator = EMPTY;\n        }\n\n        // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator))\n        //           (Assuming that all Strings are roughly equally long)\n        int noOfItems = (endIndex - startIndex);\n        if (noOfItems <= 0) {\n            return EMPTY;\n        }\n\n        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }\n",
                "fixed_function": "    public static String join(Object[] array, String separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        if (separator == null) {\n            separator = EMPTY;\n        }\n\n        // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator))\n        //           (Assuming that all Strings are roughly equally long)\n        int noOfItems = (endIndex - startIndex);\n        if (noOfItems <= 0) {\n            return EMPTY;\n        }\n\n        StringBuilder buf = new StringBuilder(noOfItems * 16);\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }\n",
                "comment": "    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayChar": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
                "function_name": "testJoin_ArrayChar",
                "src": "    public void testJoin_ArrayChar() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.join(StringUtils.java:3298)\n\tat org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayChar(StringUtilsTest.java:209)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.join(StringUtils.java:3298)  StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n\tat org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayChar(StringUtilsTest.java:209)  assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));",
                "failed_line": 209
            },
            "org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
                "function_name": "testJoin_Objectarray",
                "src": "    public void testJoin_Objectarray() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast\n        // test additional varargs calls\n        assertEquals(\"\", StringUtils.join()); // empty array\n        assertEquals(\"\", StringUtils.join((Object) null)); // => new Object[]{null}\n\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));\n        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.join(StringUtils.java:3383)\n\tat org.apache.commons.lang3.StringUtils.join(StringUtils.java:3338)\n\tat org.apache.commons.lang3.StringUtils.join(StringUtils.java:3230)\n\tat org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray(StringUtilsTest.java:193)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.join(StringUtils.java:3383)  StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n\tat org.apache.commons.lang3.StringUtils.join(StringUtils.java:3338)  return join(array, separator, 0, array.length);\n\tat org.apache.commons.lang3.StringUtils.join(StringUtils.java:3230)  return join(elements, null);\n\tat org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray(StringUtilsTest.java:193)  assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));",
                "failed_line": 193
            }
        }
    },
    "Lang_30": {
        "function_num": 6,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1371,
                "end_loc": 1387,
                "buggy_function": "    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "fixed_function": "    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        // ch is a supplementary character\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return i;\n                        }\n                    } else {\n                        return i;\n                    }\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "comment": "    // IndexOfAny chars\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars",
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1443,
                "end_loc": 1468,
                "buggy_function": "    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
                "fixed_function": "    public static boolean containsAny(String cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return true;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n",
                "comment": "    // ContainsAny\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1497,
                "end_loc": 1502,
                "buggy_function": "    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                "fixed_function": "    public static boolean containsAny(String cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }\n",
                "comment": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1528,
                "end_loc": 1545,
                "buggy_function": "    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "fixed_function": "    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            continue outer;\n                        }\n                    } else {\n                        continue outer;\n                    }\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "comment": "    // IndexOfAnyBut chars\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1569,
                "end_loc": 1581,
                "buggy_function": "    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "fixed_function": "    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            boolean chFound = searchChars.indexOf(ch) >= 0;\n            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {\n                char ch2 = str.charAt(i + 1);\n                if (chFound && searchChars.indexOf(ch2) < 0) {\n                    return i;\n                }\n            } else {\n                if (!chFound) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n",
                "comment": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "start_loc": 1673,
                "end_loc": 1690,
                "buggy_function": "    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }\n",
                "fixed_function": "    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return false;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return false;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n",
                "comment": "    // ContainsNone\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsNone_CharArrayWithSupplementaryChars",
                "src": "    public void testContainsNone_CharArrayWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:327)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:327)  assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));",
                "failed_line": 327
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsNone_StringWithSupplementaryChars",
                "src": "    public void testContainsNone_StringWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:381)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:381)  assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));",
                "failed_line": 381
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsAny_StringCharArrayWithBadSupplementaryChars",
                "src": "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:138)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:138)  assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));",
                "failed_line": 138
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testIndexOfAnyBut_StringStringWithSupplementaryChars",
                "src": "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        \n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:616)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:616)  assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));",
                "failed_line": 616
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsAny_StringWithBadSupplementaryChars",
                "src": "    public void testContainsAny_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:186)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:186)  assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));",
                "failed_line": 186
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testIndexOfAny_StringCharArrayWithSupplementaryChars",
                "src": "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    \n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:528)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:528)  assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));",
                "failed_line": 528
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars",
                "src": "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        \n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:593)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<2> but was:<3>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArrayWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:593)  assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));",
                "failed_line": 593
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsNone_StringWithBadSupplementaryChars",
                "src": "    public void testContainsNone_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        \n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:362)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:362)  assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));",
                "failed_line": 362
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testIndexOfAny_StringStringWithSupplementaryChars",
                "src": "    public void testIndexOfAny_StringStringWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    \n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:571)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<2> but was:<0>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringWithSupplementaryChars(StringUtilsEqualsIndexOfTest.java:571)  assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));",
                "failed_line": 571
            },
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars": {
                "path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
                "function_name": "testContainsNone_CharArrayWithBadSupplementaryChars",
                "src": "    public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:174)\n\tat junit.framework.Assert.assertEquals(Assert.java:181)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:341)\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:308)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithBadSupplementaryChars(StringUtilsEqualsIndexOfTest.java:308)  assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));",
                "failed_line": 308
            }
        }
    },
    "Lang_34": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
                "start_loc": 147,
                "end_loc": 149,
                "buggy_function": "    static Map<Object, Object> getRegistry() {\n        return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n    }\n",
                "fixed_function": "    static Map<Object, Object> getRegistry() {\n        return REGISTRY.get();\n    }\n",
                "comment": "    /**\n     * <p>\n     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\n     * methods in the current thread.\n     * </p>\n     *\n     * @return Set the registry of objects being traversed\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray",
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
                "start_loc": 162,
                "end_loc": 165,
                "buggy_function": "    static boolean isRegistered(Object value) {\n        Map<Object, Object> m = getRegistry();\n        return m.containsKey(value);\n    }\n",
                "fixed_function": "    static boolean isRegistered(Object value) {\n        Map<Object, Object> m = getRegistry();\n        return m != null && m.containsKey(value);\n    }\n",
                "comment": "    /**\n     * <p>\n     * Returns <code>true</code> if the registry contains the given object.\n     * Used by the reflection methods to avoid infinite loops.\n     * </p>\n     *\n     * @param value\n     *                  The object to lookup in the registry.\n     * @return boolean <code>true</code> if the registry contains the given\n     *             object.\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testObjectCycle",
                "src": "    public void testObjectCycle() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n\n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        assertEquals(expected, a.toString());\n        validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle(ToStringBuilderTest.java:837)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testObjectCycle(ToStringBuilderTest.java:837)  validateNullToStringStyleRegistry();",
                "failed_line": 837
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionHierarchy",
                "src": "    public void testReflectionHierarchy() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));\n        assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));\n        assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));\n        assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy(ToStringBuilderTest.java:335)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionHierarchy(ToStringBuilderTest.java:335)  this.validateNullToStringStyleRegistry();",
                "failed_line": 335
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testSelfInstanceTwoVarsReflectionObjectCycle",
                "src": "    public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception {\n        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle(ToStringBuilderTest.java:533)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle(ToStringBuilderTest.java:533)  this.validateNullToStringStyleRegistry();",
                "failed_line": 533
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionArrayCycle",
                "src": "    public void testReflectionArrayCycle() throws Exception {\n        Object[] objects = new Object[1];\n        objects[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n            ToStringBuilder.reflectionToString(objects));\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle(ToStringBuilderTest.java:382)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycle(ToStringBuilderTest.java:382)  this.validateNullToStringStyleRegistry();",
                "failed_line": 382
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionLongArrayArray",
                "src": "    public void testReflectionLongArrayArray() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray(ToStringBuilderTest.java:243)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArrayArray(ToStringBuilderTest.java:243)  this.validateNullToStringStyleRegistry();",
                "failed_line": 243
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionArrayArrayCycle",
                "src": "    public void testReflectionArrayArrayCycle() throws Exception {\n        Object[][] objects = new Object[2][2];\n        objects[0][0] = objects;\n        objects[0][1] = objects;\n        objects[1][0] = objects;\n        objects[1][1] = objects;\n        String basicToString = this.toBaseString(objects);\n        assertEquals(\n            basicToString\n                + \"[{{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"},{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle(ToStringBuilderTest.java:421)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayArrayCycle(ToStringBuilderTest.java:421)  this.validateNullToStringStyleRegistry();",
                "failed_line": 421
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionFloatArray",
                "src": "    public void testReflectionFloatArray() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray(ToStringBuilderTest.java:213)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArray(ToStringBuilderTest.java:213)  this.validateNullToStringStyleRegistry();",
                "failed_line": 213
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionDoubleArrayArray",
                "src": "    public void testReflectionDoubleArrayArray() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray(ToStringBuilderTest.java:288)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArrayArray(ToStringBuilderTest.java:288)  this.validateNullToStringStyleRegistry();",
                "failed_line": 288
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionBooleanArray",
                "src": "    public void testReflectionBooleanArray() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray(ToStringBuilderTest.java:222)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArray(ToStringBuilderTest.java:222)  this.validateNullToStringStyleRegistry();",
                "failed_line": 222
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionyteArray",
                "src": "    public void testReflectionyteArray() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray(ToStringBuilderTest.java:186)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionyteArray(ToStringBuilderTest.java:186)  this.validateNullToStringStyleRegistry();",
                "failed_line": 186
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionDoubleArray",
                "src": "    public void testReflectionDoubleArray() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray(ToStringBuilderTest.java:204)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionDoubleArray(ToStringBuilderTest.java:204)  this.validateNullToStringStyleRegistry();",
                "failed_line": 204
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionIntArrayArray",
                "src": "    public void testReflectionIntArrayArray() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray(ToStringBuilderTest.java:252)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArrayArray(ToStringBuilderTest.java:252)  this.validateNullToStringStyleRegistry();",
                "failed_line": 252
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionLongArray",
                "src": "    public void testReflectionLongArray() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray(ToStringBuilderTest.java:159)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionLongArray(ToStringBuilderTest.java:159)  this.validateNullToStringStyleRegistry();",
                "failed_line": 159
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionhortArrayArray",
                "src": "    public void testReflectionhortArrayArray() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray(ToStringBuilderTest.java:261)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionhortArrayArray(ToStringBuilderTest.java:261)  this.validateNullToStringStyleRegistry();",
                "failed_line": 261
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionObjectArray",
                "src": "    public void testReflectionObjectArray() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray(ToStringBuilderTest.java:150)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectArray(ToStringBuilderTest.java:150)  this.validateNullToStringStyleRegistry();",
                "failed_line": 150
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionObjectCycle",
                "src": "    public void testReflectionObjectCycle() throws Exception {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        assertEquals(\n            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n            a.toString());\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle(ToStringBuilderTest.java:550)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionObjectCycle(ToStringBuilderTest.java:550)  this.validateNullToStringStyleRegistry();",
                "failed_line": 550
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionBooleanArrayArray",
                "src": "    public void testReflectionBooleanArrayArray() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray(ToStringBuilderTest.java:298)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionBooleanArrayArray(ToStringBuilderTest.java:298)  this.validateNullToStringStyleRegistry();",
                "failed_line": 298
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testSimpleReflectionObjectCycle",
                "src": "    public void testSimpleReflectionObjectCycle() throws Exception {\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n        simple.o = simple;\n        assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle(ToStringBuilderTest.java:510)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle(ToStringBuilderTest.java:510)  this.validateNullToStringStyleRegistry();",
                "failed_line": 510
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionByteArrayArray",
                "src": "    public void testReflectionByteArrayArray() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray(ToStringBuilderTest.java:270)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionByteArrayArray(ToStringBuilderTest.java:270)  this.validateNullToStringStyleRegistry();",
                "failed_line": 270
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionArrayCycleLevel2",
                "src": "    public void testReflectionArrayCycleLevel2() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));\n        assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2(ToStringBuilderTest.java:399)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2(ToStringBuilderTest.java:399)  this.validateNullToStringStyleRegistry();",
                "failed_line": 399
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionArrayAndObjectCycle",
                "src": "    public void testReflectionArrayAndObjectCycle() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));\n        assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle(ToStringBuilderTest.java:578)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle(ToStringBuilderTest.java:578)  this.validateNullToStringStyleRegistry();",
                "failed_line": 578
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionCharArrayArray",
                "src": "    public void testReflectionCharArrayArray() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray(ToStringBuilderTest.java:279)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArrayArray(ToStringBuilderTest.java:279)  this.validateNullToStringStyleRegistry();",
                "failed_line": 279
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionShortArray",
                "src": "    public void testReflectionShortArray() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray(ToStringBuilderTest.java:177)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionShortArray(ToStringBuilderTest.java:177)  this.validateNullToStringStyleRegistry();",
                "failed_line": 177
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testSelfInstanceVarReflectionObjectCycle",
                "src": "    public void testSelfInstanceVarReflectionObjectCycle() throws Exception {\n        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle(ToStringBuilderTest.java:521)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle(ToStringBuilderTest.java:521)  this.validateNullToStringStyleRegistry();",
                "failed_line": 521
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionIntArray",
                "src": "    public void testReflectionIntArray() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray(ToStringBuilderTest.java:168)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionIntArray(ToStringBuilderTest.java:168)  this.validateNullToStringStyleRegistry();",
                "failed_line": 168
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionCharArray",
                "src": "    public void testReflectionCharArray() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray(ToStringBuilderTest.java:195)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionCharArray(ToStringBuilderTest.java:195)  this.validateNullToStringStyleRegistry();",
                "failed_line": 195
            },
            "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray": {
                "path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
                "function_name": "testReflectionFloatArrayArray",
                "src": "    public void testReflectionFloatArrayArray() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n        array = null;\n        assertReflectionArray(\"<null>\", array);\n        this.validateNullToStringStyleRegistry();\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.Assert.assertNull(Assert.java:268)\n\tat junit.framework.TestCase.assertNull(TestCase.java:438)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray(ToStringBuilderTest.java:233)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: {}\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.validateNullToStringStyleRegistry(ToStringBuilderTest.java:586)  assertNull(ToStringStyle.getRegistry());\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testReflectionFloatArrayArray(ToStringBuilderTest.java:233)  this.validateNullToStringStyleRegistry();",
                "failed_line": 233
            }
        }
    },
    "Lang_35": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
                "start_loc": 3288,
                "end_loc": 3301,
                "buggy_function": "    public static <T> T[] add(T[] array, T element) {\n        Class<?> type;\n        if (array != null){\n            type = array.getClass();\n        } else if (element != null) {\n            type = element.getClass();\n        } else {\n            type = Object.class;\n        }\n        @SuppressWarnings(\"unchecked\") // type must be T\n        T[] newArray = (T[]) copyArrayGrow1(array, type);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }\n",
                "fixed_function": "    public static <T> T[] add(T[] array, T element) {\n        Class<?> type;\n        if (array != null){\n            type = array.getClass();\n        } else if (element != null) {\n            type = element.getClass();\n        } else {\n            throw new IllegalArgumentException(\"Arguments cannot both be null\");            \n        }\n        @SuppressWarnings(\"unchecked\") // type must be T\n        T[] newArray = (T[]) copyArrayGrow1(array, type);\n        newArray[newArray.length - 1] = element;\n        return newArray;\n    }\n",
                "comment": "    /**\n     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n     *\n     * <p>The new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element, unless the element itself is null,\n     *  in which case the return type is Object[]</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, null)      = [null]\n     * ArrayUtils.add(null, \"a\")       = [\"a\"]\n     * ArrayUtils.add([\"a\"], null)     = [\"a\", null]\n     * ArrayUtils.add([\"a\"], \"b\")      = [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param array  the array to \"add\" the element to, may be <code>null</code>\n     * @param element  the object to add, may be <code>null</code>\n     * @return A new array containing the existing elements plus the new element\n     * The returned array type will be that of the input array (unless null),\n     * in which case it will have the same type as the element.\n     * If both are null, an IllegalArgumentException is thrown\n     * @since 2.1\n     * @throws IllegalArgumentException if both arguments are null\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testLANG571"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
                "start_loc": 3567,
                "end_loc": 3579,
                "buggy_function": "    public static <T> T[] add(T[] array, int index, T element) {\n        Class<?> clss = null;\n        if (array != null) {\n            clss = array.getClass().getComponentType();\n        } else if (element != null) {\n            clss = element.getClass();\n        } else {\n            return (T[]) new Object[] { null };\n        }\n        @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n        final T[] newArray = (T[]) add(array, index, element, clss);\n        return newArray;\n    }\n",
                "fixed_function": "    public static <T> T[] add(T[] array, int index, T element) {\n        Class<?> clss = null;\n        if (array != null) {\n            clss = array.getClass().getComponentType();\n        } else if (element != null) {\n            clss = element.getClass();\n        } else {\n            throw new IllegalArgumentException(\"Array and element cannot both be null\");            \n        }\n        @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n        final T[] newArray = (T[]) add(array, index, element, clss);\n        return newArray;\n    }\n",
                "comment": "    /**\n     * <p>Inserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).</p>\n     *\n     * <p>This method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.</p>\n     *\n     * <p>If the input array is <code>null</code>, a new one element array is returned\n     *  whose component type is the same as the element.</p>\n     *\n     * <pre>\n     * ArrayUtils.add(null, 0, null)      = [null]\n     * ArrayUtils.add(null, 0, \"a\")       = [\"a\"]\n     * ArrayUtils.add([\"a\"], 1, null)     = [\"a\", null]\n     * ArrayUtils.add([\"a\"], 1, \"b\")      = [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param array  the array to add the element to, may be <code>null</code>\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index < 0 || index > array.length).\n     * @throws IllegalArgumentException if both array and element are null\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testLANG571"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang3.ArrayUtilsAddTest::testLANG571": {
                "path": "src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java",
                "function_name": "testLANG571",
                "src": "    public void testLANG571(){\n        String[] stringArray=null;\n        String aString=null;\n        try {\n            @SuppressWarnings(\"unused\")\n            String[] sa = ArrayUtils.add(stringArray, aString);\n            fail(\"Should have caused IllegalArgumentException\");\n        } catch (IllegalArgumentException iae){\n            //expected\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            String[] sa = ArrayUtils.add(stringArray, 0, aString);\n            fail(\"Should have caused IllegalArgumentException\");\n        } catch (IllegalArgumentException iae){\n            //expected\n        }\n    }",
                "stack_trace": "java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testLANG571(ArrayUtilsAddTest.java:232)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testLANG571(ArrayUtilsAddTest.java:232)  String[] sa = ArrayUtils.add(stringArray, aString);",
                "failed_line": 232
            }
        }
    },
    "Lang_36": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/java/org/apache/commons/lang3/math/NumberUtils.java",
                "start_loc": 448,
                "end_loc": 595,
                "buggy_function": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }  \n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }   \n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar)) {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n\n            }\n        }\n    }\n",
                "fixed_function": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }  \n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear \n            // to be in specification of class. OS X Java parses it to \n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }   \n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n\n            }\n        }\n    }\n",
                "comment": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber"
                ]
            },
            {
                "path": "src/java/org/apache/commons/lang3/math/NumberUtils.java",
                "start_loc": 1312,
                "end_loc": 1406,
                "buggy_function": "    public static boolean isNumber(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        int sz = chars.length;\n        boolean hasExp = false;\n        boolean hasDecPoint = false;\n        boolean allowSigns = false;\n        boolean foundDigit = false;\n        // deal with any possible sign up front\n        int start = (chars[0] == '-') ? 1 : 0;\n        if (sz > start + 1) {\n            if (chars[start] == '0' && chars[start + 1] == 'x') {\n                int i = start + 2;\n                if (i == sz) {\n                    return false; // str == \"0x\"\n                }\n                // checking hex (it can't be anything else)\n                for (; i < chars.length; i++) {\n                    if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        sz--; // don't want to loop to the last char, check it afterwords\n              // for type qualifiers\n        int i = start;\n        // loop to the next to last char or to the last char if we need another digit to\n        // make a valid number (e.g. chars[0..5] = \"1234E\")\n        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                foundDigit = true;\n                allowSigns = false;\n\n            } else if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    // two decimal points or dec in exponent   \n                    return false;\n                }\n                hasDecPoint = true;\n            } else if (chars[i] == 'e' || chars[i] == 'E') {\n                // we've already taken care of hex.\n                if (hasExp) {\n                    // two E's\n                    return false;\n                }\n                if (!foundDigit) {\n                    return false;\n                }\n                hasExp = true;\n                allowSigns = true;\n            } else if (chars[i] == '+' || chars[i] == '-') {\n                if (!allowSigns) {\n                    return false;\n                }\n                allowSigns = false;\n                foundDigit = false; // we need a digit after the E\n            } else {\n                return false;\n            }\n            i++;\n        }\n        if (i < chars.length) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                // no type qualifier, OK\n                return true;\n            }\n            if (chars[i] == 'e' || chars[i] == 'E') {\n                // can't have an E at the last byte\n                return false;\n            }\n            if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F')) {\n                return foundDigit;\n            }\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent\n                return foundDigit && !hasExp;\n            }\n            // last character is illegal\n            return false;\n        }\n        // allowSigns is true iff the val ends in 'E'\n        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n        return !allowSigns && foundDigit;\n    }\n",
                "fixed_function": "    public static boolean isNumber(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        int sz = chars.length;\n        boolean hasExp = false;\n        boolean hasDecPoint = false;\n        boolean allowSigns = false;\n        boolean foundDigit = false;\n        // deal with any possible sign up front\n        int start = (chars[0] == '-') ? 1 : 0;\n        if (sz > start + 1) {\n            if (chars[start] == '0' && chars[start + 1] == 'x') {\n                int i = start + 2;\n                if (i == sz) {\n                    return false; // str == \"0x\"\n                }\n                // checking hex (it can't be anything else)\n                for (; i < chars.length; i++) {\n                    if ((chars[i] < '0' || chars[i] > '9')\n                        && (chars[i] < 'a' || chars[i] > 'f')\n                        && (chars[i] < 'A' || chars[i] > 'F')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        sz--; // don't want to loop to the last char, check it afterwords\n              // for type qualifiers\n        int i = start;\n        // loop to the next to last char or to the last char if we need another digit to\n        // make a valid number (e.g. chars[0..5] = \"1234E\")\n        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                foundDigit = true;\n                allowSigns = false;\n\n            } else if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    // two decimal points or dec in exponent   \n                    return false;\n                }\n                hasDecPoint = true;\n            } else if (chars[i] == 'e' || chars[i] == 'E') {\n                // we've already taken care of hex.\n                if (hasExp) {\n                    // two E's\n                    return false;\n                }\n                if (!foundDigit) {\n                    return false;\n                }\n                hasExp = true;\n                allowSigns = true;\n            } else if (chars[i] == '+' || chars[i] == '-') {\n                if (!allowSigns) {\n                    return false;\n                }\n                allowSigns = false;\n                foundDigit = false; // we need a digit after the E\n            } else {\n                return false;\n            }\n            i++;\n        }\n        if (i < chars.length) {\n            if (chars[i] >= '0' && chars[i] <= '9') {\n                // no type qualifier, OK\n                return true;\n            }\n            if (chars[i] == 'e' || chars[i] == 'E') {\n                // can't have an E at the last byte\n                return false;\n            }\n            if (chars[i] == '.') {\n                if (hasDecPoint || hasExp) {\n                    // two decimal points or dec in exponent\n                    return false;\n                }\n                // single trailing decimal point after non-exponent is ok\n                return foundDigit;\n            }\n            if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F')) {\n                return foundDigit;\n            }\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent\n                return foundDigit && !hasExp;\n            }\n            // last character is illegal\n            return false;\n        }\n        // allowSigns is true iff the val ends in 'E'\n        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n        return !allowSigns && foundDigit;\n    }\n",
                "comment": "    /**\n     * <p>Checks whether the String a valid Java number.</p>\n     *\n     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n     * qualifier, scientific notation and numbers marked with a type\n     * qualifier (e.g. 123L).</p>\n     *\n     * <p><code>Null</code> and empty String will return\n     * <code>false</code>.</p>\n     *\n     * @param str  the <code>String</code> to check\n     * @return <code>true</code> if the string is a correctly formatted number\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber": {
                "path": "src/test/org/apache/commons/lang3/math/NumberUtilsTest.java",
                "function_name": "testCreateNumber",
                "src": "    public void testCreateNumber() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n        assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n        assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));\n        }\n        assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n        assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", new Float(\"2.\"), NumberUtils.createNumber(\"2.\"));\n    }",
                "stack_trace": "java.lang.NumberFormatException: 2. is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:546)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber(NumberUtilsTest.java:213)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NumberFormatException: 2. is not a valid number.\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:546)  throw new NumberFormatException(str + \" is not a valid number.\");\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber(NumberUtilsTest.java:213)  assertEquals(\"createNumber(String) LANG-521 failed\", new Float(\"2.\"), NumberUtils.createNumber(\"2.\"));",
                "failed_line": 213
            },
            "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber": {
                "path": "src/test/org/apache/commons/lang3/math/NumberUtilsTest.java",
                "function_name": "testIsNumber",
                "src": "    public void testIsNumber() {\n        String val = \"12345\";\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n        val = \"1234.5\";\n        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n        val = \".12345\";\n        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n        val = \"1234E5\";\n        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n        val = \"1234E+5\";\n        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n        val = \"1234E-5\";\n        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n        val = \"123.4E5\";\n        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n        val = \"-1234\";\n        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n        val = \"-1234.5\";\n        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n        val = \"-.12345\";\n        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n        val = \"-1234E5\";\n        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n        val = \"0\";\n        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n        val = \"-0\";\n        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n        val = \"01234\";\n        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n        val = \"-01234\";\n        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n        val = \"0xABC123\";\n        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n        val = \"0x0\";\n        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n        val = \"123.4E21D\";\n        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n        val = \"-221.23F\";\n        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n        val = \"22338L\";\n        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n        val = null;\n        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n        val = \"\";\n        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n        val = \"--2.3\";\n        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n        val = \".12.3\";\n        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E\";\n        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E+-212\";\n        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n        val = \"-123E2.12\";\n        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n        val = \"0xGF\";\n        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n        val = \"0xFAE-1\";\n        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n        val = \".\";\n        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n        val = \"-0ABC123\";\n        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4E-D\";\n        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n        val = \"123.4ED\";\n        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n        val = \"1234E5l\";\n        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n        val = \"11a\";\n        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n        val = \"1a\";\n        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n        val = \"a\";\n        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n        val = \"11g\";\n        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n        val = \"11z\";\n        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n        val = \"11def\";\n        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n        val = \"11d11\";\n        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n        val = \"11 11\";\n        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n        val = \" 1111\";\n        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n        val = \"1111 \";\n        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n\n        // LANG-521\n        val = \"2.\";\n        assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: isNumber(String) LANG-521 failed\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber(NumberUtilsTest.java:1138)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: isNumber(String) LANG-521 failed\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber(NumberUtilsTest.java:1138)  assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));",
                "failed_line": 1138
            }
        }
    },
    "Lang_41": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/java/org/apache/commons/lang/ClassUtils.java",
                "start_loc": 183,
                "end_loc": 204,
                "buggy_function": "    public static String getShortClassName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n\n        // Handle array encoding\n            // Strip Object type encoding\n\n\n        int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        int innerIdx = className.indexOf(\n                INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);\n        String out = className.substring(lastDotIdx + 1);\n        if (innerIdx != -1) {\n            out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n        }\n        return out;\n    }\n",
                "fixed_function": "    public static String getShortClassName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        StringBuffer arrayPrefix = new StringBuffer();\n\n        // Handle array encoding\n        if (className.startsWith(\"[\")) {\n            while (className.charAt(0) == '[') {\n                className = className.substring(1);\n                arrayPrefix.append(\"[]\");\n            }\n            // Strip Object type encoding\n            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n                className = className.substring(1, className.length() - 1);\n            }\n        }\n\n        if (reverseAbbreviationMap.containsKey(className)) {\n            className = reverseAbbreviationMap.get(className);\n        }\n\n        int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        int innerIdx = className.indexOf(\n                INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);\n        String out = className.substring(lastDotIdx + 1);\n        if (innerIdx != -1) {\n            out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n        }\n        return out + arrayPrefix;\n    }\n",
                "comment": "    /**\n     * <p>Gets the class name minus the package name from a String.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     *\n     * @param className  the className to get the short name for\n     * @return the class name of the class without the package name or an empty string\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class"
                ]
            },
            {
                "path": "src/java/org/apache/commons/lang/ClassUtils.java",
                "start_loc": 244,
                "end_loc": 257,
                "buggy_function": "    public static String getPackageName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n\n        // Strip array encoding\n        // Strip Object type encoding\n\n        int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        if (i == -1) {\n            return StringUtils.EMPTY;\n        }\n        return className.substring(0, i);\n    }\n",
                "fixed_function": "    public static String getPackageName(String className) {\n        if (className == null || className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // Strip array encoding\n        while (className.charAt(0) == '[') {\n            className = className.substring(1);\n        }\n        // Strip Object type encoding\n        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n            className = className.substring(1);\n        }\n\n        int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        if (i == -1) {\n            return StringUtils.EMPTY;\n        }\n        return className.substring(0, i);\n    }\n",
                "comment": "    /**\n     * <p>Gets the package name from a <code>String</code>.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     * <p>If the class is unpackaged, return an empty string.</p>\n     *\n     * @param className  the className to get the package name for, may be <code>null</code>\n     * @return the package name or an empty string\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class": {
                "path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
                "function_name": "test_getShortClassName_Class",
                "src": "    public void test_getShortClassName_Class() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getShortClassName((Class) null));\n\n        // LANG-535\n        assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));\n        assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));\n\n        // Primitives\n        assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));\n        assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));\n        assertEquals(\"char\", ClassUtils.getShortClassName(char.class));\n        assertEquals(\"short\", ClassUtils.getShortClassName(short.class));\n        assertEquals(\"int\", ClassUtils.getShortClassName(int.class));\n        assertEquals(\"long\", ClassUtils.getShortClassName(long.class));\n        assertEquals(\"float\", ClassUtils.getShortClassName(float.class));\n        assertEquals(\"double\", ClassUtils.getShortClassName(double.class));\n\n        // Primitive Arrays\n        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));\n        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));\n        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));\n        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));\n        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));\n        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));\n        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));\n        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));\n\n        // Arrays of arrays of ...\n        assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));\n        assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\n        assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.apache.commons.lang.ClassUtilsTest.test_getShortClassName_Class(ClassUtilsTest.java:97)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat org.apache.commons.lang.ClassUtilsTest.test_getShortClassName_Class(ClassUtilsTest.java:97)  assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));",
                "failed_line": 97
            },
            "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class": {
                "path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
                "function_name": "test_getPackageName_Class",
                "src": "    public void test_getPackageName_Class() {\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getPackageName((Class)null));\n\n        // LANG-535\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));\n\n        // Primitive Arrays\n        assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(byte[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(char[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(short[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(int[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(long[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(float[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(double[].class));\n\n        // Arrays of arrays of ...\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<[]java.lang> but was:<[[L]java.lang>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.apache.commons.lang.ClassUtilsTest.test_getPackageName_Class(ClassUtilsTest.java:146)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<[]java.lang> but was:<[[L]java.lang>\n\tat org.apache.commons.lang.ClassUtilsTest.test_getPackageName_Class(ClassUtilsTest.java:146)  assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));",
                "failed_line": 146
            }
        }
    },
    "Lang_47": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
                "start_loc": 1182,
                "end_loc": 1199,
                "buggy_function": "    public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(strLen - width, strLen, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + i] = padChar;\n                }\n                str.getChars(0, strLen, buffer, size + padLen);\n            }\n            size += width;\n        }\n        return this;\n    }\n",
                "fixed_function": "    public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            if (str == null) {\n                str = \"\";\n            }\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(strLen - width, strLen, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + i] = padChar;\n                }\n                str.getChars(0, strLen, buffer, size + padLen);\n            }\n            size += width;\n        }\n        return this;\n    }\n",
                "comment": "    //-----------------------------------------------------------------------\n    /**\n     * Appends an object to the builder padding on the left to a fixed width.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the left hand side is lost.\n     * If the object is null, the null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testLang412Left"
                ]
            },
            {
                "path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
                "start_loc": 1226,
                "end_loc": 1243,
                "buggy_function": "    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(0, width, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + strLen + i] = padChar;\n                }\n            }\n            size += width;\n        }\n        return this;\n    }\n",
                "fixed_function": "    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n        if (width > 0) {\n            ensureCapacity(size + width);\n            String str = (obj == null ? getNullText() : obj.toString());\n            if (str == null) {\n                str = \"\";\n            }\n            int strLen = str.length();\n            if (strLen >= width) {\n                str.getChars(0, width, buffer, size);\n            } else {\n                int padLen = width - strLen;\n                str.getChars(0, strLen, buffer, size);\n                for (int i = 0; i < padLen; i++) {\n                    buffer[size + strLen + i] = padChar;\n                }\n            }\n            size += width;\n        }\n        return this;\n    }\n",
                "comment": "    /**\n     * Appends an object to the builder padding on the right to a fixed length.\n     * The <code>toString</code> of the object is used.\n     * If the object is larger than the length, the right hand side is lost.\n     * If the object is null, null text value is used.\n     * \n     * @param obj  the object to append, null uses null text\n     * @param width  the fixed field width, zero or negative has no effect\n     * @param padChar  the pad character to use\n     * @return this, to enable chaining\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testLang412Right"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang.text.StrBuilderTest::testLang412Left": {
                "path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
                "function_name": "testLang412Left",
                "src": "    public void testLang412Left() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadLeft(null, 10, '*');\n        assertEquals( \"Failed to invoke appendFixedWidthPadLeft correctly\", \"**********\", sb.toString());\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadLeft(StrBuilder.java:1186)\n\tat org.apache.commons.lang.text.StrBuilderTest.testLang412Left(StrBuilderTest.java:1761)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadLeft(StrBuilder.java:1186)  int strLen = str.length();\n\tat org.apache.commons.lang.text.StrBuilderTest.testLang412Left(StrBuilderTest.java:1761)  sb.appendFixedWidthPadLeft(null, 10, '*');",
                "failed_line": 1761
            },
            "org.apache.commons.lang.text.StrBuilderTest::testLang412Right": {
                "path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
                "function_name": "testLang412Right",
                "src": "    public void testLang412Right() {\n        StrBuilder sb = new StrBuilder();\n        sb.appendFixedWidthPadRight(null, 10, '*');\n        assertEquals( \"Failed to invoke appendFixedWidthPadRight correctly\", \"**********\", sb.toString());\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadRight(StrBuilder.java:1230)\n\tat org.apache.commons.lang.text.StrBuilderTest.testLang412Right(StrBuilderTest.java:1755)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.apache.commons.lang.text.StrBuilder.appendFixedWidthPadRight(StrBuilder.java:1230)  int strLen = str.length();\n\tat org.apache.commons.lang.text.StrBuilderTest.testLang412Right(StrBuilderTest.java:1755)  sb.appendFixedWidthPadRight(null, 10, '*');",
                "failed_line": 1755
            }
        }
    },
    "Lang_50": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
                "start_loc": 279,
                "end_loc": 306,
                "buggy_function": "    public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n        Object key = new Integer(style);\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n\n        if (locale != null) {\n            key = new Pair(key, locale);\n        }\n\n\n        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n        if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateInstanceCache.put(key, format);\n                \n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }\n",
                "fixed_function": "    public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n        Object key = new Integer(style);\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n\n        key = new Pair(key, locale);\n\n        FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n        if (format == null) {\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateInstanceCache.put(key, format);\n                \n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }\n",
                "comment": "    /**\n     * <p>Gets a date formatter instance using the specified style, time\n     * zone and locale.</p>\n     * \n     * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date formatter\n     * @throws IllegalArgumentException if the Locale has no date\n     *  pattern defined\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance"
                ]
            },
            {
                "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
                "start_loc": 458,
                "end_loc": 486,
                "buggy_function": "    public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale) {\n\n        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n        if (locale != null) {\n            key = new Pair(key, locale);\n        }\n\n        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n        if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateTimeInstanceCache.put(key, format);\n\n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }\n",
                "fixed_function": "    public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale) {\n\n        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        key = new Pair(key, locale);\n\n        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n        if (format == null) {\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateTimeInstanceCache.put(key, format);\n\n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }\n",
                "comment": "    /**\n     * <p>Gets a date/time formatter instance using the specified style,\n     * time zone and locale.</p>\n     * \n     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n     * @param timeZone  optional time zone, overrides time zone of\n     *  formatted date\n     * @param locale  optional locale, overrides system locale\n     * @return a localized standard date/time formatter\n     * @throws IllegalArgumentException if the Locale has no date/time\n     *  pattern defined\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateTimeInstance"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance": {
                "path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
                "function_name": "test_changeDefault_Locale_DateInstance",
                "src": "    public void test_changeDefault_Locale_DateInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotSame(Assert.java:325)\n\tat junit.framework.Assert.assertSame(Assert.java:288)\n\tat junit.framework.Assert.assertSame(Assert.java:296)\n\tat junit.framework.TestCase.assertSame(TestCase.java:465)\n\tat org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>\n\tat org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateInstance(FastDateFormatTest.java:146)  assertSame(Locale.GERMANY, format3.getLocale());",
                "failed_line": 146
            },
            "org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateTimeInstance": {
                "path": "src/test/org/apache/commons/lang/time/FastDateFormatTest.java",
                "function_name": "test_changeDefault_Locale_DateTimeInstance",
                "src": "    public void test_changeDefault_Locale_DateTimeInstance() {\n        Locale realDefaultLocale = Locale.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\n            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n            Locale.setDefault(Locale.GERMANY);\n            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n\n            assertSame(Locale.GERMANY, format1.getLocale());\n            assertSame(Locale.US, format2.getLocale());\n            assertSame(Locale.GERMANY, format3.getLocale());\n            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n            assertTrue(format2 != format3);\n\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n        }\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotSame(Assert.java:325)\n\tat junit.framework.Assert.assertSame(Assert.java:288)\n\tat junit.framework.Assert.assertSame(Assert.java:296)\n\tat junit.framework.TestCase.assertSame(TestCase.java:465)\n\tat org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>\n\tat org.apache.commons.lang.time.FastDateFormatTest.test_changeDefault_Locale_DateTimeInstance(FastDateFormatTest.java:166)  assertSame(Locale.GERMANY, format3.getLocale());",
                "failed_line": 166
            }
        }
    },
    "Lang_60": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
                "start_loc": 1671,
                "end_loc": 1679,
                "buggy_function": "    public boolean contains(char ch) {\n        char[] thisBuf = buffer;\n        for (int i = 0; i < thisBuf.length; i++) {\n            if (thisBuf[i] == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
                "fixed_function": "    public boolean contains(char ch) {\n        char[] thisBuf = buffer;\n        for (int i = 0; i < this.size; i++) {\n            if (thisBuf[i] == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
                "comment": "    //-----------------------------------------------------------------------\n    /**\n     * Checks if the string builder contains the specified char.\n     *\n     * @param ch  the character to find\n     * @return true if the builder contains the character\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testLang295"
                ]
            },
            {
                "path": "src/java/org/apache/commons/lang/text/StrBuilder.java",
                "start_loc": 1724,
                "end_loc": 1736,
                "buggy_function": "    public int indexOf(char ch, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (startIndex >= size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        for (int i = startIndex; i < thisBuf.length; i++) {\n            if (thisBuf[i] == ch) {\n                return i;\n            }\n        }\n        return -1;\n    }\n",
                "fixed_function": "    public int indexOf(char ch, int startIndex) {\n        startIndex = (startIndex < 0 ? 0 : startIndex);\n        if (startIndex >= size) {\n            return -1;\n        }\n        char[] thisBuf = buffer;\n        for (int i = startIndex; i < size; i++) {\n            if (thisBuf[i] == ch) {\n                return i;\n            }\n        }\n        return -1;\n    }\n",
                "comment": "    /**\n     * Searches the string builder to find the first reference to the specified char.\n     * \n     * @param ch  the character to find\n     * @param startIndex  the index to start at, invalid index rounded to edge\n     * @return the first index of the character, or -1 if not found\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testLang295"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang.text.StrBuilderTest::testLang295": {
                "path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
                "function_name": "testLang295",
                "src": "    public void testLang295() {\n        StrBuilder sb = new StrBuilder(\"onetwothree\");\n        sb.deleteFirst(\"three\");\n        assertFalse( \"The contains(char) method is looking beyond the end of the string\", sb.contains('h'));\n        assertEquals( \"The indexOf(char) method is looking beyond the end of the string\", -1, sb.indexOf('h'));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: The contains(char) method is looking beyond the end of the string\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n\tat junit.framework.TestCase.assertFalse(TestCase.java:210)\n\tat org.apache.commons.lang.text.StrBuilderTest.testLang295(StrBuilderTest.java:1748)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: The contains(char) method is looking beyond the end of the string\n\tat org.apache.commons.lang.text.StrBuilderTest.testLang295(StrBuilderTest.java:1748)  assertFalse( \"The contains(char) method is looking beyond the end of the string\", sb.contains('h'));",
                "failed_line": 1748
            }
        }
    },
    "Lang_62": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/java/org/apache/commons/lang/Entities.java",
                "start_loc": 813,
                "end_loc": 870,
                "buggy_function": "    public String unescape(String str) {\n        int firstAmp = str.indexOf('&');\n        if (firstAmp < 0) {\n            return str;\n        }\n\n        StringBuffer buf = new StringBuffer(str.length());\n        buf.append(str.substring(0, firstAmp));\n        for (int i = firstAmp; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            if (ch == '&') {\n                int semi = str.indexOf(';', i + 1);\n                if (semi == -1) {\n                    buf.append(ch);\n                    continue;\n                }\n                int amph = str.indexOf('&', i + 1);\n                if( amph != -1 && amph < semi ) {\n                    // Then the text looks like &...&...;\n                    buf.append(ch);\n                    continue;\n                }\n                String entityName = str.substring(i + 1, semi);\n                int entityValue;\n                if (entityName.length() == 0) {\n                    entityValue = -1;\n                } else if (entityName.charAt(0) == '#') {\n                    if (entityName.length() == 1) {\n                        entityValue = -1;\n                    } else {\n                        char charAt1 = entityName.charAt(1);\n                        try {\n                            if (charAt1 == 'x' || charAt1=='X') {\n                                entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n                            } else {\n                                entityValue = Integer.parseInt(entityName.substring(1));\n                            }\n                        } catch (NumberFormatException ex) {\n                            entityValue = -1;\n                        }\n                    }\n                } else {\n                    entityValue = this.entityValue(entityName);\n                }\n                if (entityValue == -1) {\n                    buf.append('&');\n                    buf.append(entityName);\n                    buf.append(';');\n                } else {\n                    buf.append((char) (entityValue));\n                }\n                i = semi;\n            } else {\n                buf.append(ch);\n            }\n        }\n        return buf.toString();\n    }\n",
                "fixed_function": "    public String unescape(String str) {\n        int firstAmp = str.indexOf('&');\n        if (firstAmp < 0) {\n            return str;\n        }\n\n        StringBuffer buf = new StringBuffer(str.length());\n        buf.append(str.substring(0, firstAmp));\n        for (int i = firstAmp; i < str.length(); ++i) {\n            char ch = str.charAt(i);\n            if (ch == '&') {\n                int semi = str.indexOf(';', i + 1);\n                if (semi == -1) {\n                    buf.append(ch);\n                    continue;\n                }\n                int amph = str.indexOf('&', i + 1);\n                if( amph != -1 && amph < semi ) {\n                    // Then the text looks like &...&...;\n                    buf.append(ch);\n                    continue;\n                }\n                String entityName = str.substring(i + 1, semi);\n                int entityValue;\n                if (entityName.length() == 0) {\n                    entityValue = -1;\n                } else if (entityName.charAt(0) == '#') {\n                    if (entityName.length() == 1) {\n                        entityValue = -1;\n                    } else {\n                        char charAt1 = entityName.charAt(1);\n                        try {\n                            if (charAt1 == 'x' || charAt1=='X') {\n                                entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n                            } else {\n                                entityValue = Integer.parseInt(entityName.substring(1));\n                            }\n                            if (entityValue > 0xFFFF) {\n                                entityValue = -1;\n                            }\n                        } catch (NumberFormatException ex) {\n                            entityValue = -1;\n                        }\n                    }\n                } else {\n                    entityValue = this.entityValue(entityName);\n                }\n                if (entityValue == -1) {\n                    buf.append('&');\n                    buf.append(entityName);\n                    buf.append(';');\n                } else {\n                    buf.append((char) (entityValue));\n                }\n                i = semi;\n            } else {\n                buf.append(ch);\n            }\n        }\n        return buf.toString();\n    }\n",
                "comment": "    /**\n     * <p>Unescapes the entities in a <code>String</code>.</p>\n     *\n     * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),\n     * unescape(&quot;&amp;foo;&quot;) will return &quot;\\u00A1&quot;</p>\n     *\n     * @param str The <code>String</code> to escape.\n     * @return A new escaped <code>String</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.lang.EntitiesTest::testNumberOverflow"
                ]
            },
            {
                "path": "src/java/org/apache/commons/lang/Entities.java",
                "start_loc": 884,
                "end_loc": 945,
                "buggy_function": "    public void unescape(Writer writer, String string) throws IOException {\n        int firstAmp = string.indexOf('&');\n        if (firstAmp < 0) {\n            writer.write(string);\n            return;\n        }\n\n        writer.write(string, 0, firstAmp);\n        int len = string.length();\n        for (int i = firstAmp; i < len; i++) {\n            char c = string.charAt(i);\n            if (c == '&') {\n                int nextIdx = i+1;\n                int semiColonIdx = string.indexOf(';', nextIdx);\n                if (semiColonIdx == -1) {\n                    writer.write(c);\n                    continue;\n                }\n                int amphersandIdx = string.indexOf('&', i + 1);\n                if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {\n                    // Then the text looks like &...&...;\n                    writer.write(c);\n                    continue;\n                }\n                String entityContent = string.substring(nextIdx, semiColonIdx);\n                int entityValue = -1;\n                int entityContentLen = entityContent.length();\n                if (entityContentLen > 0) {\n                    if (entityContent.charAt(0) == '#') { //escaped value content is an integer (decimal or hexidecimal)\n                        if (entityContentLen > 1) {  \n                            char isHexChar = entityContent.charAt(1);\n                            try {\n                                switch (isHexChar) {\n                                    case 'X' :\n                                    case 'x' : {\n                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                    }\n                                    default : {\n                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                    }\n                                }\n                            } catch (NumberFormatException e) {\n                            }\n                        }\n                    } else { //escaped value content is an entity name\n                        entityValue = this.entityValue(entityContent);\n                    }\n                }\n                \n                if (entityValue == -1) {\n                    writer.write('&');\n                    writer.write(entityContent);\n                    writer.write(';');\n                } else {\n                    writer.write(entityValue);\n                }\n                i = semiColonIdx; //move index up to the semi-colon                \n            } else {\n                writer.write(c);\n            }\n        }\n    }\n",
                "fixed_function": "    public void unescape(Writer writer, String string) throws IOException {\n        int firstAmp = string.indexOf('&');\n        if (firstAmp < 0) {\n            writer.write(string);\n            return;\n        }\n\n        writer.write(string, 0, firstAmp);\n        int len = string.length();\n        for (int i = firstAmp; i < len; i++) {\n            char c = string.charAt(i);\n            if (c == '&') {\n                int nextIdx = i+1;\n                int semiColonIdx = string.indexOf(';', nextIdx);\n                if (semiColonIdx == -1) {\n                    writer.write(c);\n                    continue;\n                }\n                int amphersandIdx = string.indexOf('&', i + 1);\n                if( amphersandIdx != -1 && amphersandIdx < semiColonIdx ) {\n                    // Then the text looks like &...&...;\n                    writer.write(c);\n                    continue;\n                }\n                String entityContent = string.substring(nextIdx, semiColonIdx);\n                int entityValue = -1;\n                int entityContentLen = entityContent.length();\n                if (entityContentLen > 0) {\n                    if (entityContent.charAt(0) == '#') { //escaped value content is an integer (decimal or hexidecimal)\n                        if (entityContentLen > 1) {  \n                            char isHexChar = entityContent.charAt(1);\n                            try {\n                                switch (isHexChar) {\n                                    case 'X' :\n                                    case 'x' : {\n                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);\n                                        break;\n                                    }\n                                    default : {\n                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                    }\n                                }\n                                if (entityValue > 0xFFFF) {\n                                    entityValue = -1;\n                                }\n                            } catch (NumberFormatException e) {\n                                entityValue = -1;\n                            }\n                        }\n                    } else { //escaped value content is an entity name\n                        entityValue = this.entityValue(entityContent);\n                    }\n                }\n                \n                if (entityValue == -1) {\n                    writer.write('&');\n                    writer.write(entityContent);\n                    writer.write(';');\n                } else {\n                    writer.write(entityValue);\n                }\n                i = semiColonIdx; //move index up to the semi-colon                \n            } else {\n                writer.write(c);\n            }\n        }\n    }\n",
                "comment": "    /**\n     * <p>Unescapes the escaped entities in the <code>String</code> passed and\n     * writes the result to the <code>Writer</code> passed.</p>\n     * \n     * @param writer The <code>Writer</code> to write the results to; assumed to be non-null.\n     * @param string The <code>String</code> to write the results to; assumed to be non-null.\n     * @throws IOException when <code>Writer</code> passed throws the exception from\n     *                                       calls to the {@link Writer#write(int)} methods.\n     *                                       \n     * @see #escape(String)\n     * @see Writer\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.lang.EntitiesTest::testNumberOverflow"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.lang.EntitiesTest::testNumberOverflow": {
                "path": "src/test/org/apache/commons/lang/EntitiesTest.java",
                "function_name": "testNumberOverflow",
                "src": "    public void testNumberOverflow() throws Exception {\n        doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");\n        doTestUnescapeEntity(\"x&#12345678;y\", \"x&#12345678;y\");\n        doTestUnescapeEntity(\"&#x12345678;\", \"&#x12345678;\");\n        doTestUnescapeEntity(\"x&#x12345678;y\", \"x&#x12345678;y\");\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<[&#12345678;]> but was:<[\u614e]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.apache.commons.lang.EntitiesTest.doTestUnescapeEntity(EntitiesTest.java:101)\n\tat org.apache.commons.lang.EntitiesTest.testNumberOverflow(EntitiesTest.java:201)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<[&#12345678;]> but was:<[\u614e]>\n\tat org.apache.commons.lang.EntitiesTest.doTestUnescapeEntity(EntitiesTest.java:101)  assertEquals(expected, entities.unescape(entity));\n\tat org.apache.commons.lang.EntitiesTest.testNumberOverflow(EntitiesTest.java:201)  doTestUnescapeEntity(\"&#12345678;\", \"&#12345678;\");",
                "failed_line": 201
            }
        }
    },
    "Math_1": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
                "start_loc": 269,
                "end_loc": 335,
                "buggy_function": "    private BigFraction(final double value, final double epsilon,\n                        final int maxDenominator, int maxIterations)\n        throws FractionConversionException {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            numerator = BigInteger.valueOf(a0);\n            denominator = BigInteger.ONE;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            final double r1 = 1.0 / (r0 - a0);\n            final long a1 = (long) FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n            if ((p2 > overflow) || (q2 > overflow)) {\n                // in maxDenominator mode, if the last fraction was very close to the actual value\n                // q2 may overflow in the next iteration; in this case return the last one.\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            final double convergent = (double) p2 / (double) q2;\n            if ((n < maxIterations) &&\n                (FastMath.abs(convergent - value) > epsilon) &&\n                (q2 < maxDenominator)) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            numerator   = BigInteger.valueOf(p2);\n            denominator = BigInteger.valueOf(q2);\n        } else {\n            numerator   = BigInteger.valueOf(p1);\n            denominator = BigInteger.valueOf(q1);\n        }\n    }\n",
                "fixed_function": "    private BigFraction(final double value, final double epsilon,\n                        final int maxDenominator, int maxIterations)\n        throws FractionConversionException {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            numerator = BigInteger.valueOf(a0);\n            denominator = BigInteger.ONE;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            final double r1 = 1.0 / (r0 - a0);\n            final long a1 = (long) FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n            if ((p2 > overflow) || (q2 > overflow)) {\n                // in maxDenominator mode, if the last fraction was very close to the actual value\n                // q2 may overflow in the next iteration; in this case return the last one.\n                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n                    break;\n                }\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            final double convergent = (double) p2 / (double) q2;\n            if ((n < maxIterations) &&\n                (FastMath.abs(convergent - value) > epsilon) &&\n                (q2 < maxDenominator)) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            numerator   = BigInteger.valueOf(p2);\n            denominator = BigInteger.valueOf(q2);\n        } else {\n            numerator   = BigInteger.valueOf(p1);\n            denominator = BigInteger.valueOf(q1);\n        }\n    }\n",
                "comment": "    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER - a valid epsilon value and\n     * the maxDenominator set to Integer.MAX_VALUE (that way the maxDenominator\n     * has no effect). OR - a valid maxDenominator value and the epsilon value\n     * set to zero (that way epsilon only has effect if there is an exact match\n     * before the maxDenominator value is reached).\n     * </p>\n     * <p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     * https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value\n     *            the double value to convert to a fraction.\n     * @param epsilon\n     *            maximum error allowed. The resulting fraction is within\n     *            <code>epsilon</code> of <code>value</code>, in absolute terms.\n     * @param maxDenominator\n     *            maximum denominator value allowed.\n     * @param maxIterations\n     *            maximum number of convergents.\n     * @throws FractionConversionException\n     *             if the continued fraction failed to converge.\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
                "start_loc": 178,
                "end_loc": 243,
                "buggy_function": "    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        if (FastMath.abs(a0) > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n\n            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                // in maxDenominator mode, if the last fraction was very close to the actual value\n                // q2 may overflow in the next iteration; in this case return the last one.\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n\n    }\n",
                "fixed_function": "    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        if (FastMath.abs(a0) > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n\n            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                // in maxDenominator mode, if the last fraction was very close to the actual value\n                // q2 may overflow in the next iteration; in this case return the last one.\n                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n                    break;\n                }\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n\n    }\n",
                "comment": "    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor": {
                "path": "src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java",
                "function_name": "testDigitLimitConstructor",
                "src": "    public void testDigitLimitConstructor() throws ConvergenceException {\n        assertFraction(2, 5, new BigFraction(0.4, 9));\n        assertFraction(2, 5, new BigFraction(0.4, 99));\n        assertFraction(2, 5, new BigFraction(0.4, 999));\n\n        assertFraction(3, 5, new BigFraction(0.6152, 9));\n        assertFraction(8, 13, new BigFraction(0.6152, 99));\n        assertFraction(510, 829, new BigFraction(0.6152, 999));\n        assertFraction(769, 1250, new BigFraction(0.6152, 9999));\n        \n        // MATH-996\n        assertFraction(1, 2, new BigFraction(0.5000000001, 10));\n    }",
                "stack_trace": "org.apache.commons.math3.fraction.FractionConversionException: illegal state: Overflow trying to convert 0.5 to fraction (2,499,999,794/4,999,999,587)\n\tat org.apache.commons.math3.fraction.BigFraction.<init>(BigFraction.java:306)\n\tat org.apache.commons.math3.fraction.BigFraction.<init>(BigFraction.java:356)\n\tat org.apache.commons.math3.fraction.BigFractionTest.testDigitLimitConstructor(BigFractionTest.java:159)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "org.apache.commons.math3.fraction.FractionConversionException: illegal state: Overflow trying to convert 0.5 to fraction (2,499,999,794/4,999,999,587)\n\tat org.apache.commons.math3.fraction.BigFraction.<init>(BigFraction.java:306)  throw new FractionConversionException(value, p2, q2);\n\tat org.apache.commons.math3.fraction.BigFraction.<init>(BigFraction.java:356)  this(value, 0, maxDenominator, 100);\n\tat org.apache.commons.math3.fraction.BigFractionTest.testDigitLimitConstructor(BigFractionTest.java:159)  assertFraction(1, 2, new BigFraction(0.5000000001, 10));",
                "failed_line": 159
            },
            "org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor": {
                "path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
                "function_name": "testDigitLimitConstructor",
                "src": "    public void testDigitLimitConstructor() throws ConvergenceException  {\n        assertFraction(2, 5, new Fraction(0.4,   9));\n        assertFraction(2, 5, new Fraction(0.4,  99));\n        assertFraction(2, 5, new Fraction(0.4, 999));\n\n        assertFraction(3, 5,      new Fraction(0.6152,    9));\n        assertFraction(8, 13,     new Fraction(0.6152,   99));\n        assertFraction(510, 829,  new Fraction(0.6152,  999));\n        assertFraction(769, 1250, new Fraction(0.6152, 9999));\n\n        // MATH-996\n        assertFraction(1, 2, new Fraction(0.5000000001, 10));\n    }",
                "stack_trace": "org.apache.commons.math3.fraction.FractionConversionException: illegal state: Overflow trying to convert 0.5 to fraction (2,499,999,794/4,999,999,587)\n\tat org.apache.commons.math3.fraction.Fraction.<init>(Fraction.java:215)\n\tat org.apache.commons.math3.fraction.Fraction.<init>(Fraction.java:144)\n\tat org.apache.commons.math3.fraction.FractionTest.testDigitLimitConstructor(FractionTest.java:134)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "org.apache.commons.math3.fraction.FractionConversionException: illegal state: Overflow trying to convert 0.5 to fraction (2,499,999,794/4,999,999,587)\n\tat org.apache.commons.math3.fraction.Fraction.<init>(Fraction.java:215)  throw new FractionConversionException(value, p2, q2);\n\tat org.apache.commons.math3.fraction.Fraction.<init>(Fraction.java:144)  this(value, 0, maxDenominator, 100);\n\tat org.apache.commons.math3.fraction.FractionTest.testDigitLimitConstructor(FractionTest.java:134)  assertFraction(1, 2, new Fraction(0.5000000001, 10));",
                "failed_line": 134
            }
        }
    },
    "Math_4": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
                "start_loc": 110,
                "end_loc": 127,
                "buggy_function": "    public Vector3D intersection(final SubLine subLine, final boolean includeEndPoints) {\n\n        // compute the intersection on infinite line\n        Vector3D v1D = line.intersection(subLine.line);\n\n        // check location of point with respect to first sub-line\n        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n\n        // check location of point with respect to second sub-line\n        Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));\n\n        if (includeEndPoints) {\n            return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v1D : null;\n        } else {\n            return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v1D : null;\n        }\n\n    }\n",
                "fixed_function": "    public Vector3D intersection(final SubLine subLine, final boolean includeEndPoints) {\n\n        // compute the intersection on infinite line\n        Vector3D v1D = line.intersection(subLine.line);\n        if (v1D == null) {\n            return null;\n        }\n\n        // check location of point with respect to first sub-line\n        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n\n        // check location of point with respect to second sub-line\n        Location loc2 = subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));\n\n        if (includeEndPoints) {\n            return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v1D : null;\n        } else {\n            return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v1D : null;\n        }\n\n    }\n",
                "comment": "    /** Get the intersection of the instance and another sub-line.\n     * <p>\n     * This method is related to the {@link Line#intersection(Line)\n     * intersection} method in the {@link Line Line} class, but in addition\n     * to compute the point along infinite lines, it also checks the point\n     * lies on both sub-line ranges.\n     * </p>\n     * @param subLine other sub-line which may intersect instance\n     * @param includeEndPoints if true, endpoints are considered to belong to\n     * instance (i.e. they are closed sets) and may be returned, otherwise endpoints\n     * are considered to not belong to instance (i.e. they are open sets) and intersection\n     * occurring on endpoints lead to null being returned\n     * @return the intersection point if there is one, null if the sub-lines don't intersect\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java",
                "start_loc": 110,
                "end_loc": 131,
                "buggy_function": "    public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints) {\n\n        // retrieve the underlying lines\n        Line line1 = (Line) getHyperplane();\n        Line line2 = (Line) subLine.getHyperplane();\n\n        // compute the intersection on infinite line\n        Vector2D v2D = line1.intersection(line2);\n\n        // check location of point with respect to first sub-line\n        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n\n        // check location of point with respect to second sub-line\n        Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));\n\n        if (includeEndPoints) {\n            return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;\n        } else {\n            return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;\n        }\n\n    }\n",
                "fixed_function": "    public Vector2D intersection(final SubLine subLine, final boolean includeEndPoints) {\n\n        // retrieve the underlying lines\n        Line line1 = (Line) getHyperplane();\n        Line line2 = (Line) subLine.getHyperplane();\n\n        // compute the intersection on infinite line\n        Vector2D v2D = line1.intersection(line2);\n        if (v2D == null) {\n            return null;\n        }\n\n        // check location of point with respect to first sub-line\n        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n\n        // check location of point with respect to second sub-line\n        Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));\n\n        if (includeEndPoints) {\n            return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;\n        } else {\n            return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;\n        }\n\n    }\n",
                "comment": "    /** Get the intersection of the instance and another sub-line.\n     * <p>\n     * This method is related to the {@link Line#intersection(Line)\n     * intersection} method in the {@link Line Line} class, but in addition\n     * to compute the point along infinite lines, it also checks the point\n     * lies on both sub-line ranges.\n     * </p>\n     * @param subLine other sub-line which may intersect instance\n     * @param includeEndPoints if true, endpoints are considered to belong to\n     * instance (i.e. they are closed sets) and may be returned, otherwise endpoints\n     * are considered to not belong to instance (i.e. they are open sets) and intersection\n     * occurring on endpoints lead to null being returned\n     * @return the intersection point if there is one, null if the sub-lines don't intersect\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting": {
                "path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
                "function_name": "testIntersectionNotIntersecting",
                "src": "    public void testIntersectionNotIntersecting() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.apache.commons.math3.geometry.euclidean.threed.Line.getAbscissa(Line.java:114)\n\tat org.apache.commons.math3.geometry.euclidean.threed.Line.toSubSpace(Line.java:129)\n\tat org.apache.commons.math3.geometry.euclidean.threed.SubLine.intersection(SubLine.java:116)\n\tat org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionNotIntersecting(SubLineTest.java:160)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.apache.commons.math3.geometry.euclidean.threed.Line.getAbscissa(Line.java:114)  return point.subtract(zero).dotProduct(direction);\n\tat org.apache.commons.math3.geometry.euclidean.threed.Line.toSubSpace(Line.java:129)  return new Vector1D(getAbscissa((Vector3D) point));\n\tat org.apache.commons.math3.geometry.euclidean.threed.SubLine.intersection(SubLine.java:116)  Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n\tat org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionNotIntersecting(SubLineTest.java:160)  Assert.assertNull(sub1.intersection(sub2, true));",
                "failed_line": 160
            },
            "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel": {
                "path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
                "function_name": "testIntersectionParallel",
                "src": "    public void testIntersectionParallel() {\n        final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));\n        final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));\n        Assert.assertNull(sub1.intersection(sub2, true));\n        Assert.assertNull(sub1.intersection(sub2, false));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.apache.commons.math3.geometry.euclidean.twod.Line.toSubSpace(Line.java:182)\n\tat org.apache.commons.math3.geometry.euclidean.twod.SubLine.intersection(SubLine.java:120)\n\tat org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionParallel(SubLineTest.java:151)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.apache.commons.math3.geometry.euclidean.twod.Line.toSubSpace(Line.java:182)  return new Vector1D(cos * p2.getX() + sin * p2.getY());\n\tat org.apache.commons.math3.geometry.euclidean.twod.SubLine.intersection(SubLine.java:120)  Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n\tat org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionParallel(SubLineTest.java:151)  Assert.assertNull(sub1.intersection(sub2, true));",
                "failed_line": 151
            }
        }
    },
    "Math_14": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java",
                "start_loc": 41,
                "end_loc": 47,
                "buggy_function": "    public Weight(double[] weight) {\n        final int dim = weight.length;\n        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);\n        for (int i = 0; i < dim; i++) {\n            weightMatrix.setEntry(i, i, weight[i]);\n        }\n    }\n",
                "fixed_function": "    public Weight(double[] weight) {\n        final int dim = weight.length;\n        weightMatrix = new DiagonalMatrix(weight);\n    }\n",
                "comment": "    /**\n     * Creates a diagonal weight matrix.\n     *\n     * @param weight List of the values of the diagonal.\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.fitting.PolynomialFitterTest::testLargeSample"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java",
                "start_loc": 266,
                "end_loc": 269,
                "buggy_function": "    private RealMatrix squareRoot(RealMatrix m) {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n    }\n",
                "fixed_function": "    private RealMatrix squareRoot(RealMatrix m) {\n        if (m instanceof DiagonalMatrix) {\n            final int dim = m.getRowDimension();\n            final RealMatrix sqrtM = new DiagonalMatrix(dim);\n            for (int i = 0; i < dim; i++) {\n                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n            }\n            return sqrtM;\n        } else {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }\n",
                "comment": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.fitting.PolynomialFitterTest::testLargeSample"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math3.fitting.PolynomialFitterTest::testLargeSample": {
                "path": "src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java",
                "function_name": "testLargeSample",
                "src": "    public void testLargeSample() {\n        Random randomizer = new Random(0x5551480dca5b369bl);\n        double maxError = 0;\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n            for (int i = 0; i < 40000; ++i) {\n                double x = -1.0 + i / 20000.0;\n                fitter.addObservedPoint(1.0, x,\n                                        p.value(x) + 0.1 * randomizer.nextGaussian());\n            }\n\n            final double[] init = new double[degree + 1];\n            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n                              (1.0 + FastMath.abs(p.value(x)));\n                maxError = FastMath.max(maxError, error);\n                Assert.assertTrue(FastMath.abs(error) < 0.01);\n            }\n        }\n        Assert.assertTrue(maxError > 0.001);\n    }",
                "stack_trace": "java.lang.OutOfMemoryError: Java heap space\n\tat org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(BlockRealMatrix.java:271)\n\tat org.apache.commons.math3.linear.BlockRealMatrix.<init>(BlockRealMatrix.java:107)\n\tat org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(MatrixUtils.java:81)\n\tat org.apache.commons.math3.optim.nonlinear.vector.Weight.<init>(Weight.java:43)\n\tat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:172)\n\tat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:136)\n\tat org.apache.commons.math3.fitting.PolynomialFitter.fit(PolynomialFitter.java:68)\n\tat org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample(PolynomialFitterTest.java:238)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)",
                "clean_error_message": "java.lang.OutOfMemoryError: Java heap space\n\tat org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(BlockRealMatrix.java:271)  blocks[blockIndex] = new double[iHeight * jWidth];\n\tat org.apache.commons.math3.linear.BlockRealMatrix.<init>(BlockRealMatrix.java:107)  blocks = createBlocksLayout(rows, columns);\n\tat org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(MatrixUtils.java:81)  return (rows * columns <= 4096) ?\n\tat org.apache.commons.math3.optim.nonlinear.vector.Weight.<init>(Weight.java:43)  weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);\n\tat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:172)  final PointVectorValuePair optimum\n\tat org.apache.commons.math3.fitting.CurveFitter.fit(CurveFitter.java:136)  return fit(Integer.MAX_VALUE, f, initialGuess);\n\tat org.apache.commons.math3.fitting.PolynomialFitter.fit(PolynomialFitter.java:68)  return fit(new PolynomialFunction.Parametric(), guess);\n\tat org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample(PolynomialFitterTest.java:238)  PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));",
                "failed_line": 238
            }
        }
    },
    "Math_18": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
                "start_loc": 925,
                "end_loc": 935,
                "buggy_function": "        public double[] encode(final double[] x) {\n            if (boundaries == null) {\n                return x;\n            }\n            double[] res = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = (x[i] - boundaries[0][i]) / diff;\n            }\n            return res;\n        }\n",
                "fixed_function": "        public double[] encode(final double[] x) {\n            if (boundaries == null) {\n                return x;\n            }\n            double[] res = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = x[i] / diff;\n            }\n            return res;\n        }\n",
                "comment": "        /**\n         * @param x Original objective variables.\n         * @return the normalized objective variables.\n         */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
                "start_loc": 951,
                "end_loc": 961,
                "buggy_function": "        public double[] decode(final double[] x) {\n            if (boundaries == null) {\n                return x;\n            }\n            double[] res = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = diff * x[i] + boundaries[0][i];\n            }\n            return res;\n        }\n",
                "fixed_function": "        public double[] decode(final double[] x) {\n            if (boundaries == null) {\n                return x;\n            }\n            double[] res = new double[x.length];\n            for (int i = 0; i < x.length; i++) {\n                double diff = boundaries[1][i] - boundaries[0][i];\n                res[i] = diff * x[i];\n            }\n            return res;\n        }\n",
                "comment": "        /**\n         * @param x Normalized objective variables.\n         * @return the original objective variables.\n         */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
                "start_loc": 985,
                "end_loc": 1000,
                "buggy_function": "        public boolean isFeasible(final double[] x) {\n            if (boundaries == null) {\n                return true;\n            }\n\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < 0) {\n                    return false;\n                }\n                if (x[i] > 1.0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n",
                "fixed_function": "        public boolean isFeasible(final double[] x) {\n            if (boundaries == null) {\n                return true;\n            }\n\n            final double[] bLoEnc = encode(boundaries[0]);\n            final double[] bHiEnc = encode(boundaries[1]);\n\n            for (int i = 0; i < x.length; i++) {\n                if (x[i] < bLoEnc[i]) {\n                    return false;\n                }\n                if (x[i] > bHiEnc[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n",
                "comment": "        /**\n         * @param x Normalized objective variables.\n         * @return {@code true} if in bounds.\n         */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary": {
                "path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
                "function_name": "testFitAccuracyDependsOnBoundary",
                "src": "    public void testFitAccuracyDependsOnBoundary() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start);\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        Assert.assertEquals(resNoBound, resNearLo, 1e-3);\n        Assert.assertEquals(resNoBound, resNearHi, 1e-3);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<11.100000000388787> but was:<8.0>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:477)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<11.100000000388787> but was:<8.0>\n\tat org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:477)  Assert.assertEquals(resNoBound, resNearHi, 1e-3);",
                "failed_line": 477
            }
        }
    },
    "Math_22": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java",
                "start_loc": 274,
                "end_loc": 276,
                "buggy_function": "    public boolean isSupportLowerBoundInclusive() {\n        return true;\n    }\n",
                "fixed_function": "    public boolean isSupportLowerBoundInclusive() {\n        return false;\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "directly_related_tests": [
                    "org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java",
                "start_loc": 183,
                "end_loc": 185,
                "buggy_function": "    public boolean isSupportUpperBoundInclusive() {\n        return false;\n    }\n",
                "fixed_function": "    public boolean isSupportUpperBoundInclusive() {\n        return true;\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "directly_related_tests": [
                    "org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math3.distribution.RealDistributionAbstractTest::testIsSupportLowerBoundInclusive": {
                "path": "apache/commons/math3/distribution/RealDistributionAbstractTest.java",
                "function_name": "testIsSupportLowerBoundInclusive",
                "src": "    public void testIsSupportLowerBoundInclusive() {\n        final double lowerBound = distribution.getSupportLowerBound();\n        double result = Double.NaN;\n        result = distribution.density(lowerBound);\n        Assert.assertEquals(\n                !Double.isInfinite(lowerBound) && !Double.isNaN(result) &&\n                !Double.isInfinite(result),\n                distribution.isSupportLowerBoundInclusive());\n         \n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)  Assert.assertEquals(                !Double.isInfinite(lowerBound) && !Double.isNaN(result) &&                !Double.isInfinite(result),                distribution.isSupportLowerBoundInclusive());"
            },
            "org.apache.commons.math3.distribution.RealDistributionAbstractTest::testIsSupportUpperBoundInclusive": {
                "path": "apache/commons/math3/distribution/RealDistributionAbstractTest.java",
                "function_name": "testIsSupportUpperBoundInclusive",
                "src": "    public void testIsSupportUpperBoundInclusive() {\n        final double upperBound = distribution.getSupportUpperBound();\n        double result = Double.NaN;\n        result = distribution.density(upperBound);\n        Assert.assertEquals(\n                !Double.isInfinite(upperBound) && !Double.isNaN(result) &&\n                !Double.isInfinite(result),\n                distribution.isSupportUpperBoundInclusive());\n         \n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<true> but was:<false>\n\tat org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)  Assert.assertEquals(                !Double.isInfinite(upperBound) && !Double.isNaN(result) &&                !Double.isInfinite(result),                distribution.isSupportUpperBoundInclusive());"
            }
        }
    },
    "Math_35": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
                "start_loc": 47,
                "end_loc": 52,
                "buggy_function": "    public ElitisticListPopulation(final List<Chromosome> chromosomes,\n                                   final int populationLimit,\n                                   final double elitismRate) {\n        super(chromosomes, populationLimit);\n        this.elitismRate = elitismRate;\n    }\n",
                "fixed_function": "    public ElitisticListPopulation(final List<Chromosome> chromosomes,\n                                   final int populationLimit,\n                                   final double elitismRate) {\n        super(chromosomes, populationLimit);\n        setElitismRate(elitismRate);\n    }\n",
                "comment": "    /**\n     * Creates a new ElitisticListPopulation instance.\n     *\n     * @param chromosomes list of chromosomes in the population\n     * @param populationLimit maximal size of the population\n     * @param elitismRate how many best chromosomes will be directly transferred to the\n     *                    next generation [in %]\n     * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testChromosomeListConstructorTooLow",
                    "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testChromosomeListConstructorTooHigh"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
                "start_loc": 63,
                "end_loc": 66,
                "buggy_function": "    public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n        super(populationLimit);\n        this.elitismRate = elitismRate;\n    }\n",
                "fixed_function": "    public ElitisticListPopulation(final int populationLimit, final double elitismRate) {\n        super(populationLimit);\n        setElitismRate(elitismRate);\n    }\n",
                "comment": "    /**\n     * Creates a new ListPopulation instance and initializes its inner\n     * chromosome list.\n     *\n     * @param populationLimit maximal size of the population\n     * @param elitismRate how many best chromosomes will be directly transferred to the\n     *                    next generation [in %]\n     * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testConstructorTooHigh",
                    "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testConstructorTooLow"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testChromosomeListConstructorTooLow": {
                "path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
                "function_name": "testChromosomeListConstructorTooLow",
                "src": "    public void testChromosomeListConstructorTooLow() {\n        final List<Chromosome> chromosomes = Collections.emptyList();\n        final double rate = -0.25;\n        new ElitisticListPopulation(chromosomes, 100, rate);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException"
            },
            "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testConstructorTooHigh": {
                "path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
                "function_name": "testConstructorTooHigh",
                "src": "    public void testConstructorTooHigh() {\n        final double rate = 1.25;\n        new ElitisticListPopulation(100, rate);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException"
            },
            "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testConstructorTooLow": {
                "path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
                "function_name": "testConstructorTooLow",
                "src": "    public void testConstructorTooLow() {\n        final double rate = -0.25;\n        new ElitisticListPopulation(100, rate);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException"
            },
            "org.apache.commons.math3.genetics.ElitisticListPopulationTest::testChromosomeListConstructorTooHigh": {
                "path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
                "function_name": "testChromosomeListConstructorTooHigh",
                "src": "    public void testChromosomeListConstructorTooHigh() {\n        final List<Chromosome> chromosomes = Collections.emptyList();\n        final double rate = 1.25;\n        new ElitisticListPopulation(chromosomes, 100, rate);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException"
            }
        }
    },
    "Math_37": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
                "start_loc": 1017,
                "end_loc": 1028,
                "buggy_function": "    public Complex tan() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);\n\n        return createComplex(FastMath.sin(real2) / d,\n                             FastMath.sinh(imaginary2) / d);\n    }\n",
                "fixed_function": "    public Complex tan() {\n        if (isNaN || Double.isInfinite(real)) {\n            return NaN;\n        }\n        if (imaginary > 20.0) {\n            return createComplex(0.0, 1.0);\n        }\n        if (imaginary < -20.0) {\n            return createComplex(0.0, -1.0);\n        }\n\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);\n\n        return createComplex(FastMath.sin(real2) / d,\n                             FastMath.sinh(imaginary2) / d);\n    }\n",
                "comment": "    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/Tangent.html\" TARGET=\"_top\">\n     * tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and\n     * {@link FastMath#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite (or critical) values in real or imaginary parts of the input may\n     * result in infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i\n     *   tan(&plusmn;INFINITY + bi) = NaN + NaN i\n     *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the tangent of {@code this}.\n     * @since 1.2\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.complex.ComplexTest::testTan",
                    "org.apache.commons.math.complex.ComplexTest::testTanInf"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
                "start_loc": 1062,
                "end_loc": 1072,
                "buggy_function": "    public Complex tanh() {\n        if (isNaN) {\n            return NaN;\n        }\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);\n\n        return createComplex(FastMath.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);\n    }\n",
                "fixed_function": "    public Complex tanh() {\n        if (isNaN || Double.isInfinite(imaginary)) {\n            return NaN;\n        }\n        if (real > 20.0) {\n            return createComplex(1.0, 0.0);\n        }\n        if (real < -20.0) {\n            return createComplex(-1.0, 0.0);\n        }\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);\n\n        return createComplex(FastMath.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);\n    }\n",
                "comment": "    /**\n     * Compute the\n     * <a href=\"http://mathworld.wolfram.com/HyperbolicTangent.html\" TARGET=\"_top\">\n     * hyperbolic tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and\n     * {@link FastMath#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tanh(a &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(&plusmn;INFINITY + bi) = &plusmn;1 + 0 i\n     *   tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(0 + (&pi;/2)i) = NaN + INFINITY i\n     *  </code>\n     * </pre>\n     *\n     * @return the hyperbolic tangent of {@code this}.\n     * @since 1.2\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.complex.ComplexTest::testTanhInf",
                    "org.apache.commons.math.complex.ComplexTest::testTanh"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.complex.ComplexTest::testTanhInf": {
                "path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "function_name": "testTanhInf",
                "src": "    public void testTanhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());\n        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());\n        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:77)\n\tat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:85)\n\tat org.apache.commons.math.complex.ComplexTest.testTanhInf(ComplexTest.java:1054)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\n\tat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:77)  Assert.assertEquals(expected, actual, 0);\n\tat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:85)  assertSame(expected.getReal(), actual.getReal());\n\tat org.apache.commons.math.complex.ComplexTest.testTanhInf(ComplexTest.java:1054)  TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());",
                "failed_line": 1054
            },
            "org.apache.commons.math.complex.ComplexTest::testTan": {
                "path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "function_name": "testTan",
                "src": "    public void testTan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.TestUtils.assertEquals(TestUtils.java:95)\n\tat org.apache.commons.math.complex.ComplexTest.testTan(ComplexTest.java:1002)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\n\tat org.apache.commons.math.TestUtils.assertEquals(TestUtils.java:95)  Assert.assertEquals(expected.getImaginary(), actual.getImaginary(), delta);\n\tat org.apache.commons.math.complex.ComplexTest.testTan(ComplexTest.java:1002)  TestUtils.assertEquals(expected, actual, 1.0e-5);",
                "failed_line": 1002
            },
            "org.apache.commons.math.complex.ComplexTest::testTanh": {
                "path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "function_name": "testTanh",
                "src": "    public void testTanh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.TestUtils.assertEquals(TestUtils.java:94)\n\tat org.apache.commons.math.complex.ComplexTest.testTanh(ComplexTest.java:1039)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\n\tat org.apache.commons.math.TestUtils.assertEquals(TestUtils.java:94)  Assert.assertEquals(expected.getReal(), actual.getReal(), delta);\n\tat org.apache.commons.math.complex.ComplexTest.testTanh(ComplexTest.java:1039)  TestUtils.assertEquals(expected, actual, 1.0e-5);",
                "failed_line": 1039
            },
            "org.apache.commons.math.complex.ComplexTest::testTanInf": {
                "path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "function_name": "testTanInf",
                "src": "    public void testTanInf() {\n        TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());\n        TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, infOne.tan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.tan());\n        TestUtils.assertSame(Complex.NaN, infInf.tan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:77)\n\tat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:86)\n\tat org.apache.commons.math.complex.ComplexTest.testTanInf(ComplexTest.java:1015)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>\n\tat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:77)  Assert.assertEquals(expected, actual, 0);\n\tat org.apache.commons.math.TestUtils.assertSame(TestUtils.java:86)  assertSame(expected.getImaginary(), actual.getImaginary());\n\tat org.apache.commons.math.complex.ComplexTest.testTanInf(ComplexTest.java:1015)  TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());",
                "failed_line": 1015
            }
        }
    },
    "Math_46": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
                "start_loc": 251,
                "end_loc": 281,
                "buggy_function": "    public Complex divide(Complex divisor)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(divisor);\n        if (isNaN || divisor.isNaN) {\n            return NaN;\n        }\n\n        if (divisor.isZero) {\n            // return isZero ? NaN : INF; // See MATH-657\n            return isZero ? NaN : INF;\n        }\n\n        if (divisor.isInfinite() && !isInfinite()) {\n            return ZERO;\n        }\n\n        final double c = divisor.getReal();\n        final double d = divisor.getImaginary();\n\n        if (FastMath.abs(c) < FastMath.abs(d)) {\n            double q = c / d;\n            double denominator = c * q + d;\n            return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);\n        } else {\n            double q = d / c;\n            double denominator = d * q + c;\n            return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);\n        }\n    }\n",
                "fixed_function": "    public Complex divide(Complex divisor)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(divisor);\n        if (isNaN || divisor.isNaN) {\n            return NaN;\n        }\n\n        if (divisor.isZero) {\n            // return isZero ? NaN : INF; // See MATH-657\n            return NaN;\n        }\n\n        if (divisor.isInfinite() && !isInfinite()) {\n            return ZERO;\n        }\n\n        final double c = divisor.getReal();\n        final double d = divisor.getImaginary();\n\n        if (FastMath.abs(c) < FastMath.abs(d)) {\n            double q = c / d;\n            double denominator = c * q + d;\n            return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);\n        } else {\n            double q = d / c;\n            double denominator = d * q + c;\n            return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);\n        }\n    }\n",
                "comment": "    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this / divisor)}.\n     * Implements the definitional formula\n     * <pre>\n     *  <code>\n     *    a + bi          ac + bd + (bc - ad)i\n     *    ----------- = -------------------------\n     *    c + di         c<sup>2</sup> + d<sup>2</sup>\n     *  </code>\n     * </pre>\n     * but uses\n     * <a href=\"http://doi.acm.org/10.1145/1039813.1039814\">\n     * prescaling of operands</a> to limit the effects of overflows and\n     * underflows in the computation.\n     * <br/>\n     * {@code Infinite} and {@code NaN} values are handled according to the\n     * following rules, applied in the order presented:\n     * <ul>\n     *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n     *   in either part, {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both infinite,\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or\n     *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n     *   infinite), {@link #ZERO} is returned.\n     *  </li>\n     *  <li>If {@code this} is infinite and {@code divisor} is finite,\n     *   {@code NaN} values are returned in the parts of the result if the\n     *   {@link java.lang.Double} rules applied to the definitional formula\n     *   force {@code NaN} results.\n     *  </li>\n     * </ul>\n     *\n     * @param divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @throws NullArgumentException if {@code divisor} is {@code null}.\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.complex.ComplexTest::testAtanI",
                    "org.apache.commons.math.complex.ComplexTest::testDivideZero"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math/complex/Complex.java",
                "start_loc": 291,
                "end_loc": 304,
                "buggy_function": "    public Complex divide(double divisor) {\n        if (isNaN || Double.isNaN(divisor)) {\n            return NaN;\n        }\n        if (divisor == 0d) {\n            // return isZero ? NaN : INF; // See MATH-657\n            return isZero ? NaN : INF;\n        }\n        if (Double.isInfinite(divisor)) {\n            return !isInfinite() ? ZERO : NaN;\n        }\n        return createComplex(real / divisor,\n                             imaginary  / divisor);\n    }\n",
                "fixed_function": "    public Complex divide(double divisor) {\n        if (isNaN || Double.isNaN(divisor)) {\n            return NaN;\n        }\n        if (divisor == 0d) {\n            // return isZero ? NaN : INF; // See MATH-657\n            return NaN;\n        }\n        if (Double.isInfinite(divisor)) {\n            return !isInfinite() ? ZERO : NaN;\n        }\n        return createComplex(real / divisor,\n                             imaginary  / divisor);\n    }\n",
                "comment": "    /**\n     * Returns a {@code Complex} whose value is {@code (this / divisor)},\n     * with {@code divisor} interpreted as a real number.\n     *\n     * @param  divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @see #divide(Complex)\n     */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.complex.ComplexTest::testAtanI": {
                "path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "function_name": "testAtanI",
                "src": "    public void testAtanI() {\n        Assert.assertTrue(Complex.I.atan().isNaN());\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)  Assert.assertTrue(Complex.I.atan().isNaN());",
                "failed_line": 577
            },
            "org.apache.commons.math.complex.ComplexTest::testDivideZero": {
                "path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
                "function_name": "testDivideZero",
                "src": "    public void testDivideZero() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.ZERO);\n        // Assert.assertEquals(z, Complex.INF); // See MATH-657\n        Assert.assertEquals(z, Complex.NaN);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>\n\tat org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)  Assert.assertEquals(z, Complex.NaN);",
                "failed_line": 233
            }
        }
    },
    "Math_54": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
                "start_loc": 256,
                "end_loc": 314,
                "buggy_function": "    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n",
                "fixed_function": "    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n",
                "comment": "    /** Create an instance from a double value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.dfp.DfpTest::testIssue567"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
                "start_loc": 2303,
                "end_loc": 2384,
                "buggy_function": "    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        if (lessThan(getZero())) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.log10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n",
                "fixed_function": "    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.log10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n",
                "comment": "    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.dfp.DfpTest::testIssue567"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.dfp.DfpTest::testIssue567": {
                "path": "src/test/java/org/apache/commons/math/dfp/DfpTest.java",
                "function_name": "testIssue567",
                "src": "    public void testIssue567() {\n        DfpField field = new DfpField(100);\n        Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);\n        Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);\n        Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);\n        Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<0.0> but was:<-Infinity>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.dfp.DfpTest.testIssue567(DfpTest.java:1512)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<0.0> but was:<-Infinity>\n\tat org.apache.commons.math.dfp.DfpTest.testIssue567(DfpTest.java:1512)  Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);",
                "failed_line": 1512
            }
        }
    },
    "Math_62": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java",
                "start_loc": 142,
                "end_loc": 147,
                "buggy_function": "    public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                 final GoalType goal,\n                                                 final double min, final double max)\n        throws FunctionEvaluationException {\n        return optimize(f, goal, min, max, 0);\n    }\n",
                "fixed_function": "    public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                 final GoalType goal,\n                                                 final double min, final double max)\n        throws FunctionEvaluationException {\n        return optimize(f, goal, min, max, min + 0.5 * (max - min));\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java",
                "start_loc": 150,
                "end_loc": 183,
                "buggy_function": "    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n                                                 final double min, final double max,\n                                                 final double startValue)\n        throws FunctionEvaluationException {\n        optima = new UnivariateRealPointValuePair[starts];\n        totalEvaluations = 0;\n\n        // Multi-start loop.\n        for (int i = 0; i < starts; ++i) {\n            try {\n                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n            } catch (FunctionEvaluationException fee) {\n                optima[i] = null;\n            } catch (ConvergenceException ce) {\n                optima[i] = null;\n            }\n\n            final int usedEvaluations = optimizer.getEvaluations();\n            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);\n            totalEvaluations += usedEvaluations;\n        }\n\n        sortPairs(goal);\n\n        if (optima[0] == null) {\n            throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,\n                                           starts);\n        }\n\n        // Return the point with the best objective function value.\n        return optima[0];\n    }\n",
                "fixed_function": "    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n                                                 final double min, final double max,\n                                                 final double startValue)\n        throws FunctionEvaluationException {\n        optima = new UnivariateRealPointValuePair[starts];\n        totalEvaluations = 0;\n\n        // Multi-start loop.\n        for (int i = 0; i < starts; ++i) {\n            try {\n                final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);\n                optima[i] = optimizer.optimize(f, goal, min, max, s);\n            } catch (FunctionEvaluationException fee) {\n                optima[i] = null;\n            } catch (ConvergenceException ce) {\n                optima[i] = null;\n            }\n\n            final int usedEvaluations = optimizer.getEvaluations();\n            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);\n            totalEvaluations += usedEvaluations;\n        }\n\n        sortPairs(goal);\n\n        if (optima[0] == null) {\n            throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,\n                                           starts);\n        }\n\n        // Return the point with the best objective function value.\n        return optima[0];\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest::testQuinticMin"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest::testQuinticMin": {
                "path": "src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java",
                "function_name": "testQuinticMin",
                "src": "    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\n        assertEquals(-0.0443342695, optimum.getValue(), 1e-9);\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);\n        }\n        assertTrue(optimizer.getEvaluations() >= 50);\n        assertTrue(optimizer.getEvaluations() <= 100);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.2719561293> but was:<-0.2719561278056452>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:71)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<-0.2719561293> but was:<-0.2719561278056452>\n\tat org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:71)  assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);",
                "failed_line": 71
            }
        }
    },
    "Math_65": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
                "start_loc": 239,
                "end_loc": 246,
                "buggy_function": "    public double getRMS() {\n        double criterion = 0;\n        for (int i = 0; i < rows; ++i) {\n            final double residual = residuals[i];\n            criterion += residual * residual * residualsWeights[i];\n        }\n        return Math.sqrt(criterion / rows);\n    }\n",
                "fixed_function": "    public double getRMS() {\n        return Math.sqrt(getChiSquare() / rows);\n    }\n",
                "comment": "    /**\n     * Get the Root Mean Square value.\n     * Get the Root Mean Square value, i.e. the root of the arithmetic\n     * mean of the square of all weighted residuals. This is related to the\n     * criterion that is minimized by the optimizer as follows: if\n     * <em>c</em> if the criterion, and <em>n</em> is the number of\n     * measurements, then the RMS is <em>sqrt (c/n)</em>.\n     *\n     * @return RMS value\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
                "start_loc": 254,
                "end_loc": 261,
                "buggy_function": "    public double getChiSquare() {\n        double chiSquare = 0;\n        for (int i = 0; i < rows; ++i) {\n            final double residual = residuals[i];\n            chiSquare += residual * residual / residualsWeights[i];\n        }\n        return chiSquare;\n    }\n",
                "fixed_function": "    public double getChiSquare() {\n        double chiSquare = 0;\n        for (int i = 0; i < rows; ++i) {\n            final double residual = residuals[i];\n            chiSquare += residual * residual * residualsWeights[i];\n        }\n        return chiSquare;\n    }\n",
                "comment": "    /**\n     * Get a Chi-Square-like value assuming the N residuals follow N\n     * distinct normal distributions centered on 0 and whose variances are\n     * the reciprocal of the weights.\n     * @return chi-square value\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting": {
                "path": "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java",
                "function_name": "testCircleFitting",
                "src": "    public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {\n        Circle circle = new Circle();\n        circle.addPoint( 30.0,  68.0);\n        circle.addPoint( 50.0,  -6.0);\n        circle.addPoint(110.0, -20.0);\n        circle.addPoint( 35.0,  15.0);\n        circle.addPoint( 45.0,  97.0);\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n                               new double[] { 98.680, 47.345 });\n        assertTrue(optimizer.getEvaluations() < 10);\n        assertTrue(optimizer.getJacobianEvaluations() < 10);\n        double rms = optimizer.getRMS();\n        assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);\n        Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);\n        assertEquals(96.07590211815305, center.x,      1.0e-10);\n        assertEquals(48.13516790438953, center.y,      1.0e-10);\n        double[][] cov = optimizer.getCovariances();\n        assertEquals(1.839, cov[0][0], 0.001);\n        assertEquals(0.731, cov[0][1], 0.001);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.786, cov[1][1], 0.001);\n        double[] errors = optimizer.guessParametersErrors();\n        assertEquals(1.384, errors[0], 0.001);\n        assertEquals(0.905, errors[1], 0.001);\n\n        // add perfect measurements and check errors are reduced\n        double  r = circle.getRadius(center);\n        for (double d= 0; d < 2 * Math.PI; d += 0.01) {\n            circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));\n        }\n        double[] target = new double[circle.getN()];\n        Arrays.fill(target, 0.0);\n        double[] weights = new double[circle.getN()];\n        Arrays.fill(weights, 2.0);\n        optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });\n        cov = optimizer.getCovariances();\n        assertEquals(0.0016, cov[0][0], 0.001);\n        assertEquals(3.2e-7, cov[0][1], 1.0e-9);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.0016, cov[1][1], 0.001);\n        errors = optimizer.guessParametersErrors();\n        assertEquals(0.004, errors[0], 0.001);\n        assertEquals(0.004, errors[1], 0.001);\n\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<0.004> but was:<0.0019737107108948474>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:120)\n\tat junit.framework.Assert.assertEquals(Assert.java:129)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:288)\n\tat org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting(LevenbergMarquardtOptimizerTest.java:442)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<0.004> but was:<0.0019737107108948474>\n\tat org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting(LevenbergMarquardtOptimizerTest.java:442)  assertEquals(0.004, errors[0], 0.001);",
                "failed_line": 442
            }
        }
    },
    "Math_67": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
                "start_loc": 91,
                "end_loc": 93,
                "buggy_function": "    public double getFunctionValue() {\n        return optimizer.getFunctionValue();\n    }\n",
                "fixed_function": "    public double getFunctionValue() {\n        return optimaValues[0];\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
                "start_loc": 96,
                "end_loc": 98,
                "buggy_function": "    public double getResult() {\n        return optimizer.getResult();\n    }\n",
                "fixed_function": "    public double getResult() {\n        return optima[0];\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin": {
                "path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
                "function_name": "testQuinticMin",
                "src": "    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n        try {\n            minimizer.getOptimaValues();\n            fail(\"an exception should have been thrown\");\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);\n        assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);\n        assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);\n        }\n\n        assertTrue(minimizer.getEvaluations()    >= 510);\n        assertTrue(minimizer.getEvaluations()    <= 530);\n        assertTrue(minimizer.getIterationCount() >= 150);\n        assertTrue(minimizer.getIterationCount() <= 170);\n\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<-0.27195612846834> but was:<-0.27194301946870036>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:86)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<-0.27195612846834> but was:<-0.27194301946870036>\n\tat org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest.testQuinticMin(MultiStartUnivariateRealOptimizerTest.java:86)  assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);",
                "failed_line": 86
            }
        }
    },
    "Math_68": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
                "start_loc": 160,
                "end_loc": 171,
                "buggy_function": "    public LevenbergMarquardtOptimizer() {\n\n        // set up the superclass with a default  max cost evaluations setting\n        setMaxIterations(1000);\n\n        // default values for the tuning parameters\n        setInitialStepBoundFactor(100.0);\n        setCostRelativeTolerance(1.0e-10);\n        setParRelativeTolerance(1.0e-10);\n        setOrthoTolerance(1.0e-10);\n\n    }\n",
                "fixed_function": "    public LevenbergMarquardtOptimizer() {\n\n        // set up the superclass with a default  max cost evaluations setting\n        setMaxIterations(1000);\n\n        // default values for the tuning parameters\n        setConvergenceChecker(null);\n        setInitialStepBoundFactor(100.0);\n        setCostRelativeTolerance(1.0e-10);\n        setParRelativeTolerance(1.0e-10);\n        setOrthoTolerance(1.0e-10);\n\n    }\n",
                "comment": "    /**\n     * Build an optimizer for least squares problems.\n     * <p>The default values for the algorithm settings are:\n     *   <ul>\n     *    <li>{@link #setConvergenceChecker vectorial convergence checker}: null</li>\n     *    <li>{@link #setInitialStepBoundFactor initial step bound factor}: 100.0</li>\n     *    <li>{@link #setMaxIterations maximal iterations}: 1000</li>\n     *    <li>{@link #setCostRelativeTolerance cost relative tolerance}: 1.0e-10</li>\n     *    <li>{@link #setParRelativeTolerance parameters relative tolerance}: 1.0e-10</li>\n     *    <li>{@link #setOrthoTolerance orthogonality tolerance}: 1.0e-10</li>\n     *   </ul>\n     * </p>\n     * <p>These default values may be overridden after construction. If the {@link\n     * #setConvergenceChecker vectorial convergence checker} is set to a non-null value, it\n     * will be used instead of the {@link #setCostRelativeTolerance cost relative tolerance}\n     * and {@link #setParRelativeTolerance parameters relative tolerance} settings.\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
                "start_loc": 219,
                "end_loc": 444,
                "buggy_function": "     \n    protected VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // arrays shared with the other private methods\n        solvedCols  = Math.min(rows, cols);\n        diagR       = new double[cols];\n        jacNorm     = new double[cols];\n        beta        = new double[cols];\n        permutation = new int[cols];\n        lmDir       = new double[cols];\n\n        // local point\n        double   delta   = 0;\n        double   xNorm   = 0;\n        double[] diag    = new double[cols];\n        double[] oldX    = new double[cols];\n        double[] oldRes  = new double[rows];\n        double[] work1   = new double[cols];\n        double[] work2   = new double[cols];\n        double[] work3   = new double[cols];\n\n        // evaluate the function at the starting point and calculate its norm\n        updateResidualsAndCost();\n\n        // outer loop\n        lmPar = 0;\n        boolean firstIteration = true;\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // compute the Q.R. decomposition of the jacobian matrix\n            updateJacobian();\n            qrDecomposition();\n\n            // compute Qt.res\n            qTy(residuals);\n\n            // now we don't need Q anymore,\n            // so let jacobian contain the R matrix with its diagonal elements\n            for (int k = 0; k < solvedCols; ++k) {\n                int pk = permutation[k];\n                jacobian[k][pk] = diagR[pk];\n            }\n\n            if (firstIteration) {\n\n                // scale the point according to the norms of the columns\n                // of the initial jacobian\n                xNorm = 0;\n                for (int k = 0; k < cols; ++k) {\n                    double dk = jacNorm[k];\n                    if (dk == 0) {\n                        dk = 1.0;\n                    }\n                    double xk = dk * point[k];\n                    xNorm  += xk * xk;\n                    diag[k] = dk;\n                }\n                xNorm = Math.sqrt(xNorm);\n\n                // initialize the step bound delta\n                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n\n            }\n\n            // check orthogonality between function vector and jacobian columns\n            double maxCosine = 0;\n            if (cost != 0) {\n                for (int j = 0; j < solvedCols; ++j) {\n                    int    pj = permutation[j];\n                    double s  = jacNorm[pj];\n                    if (s != 0) {\n                        double sum = 0;\n                        for (int i = 0; i <= j; ++i) {\n                            sum += jacobian[i][pj] * residuals[i];\n                        }\n                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n                    }\n                }\n            }\n            if (maxCosine <= orthoTolerance) {\n                // convergence has been reached\n                return new VectorialPointValuePair(point, objective);\n            }\n\n            // rescale if necessary\n            for (int j = 0; j < cols; ++j) {\n                diag[j] = Math.max(diag[j], jacNorm[j]);\n            }\n\n            // inner loop\n            for (double ratio = 0; ratio < 1.0e-4;) {\n\n                // save the state\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    oldX[pj] = point[pj];\n                }\n                double previousCost = cost;\n                double[] tmpVec = residuals;\n                residuals = oldRes;\n                oldRes    = tmpVec;\n\n                // determine the Levenberg-Marquardt parameter\n                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n\n                // compute the new point and the norm of the evolution direction\n                double lmNorm = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    lmDir[pj] = -lmDir[pj];\n                    point[pj] = oldX[pj] + lmDir[pj];\n                    double s = diag[pj] * lmDir[pj];\n                    lmNorm  += s * s;\n                }\n                lmNorm = Math.sqrt(lmNorm);\n\n                // on the first iteration, adjust the initial step bound.\n                if (firstIteration) {\n                    delta = Math.min(delta, lmNorm);\n                }\n\n                // evaluate the function at x + p and calculate its norm\n                updateResidualsAndCost();\n\n                // compute the scaled actual reduction\n                double actRed = -1.0;\n                if (0.1 * cost < previousCost) {\n                    double r = cost / previousCost;\n                    actRed = 1.0 - r * r;\n                }\n\n                // compute the scaled predicted reduction\n                // and the scaled directional derivative\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    double dirJ = lmDir[pj];\n                    work1[j] = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        work1[i] += jacobian[i][pj] * dirJ;\n                    }\n                }\n                double coeff1 = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    coeff1 += work1[j] * work1[j];\n                }\n                double pc2 = previousCost * previousCost;\n                coeff1 = coeff1 / pc2;\n                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n                double preRed = coeff1 + 2 * coeff2;\n                double dirDer = -(coeff1 + coeff2);\n\n                // ratio of the actual to the predicted reduction\n                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n\n                // update the step bound\n                if (ratio <= 0.25) {\n                    double tmp =\n                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {\n                            tmp = 0.1;\n                        }\n                        delta = tmp * Math.min(delta, 10.0 * lmNorm);\n                        lmPar /= tmp;\n                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                    delta = 2 * lmNorm;\n                    lmPar *= 0.5;\n                }\n\n                // test for successful iteration.\n                if (ratio >= 1.0e-4) {\n                    // successful iteration, update the norm\n                    firstIteration = false;\n                    xNorm = 0;\n                    for (int k = 0; k < cols; ++k) {\n                        double xK = diag[k] * point[k];\n                        xNorm    += xK * xK;\n                    }\n                    xNorm = Math.sqrt(xNorm);\n                } else {\n                    // failed iteration, reset the previous values\n                    cost = previousCost;\n                    for (int j = 0; j < solvedCols; ++j) {\n                        int pj = permutation[j];\n                        point[pj] = oldX[pj];\n                    }\n                    tmpVec    = residuals;\n                    residuals = oldRes;\n                    oldRes    = tmpVec;\n                }\n\n                // tests for convergence.\n                    // we use the vectorial convergence checker\n                    // we use the Levenberg-Marquardt specific convergence parameters\n                    if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                         (preRed <= costRelativeTolerance) &&\n                         (ratio <= 2.0)) ||\n                        (delta <= parRelativeTolerance * xNorm)) {\n                        return new VectorialPointValuePair(point, objective);\n                    }\n\n                // tests for termination and stringent tolerances\n                // (2.2204e-16 is the machine epsilon for IEEE754)\n                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n                    throw new OptimizationException(\"cost relative tolerance is too small ({0}),\" +\n                            \" no further reduction in the\" +\n                            \" sum of squares is possible\",\n                            costRelativeTolerance);\n                } else if (delta <= 2.2204e-16 * xNorm) {\n                    throw new OptimizationException(\"parameters relative tolerance is too small\" +\n                            \" ({0}), no further improvement in\" +\n                            \" the approximate solution is possible\",\n                            parRelativeTolerance);\n                } else if (maxCosine <= 2.2204e-16)  {\n                    throw new OptimizationException(\"orthogonality tolerance is too small ({0}),\" +\n                            \" solution is orthogonal to the jacobian\",\n                            orthoTolerance);\n                }\n\n            }\n\n        }\n\n    }\n",
                "fixed_function": "     \n    protected VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // arrays shared with the other private methods\n        solvedCols  = Math.min(rows, cols);\n        diagR       = new double[cols];\n        jacNorm     = new double[cols];\n        beta        = new double[cols];\n        permutation = new int[cols];\n        lmDir       = new double[cols];\n\n        // local point\n        double   delta   = 0;\n        double   xNorm   = 0;\n        double[] diag    = new double[cols];\n        double[] oldX    = new double[cols];\n        double[] oldRes  = new double[rows];\n        double[] work1   = new double[cols];\n        double[] work2   = new double[cols];\n        double[] work3   = new double[cols];\n\n        // evaluate the function at the starting point and calculate its norm\n        updateResidualsAndCost();\n\n        // outer loop\n        lmPar = 0;\n        boolean firstIteration = true;\n        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // compute the Q.R. decomposition of the jacobian matrix\n            VectorialPointValuePair previous = current;\n            updateJacobian();\n            qrDecomposition();\n\n            // compute Qt.res\n            qTy(residuals);\n\n            // now we don't need Q anymore,\n            // so let jacobian contain the R matrix with its diagonal elements\n            for (int k = 0; k < solvedCols; ++k) {\n                int pk = permutation[k];\n                jacobian[k][pk] = diagR[pk];\n            }\n\n            if (firstIteration) {\n\n                // scale the point according to the norms of the columns\n                // of the initial jacobian\n                xNorm = 0;\n                for (int k = 0; k < cols; ++k) {\n                    double dk = jacNorm[k];\n                    if (dk == 0) {\n                        dk = 1.0;\n                    }\n                    double xk = dk * point[k];\n                    xNorm  += xk * xk;\n                    diag[k] = dk;\n                }\n                xNorm = Math.sqrt(xNorm);\n\n                // initialize the step bound delta\n                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n\n            }\n\n            // check orthogonality between function vector and jacobian columns\n            double maxCosine = 0;\n            if (cost != 0) {\n                for (int j = 0; j < solvedCols; ++j) {\n                    int    pj = permutation[j];\n                    double s  = jacNorm[pj];\n                    if (s != 0) {\n                        double sum = 0;\n                        for (int i = 0; i <= j; ++i) {\n                            sum += jacobian[i][pj] * residuals[i];\n                        }\n                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n                    }\n                }\n            }\n            if (maxCosine <= orthoTolerance) {\n                // convergence has been reached\n                return current;\n            }\n\n            // rescale if necessary\n            for (int j = 0; j < cols; ++j) {\n                diag[j] = Math.max(diag[j], jacNorm[j]);\n            }\n\n            // inner loop\n            for (double ratio = 0; ratio < 1.0e-4;) {\n\n                // save the state\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    oldX[pj] = point[pj];\n                }\n                double previousCost = cost;\n                double[] tmpVec = residuals;\n                residuals = oldRes;\n                oldRes    = tmpVec;\n\n                // determine the Levenberg-Marquardt parameter\n                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n\n                // compute the new point and the norm of the evolution direction\n                double lmNorm = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    lmDir[pj] = -lmDir[pj];\n                    point[pj] = oldX[pj] + lmDir[pj];\n                    double s = diag[pj] * lmDir[pj];\n                    lmNorm  += s * s;\n                }\n                lmNorm = Math.sqrt(lmNorm);\n\n                // on the first iteration, adjust the initial step bound.\n                if (firstIteration) {\n                    delta = Math.min(delta, lmNorm);\n                }\n\n                // evaluate the function at x + p and calculate its norm\n                updateResidualsAndCost();\n                current = new VectorialPointValuePair(point, objective);\n\n                // compute the scaled actual reduction\n                double actRed = -1.0;\n                if (0.1 * cost < previousCost) {\n                    double r = cost / previousCost;\n                    actRed = 1.0 - r * r;\n                }\n\n                // compute the scaled predicted reduction\n                // and the scaled directional derivative\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    double dirJ = lmDir[pj];\n                    work1[j] = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        work1[i] += jacobian[i][pj] * dirJ;\n                    }\n                }\n                double coeff1 = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    coeff1 += work1[j] * work1[j];\n                }\n                double pc2 = previousCost * previousCost;\n                coeff1 = coeff1 / pc2;\n                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n                double preRed = coeff1 + 2 * coeff2;\n                double dirDer = -(coeff1 + coeff2);\n\n                // ratio of the actual to the predicted reduction\n                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n\n                // update the step bound\n                if (ratio <= 0.25) {\n                    double tmp =\n                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {\n                            tmp = 0.1;\n                        }\n                        delta = tmp * Math.min(delta, 10.0 * lmNorm);\n                        lmPar /= tmp;\n                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                    delta = 2 * lmNorm;\n                    lmPar *= 0.5;\n                }\n\n                // test for successful iteration.\n                if (ratio >= 1.0e-4) {\n                    // successful iteration, update the norm\n                    firstIteration = false;\n                    xNorm = 0;\n                    for (int k = 0; k < cols; ++k) {\n                        double xK = diag[k] * point[k];\n                        xNorm    += xK * xK;\n                    }\n                    xNorm = Math.sqrt(xNorm);\n                } else {\n                    // failed iteration, reset the previous values\n                    cost = previousCost;\n                    for (int j = 0; j < solvedCols; ++j) {\n                        int pj = permutation[j];\n                        point[pj] = oldX[pj];\n                    }\n                    tmpVec    = residuals;\n                    residuals = oldRes;\n                    oldRes    = tmpVec;\n                }\n\n                // tests for convergence.\n                if (checker != null) {\n                    // we use the vectorial convergence checker\n                    if (checker.converged(getIterations(), previous, current)) {\n                        return current;                        \n                    }\n                } else {\n                    // we use the Levenberg-Marquardt specific convergence parameters\n                    if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                         (preRed <= costRelativeTolerance) &&\n                         (ratio <= 2.0)) ||\n                        (delta <= parRelativeTolerance * xNorm)) {\n                        return current;\n                    }\n                }\n\n                // tests for termination and stringent tolerances\n                // (2.2204e-16 is the machine epsilon for IEEE754)\n                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n                    throw new OptimizationException(\"cost relative tolerance is too small ({0}),\" +\n                            \" no further reduction in the\" +\n                            \" sum of squares is possible\",\n                            costRelativeTolerance);\n                } else if (delta <= 2.2204e-16 * xNorm) {\n                    throw new OptimizationException(\"parameters relative tolerance is too small\" +\n                            \" ({0}), no further improvement in\" +\n                            \" the approximate solution is possible\",\n                            parRelativeTolerance);\n                } else if (maxCosine <= 2.2204e-16)  {\n                    throw new OptimizationException(\"orthogonality tolerance is too small ({0}),\" +\n                            \" solution is orthogonal to the jacobian\",\n                            orthoTolerance);\n                }\n\n            }\n\n        }\n\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.optimization.general.MinpackTest::testMinpackJennrichSampson": {
                "path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
                "function_name": "testMinpackJennrichSampson",
                "src": "  public void testMinpackJennrichSampson() {\n    minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },\n                                            64.5856498144943, 11.1517793413499,\n                                            new double[] {\n                                             0.2578330049, 0.257829976764542\n                                            }), false);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<0.2578330049> but was:<0.257819926636807>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:120)\n\tat junit.framework.Assert.assertEquals(Assert.java:129)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:288)\n\tat org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction.checkTheoreticalMinParams(MinpackTest.java:575)\n\tat org.apache.commons.math.optimization.general.MinpackTest.minpackTest(MinpackTest.java:503)\n\tat org.apache.commons.math.optimization.general.MinpackTest.testMinpackJennrichSampson(MinpackTest.java:325)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<0.2578330049> but was:<0.257819926636807>\n\tat org.apache.commons.math.optimization.general.MinpackTest.minpackTest(MinpackTest.java:503)  function.checkTheoreticalMinParams(optimum);\n\tat org.apache.commons.math.optimization.general.MinpackTest.testMinpackJennrichSampson(MinpackTest.java:325)  minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },                                            64.5856498144943, 11.1517793413499,                                            new double[] {                                             0.2578330049, 0.257829976764542                                            }), false);",
                "failed_line": 325
            },
            "org.apache.commons.math.optimization.general.MinpackTest::testMinpackFreudensteinRoth": {
                "path": "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java",
                "function_name": "testMinpackFreudensteinRoth",
                "src": "  public void testMinpackFreudensteinRoth() {\n    minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },\n                                             20.0124960961895, 6.99887517584575,\n                                             new double[] {\n                                               11.4124844654993,\n                                               -0.896827913731509\n                                             }), false);\n    minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },\n                                             12432.833948863, 6.9988751744895,\n                                             new double[] {\n                                               11.4121122022341,\n                                               -0.8968550851268697\n                                             }), false);\n    minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },\n                                             11426454.595762, 6.99887517242903,\n                                             new double[] {\n                                               11.412069435091231,\n                                               -0.8968582807605691\n                                             }), false);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<11.4121122022341> but was:<11.41300466147456>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:120)\n\tat junit.framework.Assert.assertEquals(Assert.java:129)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:288)\n\tat org.apache.commons.math.optimization.general.MinpackTest$MinpackFunction.checkTheoreticalMinParams(MinpackTest.java:575)\n\tat org.apache.commons.math.optimization.general.MinpackTest.minpackTest(MinpackTest.java:503)\n\tat org.apache.commons.math.optimization.general.MinpackTest.testMinpackFreudensteinRoth(MinpackTest.java:152)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<11.4121122022341> but was:<11.41300466147456>\n\tat org.apache.commons.math.optimization.general.MinpackTest.minpackTest(MinpackTest.java:503)  function.checkTheoreticalMinParams(optimum);\n\tat org.apache.commons.math.optimization.general.MinpackTest.testMinpackFreudensteinRoth(MinpackTest.java:152)  minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },                                             12432.833948863, 6.9988751744895,                                             new double[] {                                               11.4121122022341,                                               -0.8968550851268697                                             }), false);",
                "failed_line": 152
            }
        }
    },
    "Math_71": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
                "start_loc": 191,
                "end_loc": 366,
                "buggy_function": "   \n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException {\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n      System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n      rki.reinitialize(this, yTmp, yDotK, forward);\n      interpolator = rki;\n    } else {\n      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    stepStart         = t0;\n    double  hNew      = 0;\n    boolean firstTime = true;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // main integration loop\n    while (!lastStep) {\n\n      interpolator.shift();\n\n      double error = 0;\n      for (boolean loop = true; loop;) {\n\n        if (firstTime || !fsal) {\n          // first stage\n          computeDerivatives(stepStart, y, yDotK[0]);\n        }\n\n        if (firstTime) {\n          final double[] scale = new double[y0.length];\n          if (vecAbsoluteTolerance == null) {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);\n              }\n            } else {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);\n              }\n            }\n          hNew = initializeStep(equations, forward, getOrder(), scale,\n                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n          firstTime = false;\n        }\n\n        stepSize = hNew;\n\n        // next stages\n        for (int k = 1; k < stages; ++k) {\n\n          for (int j = 0; j < y0.length; ++j) {\n            double sum = a[k-1][0] * yDotK[0][j];\n            for (int l = 1; l < k; ++l) {\n              sum += a[k-1][l] * yDotK[l][j];\n            }\n            yTmp[j] = y[j] + stepSize * sum;\n          }\n\n          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n\n        }\n\n        // estimate the state at the end of the step\n        for (int j = 0; j < y0.length; ++j) {\n          double sum    = b[0] * yDotK[0][j];\n          for (int l = 1; l < stages; ++l) {\n            sum    += b[l] * yDotK[l][j];\n          }\n          yTmp[j] = y[j] + stepSize * sum;\n        }\n\n        // estimate the error at the end of the step\n        error = estimateError(yDotK, y, yTmp, stepSize);\n        if (error <= 1.0) {\n\n          // discrete events handling\n          interpolator.storeTime(stepStart + stepSize);\n          if (manager.evaluateStep(interpolator)) {\n              final double dt = manager.getEventTime() - stepStart;\n              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                  // we cannot simply truncate the step, reject the current computation\n                  // and let the loop compute another state with the truncated step.\n                  // it is so small (much probably exactly 0 due to limited accuracy)\n                  // that the code above would fail handling it.\n                  // So we set up an artificial 0 size step by copying states\n                  loop     = false;\n              } else {\n                  // reject the step to match exactly the next switch time\n                  hNew = dt;\n              }\n          } else {\n            // accept the step\n            loop = false;\n          }\n\n        } else {\n          // reject the step and attempt to reduce error by stepsize control\n          final double factor =\n              Math.min(maxGrowth,\n                       Math.max(minReduction, safety * Math.pow(error, exp)));\n          hNew = filterStep(stepSize * factor, forward, false);\n        }\n\n      }\n\n      // the step has been accepted\n      final double nextStep = stepStart + stepSize;\n      System.arraycopy(yTmp, 0, y, 0, y0.length);\n      manager.stepAccepted(nextStep, y);\n      lastStep = manager.stop();\n\n      // provide the step data to the step handler\n      interpolator.storeTime(nextStep);\n      for (StepHandler handler : stepHandlers) {\n          handler.handleStep(interpolator, lastStep);\n      }\n      stepStart = nextStep;\n\n      if (fsal) {\n        // save the last evaluation for the next step\n        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n      }\n\n      if (manager.reset(stepStart, y) && ! lastStep) {\n        // some event handler has triggered changes that\n        // invalidate the derivatives, we need to recompute them\n        computeDerivatives(stepStart, y, yDotK[0]);\n      }\n\n      if (! lastStep) {\n        // in some rare cases we may get here with stepSize = 0, for example\n        // when an event occurs at integration start, reducing the first step\n        // to zero; we have to reset the step to some safe non zero value\n          stepSize = filterStep(stepSize, forward, true);\n\n        // stepsize control for next step\n        final double factor = Math.min(maxGrowth,\n                                       Math.max(minReduction,\n                                                safety * Math.pow(error, exp)));\n        final double  scaledH    = stepSize * factor;\n        final double  nextT      = stepStart + scaledH;\n        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n        hNew = filterStep(scaledH, forward, nextIsLast);\n      }\n\n    }\n\n    final double stopTime = stepStart;\n    resetInternalState();\n    return stopTime;\n\n  }\n",
                "fixed_function": "   \n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException {\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n      System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n      rki.reinitialize(this, yTmp, yDotK, forward);\n      interpolator = rki;\n    } else {\n      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    stepStart         = t0;\n    double  hNew      = 0;\n    boolean firstTime = true;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // main integration loop\n    while (!lastStep) {\n\n      interpolator.shift();\n\n      double error = 0;\n      for (boolean loop = true; loop;) {\n\n        if (firstTime || !fsal) {\n          // first stage\n          computeDerivatives(stepStart, y, yDotK[0]);\n        }\n\n        if (firstTime) {\n          final double[] scale = new double[y0.length];\n          if (vecAbsoluteTolerance == null) {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);\n              }\n            } else {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);\n              }\n            }\n          hNew = initializeStep(equations, forward, getOrder(), scale,\n                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n          firstTime = false;\n        }\n\n        stepSize = hNew;\n\n        // next stages\n        for (int k = 1; k < stages; ++k) {\n\n          for (int j = 0; j < y0.length; ++j) {\n            double sum = a[k-1][0] * yDotK[0][j];\n            for (int l = 1; l < k; ++l) {\n              sum += a[k-1][l] * yDotK[l][j];\n            }\n            yTmp[j] = y[j] + stepSize * sum;\n          }\n\n          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n\n        }\n\n        // estimate the state at the end of the step\n        for (int j = 0; j < y0.length; ++j) {\n          double sum    = b[0] * yDotK[0][j];\n          for (int l = 1; l < stages; ++l) {\n            sum    += b[l] * yDotK[l][j];\n          }\n          yTmp[j] = y[j] + stepSize * sum;\n        }\n\n        // estimate the error at the end of the step\n        error = estimateError(yDotK, y, yTmp, stepSize);\n        if (error <= 1.0) {\n\n          // discrete events handling\n          interpolator.storeTime(stepStart + stepSize);\n          if (manager.evaluateStep(interpolator)) {\n              final double dt = manager.getEventTime() - stepStart;\n              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                  // we cannot simply truncate the step, reject the current computation\n                  // and let the loop compute another state with the truncated step.\n                  // it is so small (much probably exactly 0 due to limited accuracy)\n                  // that the code above would fail handling it.\n                  // So we set up an artificial 0 size step by copying states\n                  interpolator.storeTime(stepStart);\n                  System.arraycopy(y, 0, yTmp, 0, y0.length);\n                  hNew     = 0;\n                  stepSize = 0;\n                  loop     = false;\n              } else {\n                  // reject the step to match exactly the next switch time\n                  hNew = dt;\n              }\n          } else {\n            // accept the step\n            loop = false;\n          }\n\n        } else {\n          // reject the step and attempt to reduce error by stepsize control\n          final double factor =\n              Math.min(maxGrowth,\n                       Math.max(minReduction, safety * Math.pow(error, exp)));\n          hNew = filterStep(stepSize * factor, forward, false);\n        }\n\n      }\n\n      // the step has been accepted\n      final double nextStep = stepStart + stepSize;\n      System.arraycopy(yTmp, 0, y, 0, y0.length);\n      manager.stepAccepted(nextStep, y);\n      lastStep = manager.stop();\n\n      // provide the step data to the step handler\n      interpolator.storeTime(nextStep);\n      for (StepHandler handler : stepHandlers) {\n          handler.handleStep(interpolator, lastStep);\n      }\n      stepStart = nextStep;\n\n      if (fsal) {\n        // save the last evaluation for the next step\n        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n      }\n\n      if (manager.reset(stepStart, y) && ! lastStep) {\n        // some event handler has triggered changes that\n        // invalidate the derivatives, we need to recompute them\n        computeDerivatives(stepStart, y, yDotK[0]);\n      }\n\n      if (! lastStep) {\n        // in some rare cases we may get here with stepSize = 0, for example\n        // when an event occurs at integration start, reducing the first step\n        // to zero; we have to reset the step to some safe non zero value\n          stepSize = filterStep(stepSize, forward, true);\n\n        // stepsize control for next step\n        final double factor = Math.min(maxGrowth,\n                                       Math.max(minReduction,\n                                                safety * Math.pow(error, exp)));\n        final double  scaledH    = stepSize * factor;\n        final double  nextT      = stepStart + scaledH;\n        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n        hNew = filterStep(scaledH, forward, nextIsLast);\n      }\n\n    }\n\n    final double stopTime = stepStart;\n    resetInternalState();\n    return stopTime;\n\n  }\n",
                "comment": "  /** {@inheritDoc} */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
                "start_loc": 95,
                "end_loc": 220,
                "buggy_function": "  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException {\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n      System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][];\n    for (int i = 0; i < stages; ++i) {\n      yDotK [i] = new double[y0.length];\n    }\n    final double[] yTmp = new double[y0.length];\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n      rki.reinitialize(this, yTmp, yDotK, forward);\n      interpolator = rki;\n    } else {\n      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    stepStart = t0;\n    stepSize  = forward ? step : -step;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // main integration loop\n    while (!lastStep) {\n\n      interpolator.shift();\n\n      for (boolean loop = true; loop;) {\n\n        // first stage\n        computeDerivatives(stepStart, y, yDotK[0]);\n\n        // next stages\n        for (int k = 1; k < stages; ++k) {\n\n          for (int j = 0; j < y0.length; ++j) {\n            double sum = a[k-1][0] * yDotK[0][j];\n            for (int l = 1; l < k; ++l) {\n              sum += a[k-1][l] * yDotK[l][j];\n            }\n            yTmp[j] = y[j] + stepSize * sum;\n          }\n\n          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n\n        }\n\n        // estimate the state at the end of the step\n        for (int j = 0; j < y0.length; ++j) {\n          double sum    = b[0] * yDotK[0][j];\n          for (int l = 1; l < stages; ++l) {\n            sum    += b[l] * yDotK[l][j];\n          }\n          yTmp[j] = y[j] + stepSize * sum;\n        }\n\n        // discrete events handling\n        interpolator.storeTime(stepStart + stepSize);\n        if (manager.evaluateStep(interpolator)) {\n            final double dt = manager.getEventTime() - stepStart;\n            if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                // we cannot simply truncate the step, reject the current computation\n                // and let the loop compute another state with the truncated step.\n                // it is so small (much probably exactly 0 due to limited accuracy)\n                // that the code above would fail handling it.\n                // So we set up an artificial 0 size step by copying states\n                loop     = false;\n            } else {\n                // reject the step to match exactly the next switch time\n                stepSize = dt;\n            }\n        } else {\n          loop = false;\n        }\n\n      }\n\n      // the step has been accepted\n      final double nextStep = stepStart + stepSize;\n      System.arraycopy(yTmp, 0, y, 0, y0.length);\n      manager.stepAccepted(nextStep, y);\n      lastStep = manager.stop();\n\n      // provide the step data to the step handler\n      interpolator.storeTime(nextStep);\n      for (StepHandler handler : stepHandlers) {\n          handler.handleStep(interpolator, lastStep);\n      }\n      stepStart = nextStep;\n\n      if (manager.reset(stepStart, y) && ! lastStep) {\n        // some events handler has triggered changes that\n        // invalidate the derivatives, we need to recompute them\n        computeDerivatives(stepStart, y, yDotK[0]);\n      }\n\n      // make sure step size is set to default before next step\n      stepSize = forward ? step : -step;\n\n    }\n\n    final double stopTime = stepStart;\n    stepStart = Double.NaN;\n    stepSize  = Double.NaN;\n    return stopTime;\n\n  }\n",
                "fixed_function": "  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException {\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n      System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][];\n    for (int i = 0; i < stages; ++i) {\n      yDotK [i] = new double[y0.length];\n    }\n    final double[] yTmp = new double[y0.length];\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n      rki.reinitialize(this, yTmp, yDotK, forward);\n      interpolator = rki;\n    } else {\n      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    stepStart = t0;\n    stepSize  = forward ? step : -step;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // main integration loop\n    while (!lastStep) {\n\n      interpolator.shift();\n\n      for (boolean loop = true; loop;) {\n\n        // first stage\n        computeDerivatives(stepStart, y, yDotK[0]);\n\n        // next stages\n        for (int k = 1; k < stages; ++k) {\n\n          for (int j = 0; j < y0.length; ++j) {\n            double sum = a[k-1][0] * yDotK[0][j];\n            for (int l = 1; l < k; ++l) {\n              sum += a[k-1][l] * yDotK[l][j];\n            }\n            yTmp[j] = y[j] + stepSize * sum;\n          }\n\n          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n\n        }\n\n        // estimate the state at the end of the step\n        for (int j = 0; j < y0.length; ++j) {\n          double sum    = b[0] * yDotK[0][j];\n          for (int l = 1; l < stages; ++l) {\n            sum    += b[l] * yDotK[l][j];\n          }\n          yTmp[j] = y[j] + stepSize * sum;\n        }\n\n        // discrete events handling\n        interpolator.storeTime(stepStart + stepSize);\n        if (manager.evaluateStep(interpolator)) {\n            final double dt = manager.getEventTime() - stepStart;\n            if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                // we cannot simply truncate the step, reject the current computation\n                // and let the loop compute another state with the truncated step.\n                // it is so small (much probably exactly 0 due to limited accuracy)\n                // that the code above would fail handling it.\n                // So we set up an artificial 0 size step by copying states\n                interpolator.storeTime(stepStart);\n                System.arraycopy(y, 0, yTmp, 0, y0.length);\n                stepSize = 0;\n                loop     = false;\n            } else {\n                // reject the step to match exactly the next switch time\n                stepSize = dt;\n            }\n        } else {\n          loop = false;\n        }\n\n      }\n\n      // the step has been accepted\n      final double nextStep = stepStart + stepSize;\n      System.arraycopy(yTmp, 0, y, 0, y0.length);\n      manager.stepAccepted(nextStep, y);\n      lastStep = manager.stop();\n\n      // provide the step data to the step handler\n      interpolator.storeTime(nextStep);\n      for (StepHandler handler : stepHandlers) {\n          handler.handleStep(interpolator, lastStep);\n      }\n      stepStart = nextStep;\n\n      if (manager.reset(stepStart, y) && ! lastStep) {\n        // some events handler has triggered changes that\n        // invalidate the derivatives, we need to recompute them\n        computeDerivatives(stepStart, y, yDotK[0]);\n      }\n\n      // make sure step size is set to default before next step\n      stepSize = forward ? step : -step;\n\n    }\n\n    final double stopTime = stepStart;\n    stepStart = Double.NaN;\n    stepSize  = Double.NaN;\n    return stopTime;\n\n  }\n",
                "comment": "  /** {@inheritDoc} */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent": {
                "path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
                "function_name": "testMissedEndEvent",
                "src": "  public void testMissedEndEvent() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<1.8782503799999986E9> but was:<1.878250439999994E9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:120)\n\tat junit.framework.Assert.assertEquals(Assert.java:129)\n\tat org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testMissedEndEvent(ClassicalRungeKuttaIntegratorTest.java:70)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<1.8782503799999986E9> but was:<1.878250439999994E9>\n\tat org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testMissedEndEvent(ClassicalRungeKuttaIntegratorTest.java:70)  Assert.assertEquals(tEvent, finalT, 5.0e-6);",
                "failed_line": 70
            },
            "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testMissedEndEvent": {
                "path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
                "function_name": "testMissedEndEvent",
                "src": "  public void testMissedEndEvent() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<1.8782503799999986E9> but was:<1.878250479999994E9>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:120)\n\tat junit.framework.Assert.assertEquals(Assert.java:129)\n\tat org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent(DormandPrince853IntegratorTest.java:72)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<1.8782503799999986E9> but was:<1.878250479999994E9>\n\tat org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent(DormandPrince853IntegratorTest.java:72)  Assert.assertEquals(tEvent, finalT, 5.0e-6);",
                "failed_line": 72
            }
        }
    },
    "Math_76": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
                "start_loc": 153,
                "end_loc": 198,
                "buggy_function": "    public RealMatrix getU()\n        throws InvalidMatrixException {\n\n        if (cachedU == null) {\n\n            final int p = singularValues.length;\n            if (m >= n) {\n                // the tridiagonal matrix is Bt.B, where B is upper bidiagonal\n                final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n                final double[][] eData = e.getData();\n                final double[][] wData = new double[m][p];\n                double[] ei1 = eData[0];\n                for (int i = 0; i < p - 1; ++i) {\n                    // compute W = B.E.S^(-1) where E is the eigenvectors matrix\n                    final double mi = mainBidiagonal[i];\n                    final double[] ei0 = ei1;\n                    final double[] wi  = wData[i];\n                        ei1 = eData[i + 1];\n                        final double si = secondaryBidiagonal[i];\n                        for (int j = 0; j < p; ++j) {\n                            wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                        }\n                }\n                        for (int j = 0; j < p; ++j) {\n                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];\n                        }\n\n                for (int i = p; i < m; ++i) {\n                    wData[i] = new double[p];\n                }\n                cachedU =\n                    transformer.getU().multiply(MatrixUtils.createRealMatrix(wData));\n            } else {\n                // the tridiagonal matrix is B.Bt, where B is lower bidiagonal\n                final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);\n                cachedU = transformer.getU().multiply(e);\n            }\n\n        }\n\n        // return the cached matrix\n        return cachedU;\n\n    }\n",
                "fixed_function": "    public RealMatrix getU()\n        throws InvalidMatrixException {\n\n        if (cachedU == null) {\n\n            final int p = singularValues.length;\n            if (m >= n) {\n                // the tridiagonal matrix is Bt.B, where B is upper bidiagonal\n                final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);\n                final double[][] eData = e.getData();\n                final double[][] wData = new double[m][p];\n                double[] ei1 = eData[0];\n                for (int i = 0; i < p; ++i) {\n                    // compute W = B.E.S^(-1) where E is the eigenvectors matrix\n                    final double mi = mainBidiagonal[i];\n                    final double[] ei0 = ei1;\n                    final double[] wi  = wData[i];\n                    if (i < n - 1) {\n                        ei1 = eData[i + 1];\n                        final double si = secondaryBidiagonal[i];\n                        for (int j = 0; j < p; ++j) {\n                            wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                        }\n                    } else {\n                        for (int j = 0; j < p; ++j) {\n                            wi[j] = mi * ei0[j] / singularValues[j];\n                        }\n                    }\n                }\n\n                for (int i = p; i < m; ++i) {\n                    wData[i] = new double[p];\n                }\n                cachedU =\n                    transformer.getU().multiply(MatrixUtils.createRealMatrix(wData));\n            } else {\n                // the tridiagonal matrix is B.Bt, where B is lower bidiagonal\n                final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);\n                cachedU = transformer.getU().multiply(e);\n            }\n\n        }\n\n        // return the cached matrix\n        return cachedU;\n\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
                "start_loc": 233,
                "end_loc": 277,
                "buggy_function": "    public RealMatrix getV()\n        throws InvalidMatrixException {\n\n        if (cachedV == null) {\n\n            final int p = singularValues.length;\n            if (m >= n) {\n                // the tridiagonal matrix is Bt.B, where B is upper bidiagonal\n                final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);\n                cachedV = transformer.getV().multiply(e);\n            } else {\n                // the tridiagonal matrix is B.Bt, where B is lower bidiagonal\n                // compute W = Bt.E.S^(-1) where E is the eigenvectors matrix\n                final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n                final double[][] eData = e.getData();\n                final double[][] wData = new double[n][p];\n                double[] ei1 = eData[0];\n                for (int i = 0; i < p - 1; ++i) {\n                    final double mi = mainBidiagonal[i];\n                    final double[] ei0 = ei1;\n                    final double[] wi  = wData[i];\n                        ei1 = eData[i + 1];\n                        final double si = secondaryBidiagonal[i];\n                        for (int j = 0; j < p; ++j) {\n                            wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                        }\n                }\n                        for (int j = 0; j < p; ++j) {\n                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];\n                        }\n                for (int i = p; i < n; ++i) {\n                    wData[i] = new double[p];\n                }\n                cachedV =\n                    transformer.getV().multiply(MatrixUtils.createRealMatrix(wData));\n            }\n\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }\n",
                "fixed_function": "    public RealMatrix getV()\n        throws InvalidMatrixException {\n\n        if (cachedV == null) {\n\n            final int p = singularValues.length;\n            if (m >= n) {\n                // the tridiagonal matrix is Bt.B, where B is upper bidiagonal\n                final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);\n                cachedV = transformer.getV().multiply(e);\n            } else {\n                // the tridiagonal matrix is B.Bt, where B is lower bidiagonal\n                // compute W = Bt.E.S^(-1) where E is the eigenvectors matrix\n                final RealMatrix e =\n                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);\n                final double[][] eData = e.getData();\n                final double[][] wData = new double[n][p];\n                double[] ei1 = eData[0];\n                for (int i = 0; i < p; ++i) {\n                    final double mi = mainBidiagonal[i];\n                    final double[] ei0 = ei1;\n                    final double[] wi  = wData[i];\n                    if (i < m - 1) {\n                        ei1 = eData[i + 1];\n                        final double si = secondaryBidiagonal[i];\n                        for (int j = 0; j < p; ++j) {\n                            wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                        }\n                    } else {\n                        for (int j = 0; j < p; ++j) {\n                            wi[j] = mi * ei0[j] / singularValues[j];\n                        }\n                    }\n                }\n                for (int i = p; i < n; ++i) {\n                    wData[i] = new double[p];\n                }\n                cachedV =\n                    transformer.getV().multiply(MatrixUtils.createRealMatrix(wData));\n            }\n\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.linear.SingularValueSolverTest::testMath320A": {
                "path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
                "function_name": "testMath320A",
                "src": "    public void testMath320A() {\n        RealMatrix rm = new Array2DRowRealMatrix(new double[][] {\n            { 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }\n        });\n        double s439  = Math.sqrt(439.0);\n        double[] reference = new double[] {\n            Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))\n        };\n        SingularValueDecomposition svd =\n            new SingularValueDecompositionImpl(rm);\n\n        // check we get the expected theoretical singular values\n        double[] singularValues = svd.getSingularValues();\n        Assert.assertEquals(reference.length, singularValues.length);\n        for (int i = 0; i < reference.length; ++i) {\n            Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);\n        }\n\n        // check the decomposition allows to recover the original matrix\n        RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());\n        Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);\n\n        // check we can solve a singular system\n        double[] b = new double[] { 5.0, 6.0, 7.0 };\n        double[] resSVD = svd.getSolver().solve(b);\n        Assert.assertEquals(rm.getColumnDimension(), resSVD.length);\n\n        // check the solution really minimizes the residuals\n        double svdMinResidual = residual(rm, resSVD, b);\n        double epsilon = 2 * Math.ulp(svdMinResidual);\n        double h = 0.1;\n        int    k = 3;\n        for (double d0 = -k * h; d0 <= k * h; d0 += h) {\n            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {\n                for (double d2 = -k * h; d2 <= k * h; d2 += h) {\n                    double[] x = new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 };\n                    Assert.assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);\n                }\n            }\n        }\n\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.09336767546650937>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.linear.SingularValueSolverTest.testMath320A(SingularValueSolverTest.java:188)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.09336767546650937>\n\tat org.apache.commons.math.linear.SingularValueSolverTest.testMath320A(SingularValueSolverTest.java:188)  Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);",
                "failed_line": 188
            },
            "org.apache.commons.math.linear.SingularValueSolverTest::testMath320B": {
                "path": "src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java",
                "function_name": "testMath320B",
                "src": "    public void testMath320B() {\n        RealMatrix rm = new Array2DRowRealMatrix(new double[][] {\n            { 1.0, 2.0 }, { 1.0, 2.0 }\n        });\n        SingularValueDecomposition svd =\n            new SingularValueDecompositionImpl(rm);\n        RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());\n        Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<0.0> but was:<3.2>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.linear.SingularValueSolverTest.testMath320B(SingularValueSolverTest.java:219)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<0.0> but was:<3.2>\n\tat org.apache.commons.math.linear.SingularValueSolverTest.testMath320B(SingularValueSolverTest.java:219)  Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);",
                "failed_line": 219
            }
        }
    },
    "Math_81": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
                "start_loc": 569,
                "end_loc": 605,
                "buggy_function": "    private void computeGershgorinCircles() {\n\n        final int m     = main.length;\n        final int lowerStart = 4 * m;\n        final int upperStart = 5 * m;\n        lowerSpectra = Double.POSITIVE_INFINITY;\n        upperSpectra = Double.NEGATIVE_INFINITY;\n        double eMax = 0;\n\n        double eCurrent = 0;\n        for (int i = 0; i < m - 1; ++i) {\n\n            final double dCurrent = main[i];\n            final double ePrevious = eCurrent;\n            eCurrent = Math.abs(secondary[i]);\n            eMax = Math.max(eMax, eCurrent);\n            final double radius = ePrevious + eCurrent;\n\n            final double lower = dCurrent - radius;\n            work[lowerStart + i] = lower;\n            lowerSpectra = Math.min(lowerSpectra, lower);\n\n            final double upper = dCurrent + radius;\n            work[upperStart + i] = upper;\n            upperSpectra = Math.max(upperSpectra, upper);\n\n        }\n\n        final double dCurrent = main[m - 1];\n        final double lower = dCurrent - eCurrent;\n        work[lowerStart + m - 1] = lower;\n        lowerSpectra = Math.min(lowerSpectra, lower);\n        final double upper = dCurrent + eCurrent;\n        work[upperStart + m - 1] = upper;\n        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);\n\n    }\n",
                "fixed_function": "    private void computeGershgorinCircles() {\n\n        final int m     = main.length;\n        final int lowerStart = 4 * m;\n        final int upperStart = 5 * m;\n        lowerSpectra = Double.POSITIVE_INFINITY;\n        upperSpectra = Double.NEGATIVE_INFINITY;\n        double eMax = 0;\n\n        double eCurrent = 0;\n        for (int i = 0; i < m - 1; ++i) {\n\n            final double dCurrent = main[i];\n            final double ePrevious = eCurrent;\n            eCurrent = Math.abs(secondary[i]);\n            eMax = Math.max(eMax, eCurrent);\n            final double radius = ePrevious + eCurrent;\n\n            final double lower = dCurrent - radius;\n            work[lowerStart + i] = lower;\n            lowerSpectra = Math.min(lowerSpectra, lower);\n\n            final double upper = dCurrent + radius;\n            work[upperStart + i] = upper;\n            upperSpectra = Math.max(upperSpectra, upper);\n\n        }\n\n        final double dCurrent = main[m - 1];\n        final double lower = dCurrent - eCurrent;\n        work[lowerStart + m - 1] = lower;\n        lowerSpectra = Math.min(lowerSpectra, lower);\n        final double upper = dCurrent + eCurrent;\n        work[upperStart + m - 1] = upper;\n        upperSpectra = Math.max(upperSpectra, upper);\n        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);\n\n    }\n",
                "comment": "    /**\n     * Compute the Gershgorin circles for all rows.\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
                "start_loc": 822,
                "end_loc": 928,
                "buggy_function": "    private void processGeneralBlock(final int n)\n        throws InvalidMatrixException {\n\n        // check decomposed matrix data range\n        double sumOffDiag = 0;\n        for (int i = 0; i < n - 1; ++i) {\n            final int fourI = 4 * i;\n            final double ei = work[fourI + 2];\n            sumOffDiag += ei;\n        }\n\n        if (sumOffDiag == 0) {\n            // matrix is already diagonal\n            return;\n        }\n\n        // initial checks for splits (see Parlett & Marques section 3.3)\n        flipIfWarranted(n, 2);\n\n        // two iterations with Li's test for initial splits\n        initialSplits(n);\n\n        // initialize parameters used by goodStep\n        tType = 0;\n        dMin1 = 0;\n        dMin2 = 0;\n        dN    = 0;\n        dN1   = 0;\n        dN2   = 0;\n        tau   = 0;\n\n        // process split segments\n        int i0 = 0;\n        int n0 = n;\n        while (n0 > 0) {\n\n            // retrieve shift that was temporarily stored as a negative off-diagonal element\n            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];\n            sigmaLow = 0;\n\n            // find start of a new split segment to process\n            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];\n            double offDiagMax = 0;\n            double diagMax    = work[4 * n0 - 4];\n            double diagMin    = diagMax;\n            i0 = 0;\n            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                if (work[i + 2] <= 0) {\n                    i0 = 1 + i / 4;\n                    break;\n                }\n                if (diagMin >= 4 * offDiagMax) {\n                    diagMin    = Math.min(diagMin, work[i + 4]);\n                    offDiagMax = Math.max(offDiagMax, work[i + 2]);\n                }\n                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);\n                offDiagMin = Math.min(offDiagMin, work[i + 2]);\n            }\n            work[4 * n0 - 2] = offDiagMin;\n\n            // lower bound of Gershgorin disk\n            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));\n\n            pingPong = 0;\n            int maxIter = 30 * (n0 - i0);\n            for (int k = 0; i0 < n0; ++k) {\n                if (k >= maxIter) {\n                    throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));\n                }\n\n                // perform one step\n                n0 = goodStep(i0, n0);\n                pingPong = 1 - pingPong;\n\n                // check for new splits after \"ping\" steps\n                // when the last elements of qd array are very small\n                if ((pingPong == 0) && (n0 - i0 > 3) &&\n                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&\n                    (work[4 * n0 - 2] <= TOLERANCE_2 * sigma)) {\n                    int split  = i0 - 1;\n                    diagMax    = work[4 * i0];\n                    offDiagMin = work[4 * i0 + 2];\n                    double previousEMin = work[4 * i0 + 3];\n                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {\n                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&\n                            (work[i + 2] <= TOLERANCE_2 * sigma)) {\n                            // insert a split\n                            work[i + 2]  = -sigma;\n                            split        = i / 4;\n                            diagMax      = 0;\n                            offDiagMin   = work[i + 6];\n                            previousEMin = work[i + 7];\n                        } else {\n                            diagMax      = Math.max(diagMax, work[i + 4]);\n                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);\n                            previousEMin = Math.min(previousEMin, work[i + 3]);\n                        }\n                    }\n                    work[4 * n0 - 2] = offDiagMin;\n                    work[4 * n0 - 1] = previousEMin;\n                    i0 = split + 1;\n                }\n            }\n\n        }\n\n    }\n",
                "fixed_function": "    private void processGeneralBlock(final int n)\n        throws InvalidMatrixException {\n\n        // check decomposed matrix data range\n        double sumOffDiag = 0;\n        for (int i = 0; i < n - 1; ++i) {\n            final int fourI = 4 * i;\n            final double ei = work[fourI + 2];\n            sumOffDiag += ei;\n        }\n\n        if (sumOffDiag == 0) {\n            // matrix is already diagonal\n            return;\n        }\n\n        // initial checks for splits (see Parlett & Marques section 3.3)\n        flipIfWarranted(n, 2);\n\n        // two iterations with Li's test for initial splits\n        initialSplits(n);\n\n        // initialize parameters used by goodStep\n        tType = 0;\n        dMin1 = 0;\n        dMin2 = 0;\n        dN    = 0;\n        dN1   = 0;\n        dN2   = 0;\n        tau   = 0;\n\n        // process split segments\n        int i0 = 0;\n        int n0 = n;\n        while (n0 > 0) {\n\n            // retrieve shift that was temporarily stored as a negative off-diagonal element\n            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];\n            sigmaLow = 0;\n\n            // find start of a new split segment to process\n            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];\n            double offDiagMax = 0;\n            double diagMax    = work[4 * n0 - 4];\n            double diagMin    = diagMax;\n            i0 = 0;\n            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                if (work[i + 2] <= 0) {\n                    i0 = 1 + i / 4;\n                    break;\n                }\n                if (diagMin >= 4 * offDiagMax) {\n                    diagMin    = Math.min(diagMin, work[i + 4]);\n                    offDiagMax = Math.max(offDiagMax, work[i + 2]);\n                }\n                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);\n                offDiagMin = Math.min(offDiagMin, work[i + 2]);\n            }\n            work[4 * n0 - 2] = offDiagMin;\n\n            // lower bound of Gershgorin disk\n            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));\n\n            pingPong = 0;\n            int maxIter = 30 * (n0 - i0);\n            for (int k = 0; i0 < n0; ++k) {\n                if (k >= maxIter) {\n                    throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));\n                }\n\n                // perform one step\n                n0 = goodStep(i0, n0);\n                pingPong = 1 - pingPong;\n\n                // check for new splits after \"ping\" steps\n                // when the last elements of qd array are very small\n                if ((pingPong == 0) && (n0 - i0 > 3) &&\n                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&\n                    (work[4 * n0 - 2] <= TOLERANCE_2 * sigma)) {\n                    int split  = i0 - 1;\n                    diagMax    = work[4 * i0];\n                    offDiagMin = work[4 * i0 + 2];\n                    double previousEMin = work[4 * i0 + 3];\n                    for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {\n                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||\n                            (work[i + 2] <= TOLERANCE_2 * sigma)) {\n                            // insert a split\n                            work[i + 2]  = -sigma;\n                            split        = i / 4;\n                            diagMax      = 0;\n                            offDiagMin   = work[i + 6];\n                            previousEMin = work[i + 7];\n                        } else {\n                            diagMax      = Math.max(diagMax, work[i + 4]);\n                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);\n                            previousEMin = Math.min(previousEMin, work[i + 3]);\n                        }\n                    }\n                    work[4 * n0 - 2] = offDiagMin;\n                    work[4 * n0 - 1] = previousEMin;\n                    i0 = split + 1;\n                }\n            }\n\n        }\n\n    }\n",
                "comment": "    /**\n     * Find realEigenvalues using dqd/dqds algorithms.\n     * <p>This implementation is based on Beresford N. Parlett\n     * and Osni A. Marques paper <a\n     * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An\n     * Implementation of the dqds Algorithm (Positive Case)</a> and on the\n     * corresponding LAPACK routine DLASQ2.</p>\n     * @param n number of rows of the block\n     * @exception InvalidMatrixException if block cannot be diagonalized\n     * after 30 * n iterations\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
                "start_loc": 1430,
                "end_loc": 1672,
                "buggy_function": "    private void computeShiftIncrement(final int start, final int end, final int deflated) {\n\n        final double cnst1 = 0.563;\n        final double cnst2 = 1.010;\n        final double cnst3 = 1.05;\n\n        // a negative dMin forces the shift to take that absolute value\n        // tType records the type of shift.\n        if (dMin <= 0.0) {\n            tau = -dMin;\n            tType = -1;\n            return;\n        }\n\n        int nn = 4 * end + pingPong - 1;\n        switch (deflated) {\n\n        case 0 : // no realEigenvalues deflated.\n            if (dMin == dN || dMin == dN1) {\n\n                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                double a2 = work[nn - 7] + work[nn - 5];\n\n                if (dMin == dN && dMin1 == dN1) {\n                    // cases 2 and 3.\n                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;\n                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n                    if (gap1 > 0.0 && gap1 > b1) {\n                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n                        tType = -2;\n                    } else {\n                        double s = 0.0;\n                        if (dN > b1) {\n                            s = dN - b1;\n                        }\n                        if (a2 > (b1 + b2)) {\n                            s = Math.min(s, a2 - (b1 + b2));\n                        }\n                        tau   = Math.max(s, 0.333 * dMin);\n                        tType = -3;\n                    }\n                } else {\n                    // case 4.\n                    tType = -4;\n                    double s = 0.25 * dMin;\n                    double gam;\n                    int np;\n                    if (dMin == dN) {\n                        gam = dN;\n                        a2 = 0.0;\n                        if (work[nn - 5]  >  work[nn - 7]) {\n                            return;\n                        }\n                        b2 = work[nn - 5] / work[nn - 7];\n                        np = nn - 9;\n                    } else {\n                        np = nn - 2 * pingPong;\n                        b2 = work[np - 2];\n                        gam = dN1;\n                        if (work[np - 4]  >  work[np - 2]) {\n                            return;\n                        }\n                        a2 = work[np - 4] / work[np - 2];\n                        if (work[nn - 9]  >  work[nn - 11]) {\n                            return;\n                        }\n                        b2 = work[nn - 9] / work[nn - 11];\n                        np = nn - 13;\n                    }\n\n                    // approximate contribution to norm squared from i < nn-1.\n                    a2 = a2 + b2;\n                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if(b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n\n                    // rayleigh quotient residual bound.\n                    if (a2 < cnst1) {\n                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                    }\n                    tau = s;\n\n                }\n            } else if (dMin == dN2) {\n\n                // case 5.\n                tType = -5;\n                double s = 0.25 * dMin;\n\n                // compute contribution to norm squared from i > nn-2.\n                final int np = nn - 2 * pingPong;\n                double b1 = work[np - 2];\n                double b2 = work[np - 6];\n                final double gam = dN2;\n                if (work[np - 8] > b2 || work[np - 4] > b1) {\n                    return;\n                }\n                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n\n                // approximate contribution to norm squared from i < nn-2.\n                if (end - start > 2) {\n                    b2 = work[nn - 13] / work[nn - 15];\n                    a2 = a2 + b2;\n                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n                }\n\n                if (a2 < cnst1) {\n                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                } else {\n                    tau = s;\n                }\n\n            } else {\n\n                // case 6, no information to guide us.\n                if (tType == -6) {\n                    g += 0.333 * (1 - g);\n                } else if (tType == -18) {\n                    g = 0.25 * 0.333;\n                } else {\n                    g = 0.25;\n                }\n                tau   = g * dMin;\n                tType = -6;\n\n            }\n            break;\n\n        case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n            if (dMin1 == dN1 && dMin2 == dN2) {\n\n                // cases 7 and 8.\n                tType = -7;\n                double s = 0.333 * dMin1;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0) {\n                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        final double oldB1 = b1;\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 = b1 * (work[i4] / work[i4 - 2]);\n                        b2 = b2 + b1;\n                        if (100 * Math.max(b1, oldB1) < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin1 / (1 + b2 * b2);\n                final double gap2 = 0.5 * dMin2 - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                    tType = -8;\n                }\n            } else {\n\n                // case 9.\n                tau = 0.25 * dMin1;\n                if (dMin1 == dN1) {\n                    tau = 0.5 * dMin1;\n                }\n                tType = -9;\n            }\n            break;\n\n        case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n            // cases 10 and 11.\n            if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n                tType = -10;\n                final double s = 0.333 * dMin2;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0){\n                    for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 *= work[i4] / work[i4 - 2];\n                        b2 += b1;\n                        if (100 * b1 < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin2 / (1 + b2 * b2);\n                final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                }\n            } else {\n                tau   = 0.25 * dMin2;\n                tType = -11;\n            }\n            break;\n\n        default : // case 12, more than two realEigenvalues deflated. no information.\n            tau   = 0.0;\n            tType = -12;\n        }\n\n    }\n",
                "fixed_function": "    private void computeShiftIncrement(final int start, final int end, final int deflated) {\n\n        final double cnst1 = 0.563;\n        final double cnst2 = 1.010;\n        final double cnst3 = 1.05;\n\n        // a negative dMin forces the shift to take that absolute value\n        // tType records the type of shift.\n        if (dMin <= 0.0) {\n            tau = -dMin;\n            tType = -1;\n            return;\n        }\n\n        int nn = 4 * end + pingPong - 1;\n        switch (deflated) {\n\n        case 0 : // no realEigenvalues deflated.\n            if (dMin == dN || dMin == dN1) {\n\n                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                double a2 = work[nn - 7] + work[nn - 5];\n\n                if (dMin == dN && dMin1 == dN1) {\n                    // cases 2 and 3.\n                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;\n                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n                    if (gap1 > 0.0 && gap1 > b1) {\n                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n                        tType = -2;\n                    } else {\n                        double s = 0.0;\n                        if (dN > b1) {\n                            s = dN - b1;\n                        }\n                        if (a2 > (b1 + b2)) {\n                            s = Math.min(s, a2 - (b1 + b2));\n                        }\n                        tau   = Math.max(s, 0.333 * dMin);\n                        tType = -3;\n                    }\n                } else {\n                    // case 4.\n                    tType = -4;\n                    double s = 0.25 * dMin;\n                    double gam;\n                    int np;\n                    if (dMin == dN) {\n                        gam = dN;\n                        a2 = 0.0;\n                        if (work[nn - 5]  >  work[nn - 7]) {\n                            return;\n                        }\n                        b2 = work[nn - 5] / work[nn - 7];\n                        np = nn - 9;\n                    } else {\n                        np = nn - 2 * pingPong;\n                        b2 = work[np - 2];\n                        gam = dN1;\n                        if (work[np - 4]  >  work[np - 2]) {\n                            return;\n                        }\n                        a2 = work[np - 4] / work[np - 2];\n                        if (work[nn - 9]  >  work[nn - 11]) {\n                            return;\n                        }\n                        b2 = work[nn - 9] / work[nn - 11];\n                        np = nn - 13;\n                    }\n\n                    // approximate contribution to norm squared from i < nn-1.\n                    a2 = a2 + b2;\n                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if(b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n\n                    // rayleigh quotient residual bound.\n                    if (a2 < cnst1) {\n                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                    }\n                    tau = s;\n\n                }\n            } else if (dMin == dN2) {\n\n                // case 5.\n                tType = -5;\n                double s = 0.25 * dMin;\n\n                // compute contribution to norm squared from i > nn-2.\n                final int np = nn - 2 * pingPong;\n                double b1 = work[np - 2];\n                double b2 = work[np - 6];\n                final double gam = dN2;\n                if (work[np - 8] > b2 || work[np - 4] > b1) {\n                    return;\n                }\n                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n\n                // approximate contribution to norm squared from i < nn-2.\n                if (end - start > 3) {\n                    b2 = work[nn - 13] / work[nn - 15];\n                    a2 = a2 + b2;\n                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n                }\n\n                if (a2 < cnst1) {\n                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                } else {\n                    tau = s;\n                }\n\n            } else {\n\n                // case 6, no information to guide us.\n                if (tType == -6) {\n                    g += 0.333 * (1 - g);\n                } else if (tType == -18) {\n                    g = 0.25 * 0.333;\n                } else {\n                    g = 0.25;\n                }\n                tau   = g * dMin;\n                tType = -6;\n\n            }\n            break;\n\n        case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n            if (dMin1 == dN1 && dMin2 == dN2) {\n\n                // cases 7 and 8.\n                tType = -7;\n                double s = 0.333 * dMin1;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0) {\n                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        final double oldB1 = b1;\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 = b1 * (work[i4] / work[i4 - 2]);\n                        b2 = b2 + b1;\n                        if (100 * Math.max(b1, oldB1) < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin1 / (1 + b2 * b2);\n                final double gap2 = 0.5 * dMin2 - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                    tType = -8;\n                }\n            } else {\n\n                // case 9.\n                tau = 0.25 * dMin1;\n                if (dMin1 == dN1) {\n                    tau = 0.5 * dMin1;\n                }\n                tType = -9;\n            }\n            break;\n\n        case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n            // cases 10 and 11.\n            if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n                tType = -10;\n                final double s = 0.333 * dMin2;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0){\n                    for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 *= work[i4] / work[i4 - 2];\n                        b2 += b1;\n                        if (100 * b1 < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin2 / (1 + b2 * b2);\n                final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                }\n            } else {\n                tau   = 0.25 * dMin2;\n                tType = -11;\n            }\n            break;\n\n        default : // case 12, more than two realEigenvalues deflated. no information.\n            tau   = 0.0;\n            tType = -12;\n        }\n\n    }\n",
                "comment": "    /**\n     * Compute the shift increment as an estimate of the smallest eigenvalue.\n     * <p>This implementation is a translation of the LAPACK routine DLAZQ4.</p>\n     * @param start start index\n     * @param end end index\n     * @param deflated number of realEigenvalues just deflated\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.linear.EigenDecompositionImplTest::testMath308"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.linear.EigenDecompositionImplTest::testMath308": {
                "path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
                "function_name": "testMath308",
                "src": "    public void testMath308() {\n\n        double[] mainTridiagonal = {\n            22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437\n        };\n        double[] secondaryTridiagonal = {\n            13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225\n        };\n\n        // the reference values have been computed using routine DSTEMR\n        // from the fortran library LAPACK version 3.2.1\n        double[] refEigenValues = {\n            82.044413207204002, 53.456697699894512, 52.536278520113882, 18.847969733754262, 14.138204224043099\n        };\n        RealVector[] refEigenVectors = {\n            new ArrayRealVector(new double[] { -0.000462690386766, -0.002118073109055,  0.011530080757413,  0.252322434584915,  0.967572088232592 }),\n            new ArrayRealVector(new double[] {  0.314647769490148,  0.750806415553905, -0.167700312025760, -0.537092972407375,  0.143854968127780 }),\n            new ArrayRealVector(new double[] {  0.222368839324646,  0.514921891363332, -0.021377019336614,  0.801196801016305, -0.207446991247740 }),\n            new ArrayRealVector(new double[] {  0.713933751051495, -0.190582113553930,  0.671410443368332, -0.056056055955050,  0.006541576993581 }),\n            new ArrayRealVector(new double[] {  0.584677060845929, -0.367177264979103, -0.721453187784497,  0.052971054621812, -0.005740715188257 })\n        };\n\n        EigenDecomposition decomposition =\n            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);\n\n        double[] eigenValues = decomposition.getRealEigenvalues();\n        for (int i = 0; i < refEigenValues.length; ++i) {\n            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);\n            assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);\n        }\n\n    }",
                "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: -1\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(EigenDecompositionImpl.java:1544)\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(EigenDecompositionImpl.java:1071)\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(EigenDecompositionImpl.java:893)\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvalues(EigenDecompositionImpl.java:657)\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.decompose(EigenDecompositionImpl.java:246)\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.<init>(EigenDecompositionImpl.java:205)\n\tat org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308(EigenDecompositionImplTest.java:134)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.ArrayIndexOutOfBoundsException: -1\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.computeShiftIncrement(EigenDecompositionImpl.java:1544)  b2 = work[nn - 13] / work[nn - 15];\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.goodStep(EigenDecompositionImpl.java:1071)  computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.processGeneralBlock(EigenDecompositionImpl.java:893)  n0 = goodStep(i0, n0);\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.findEigenvalues(EigenDecompositionImpl.java:657)  processGeneralBlock(n);\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.decompose(EigenDecompositionImpl.java:246)  findEigenvalues();\n\tat org.apache.commons.math.linear.EigenDecompositionImpl.<init>(EigenDecompositionImpl.java:205)  decompose();\n\tat org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308(EigenDecompositionImplTest.java:134)  EigenDecomposition decomposition =",
                "failed_line": 134
            }
        }
    },
    "Math_83": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
                "start_loc": 290,
                "end_loc": 301,
                "buggy_function": "    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n        Integer row = null;\n        int start = getNumObjectiveFunctions();\n        for (int i = start; i < getHeight(); i++) {\n            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n",
                "fixed_function": "    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n        Integer row = null;\n        int start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;\n        for (int i = start; i < getHeight(); i++) {\n            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }\n",
                "comment": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath286"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
                "start_loc": 339,
                "end_loc": 358,
                "buggy_function": "    protected RealPointValuePair getSolution() {\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n      Set<Integer> basicRows = new HashSet<Integer>();\n      for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n          if (basicRows.contains(basicRow)) {\n              // if multiple variables can take a given value \n              // then we choose the first and set the rest equal to 0\n              coefficients[i] = 0;\n          } else {\n              basicRows.add(basicRow);\n              coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n          }\n      }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n",
                "fixed_function": "    protected RealPointValuePair getSolution() {\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n      Set<Integer> basicRows = new HashSet<Integer>();\n      for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);\n          if (basicRows.contains(basicRow)) {\n              // if multiple variables can take a given value \n              // then we choose the first and set the rest equal to 0\n              coefficients[i] = 0;\n          } else {\n              basicRows.add(basicRow);\n              coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n          }\n      }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n",
                "comment": "    /**\n     * Get the current solution.\n     * \n     * @return current solution\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath286"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath286": {
                "path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
                "function_name": "testMath286",
                "src": "    public void testMath286() throws OptimizationException {\n      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n\n      RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);\n      assertEquals(6.9, solution.getValue(), .0000001);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<6.9> but was:<4.6000000000000005>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(SimplexSolverTest.java:58)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<6.9> but was:<4.6000000000000005>\n\tat org.apache.commons.math.optimization.linear.SimplexSolverTest.testMath286(SimplexSolverTest.java:58)  assertEquals(6.9, solution.getValue(), .0000001);",
                "failed_line": 58
            }
        }
    },
    "Math_92": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/java/org/apache/commons/math/util/MathUtils.java",
                "start_loc": 169,
                "end_loc": 209,
                "buggy_function": "    public static long binomialCoefficient(final int n, final int k) {\n        if (n < k) {\n            throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");\n        }\n        if (n < 0) {\n            throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");\n        }\n        if ((n == k) || (k == 0)) {\n            return 1;\n        }\n        if ((k == 1) || (k == n - 1)) {\n            return n;\n        }\n        long result = Math.round(binomialCoefficientDouble(n, k));\n        if (result == Long.MAX_VALUE) {\n            throw new ArithmeticException(\n                \"result too large to represent in a long integer\");\n        }\n        // Use symmetry for large k\n        \n        // We use the formula\n        // (n choose k) = n! / (n-k)! / k!\n        // (n choose k) == ((n-k+1)*...*n) / (1*...*k)\n        // which could be written\n        // (n choose k) == (n-1 choose k-1) * n / k\n            // For n <= 61, the naive implementation cannot overflow.\n            // For n > 61 but n <= 66, the result cannot overflow,\n            // but we must take care not to overflow intermediate values.\n                // We know that (result * i) is divisible by j,\n                // but (result * i) may overflow, so we split j:\n                // Filter out the gcd, d, so j/d and i/d are integer.\n                // result is divisible by (j/d) because (j/d)\n                // is relative prime to (i/d) and is a divisor of\n                // result * (i/d).\n            // For n > 66, a result overflow might occur, so we check\n            // the multiplication, taking care to not overflow\n            // unnecessary.\n        return result;\n    }\n",
                "fixed_function": "    public static long binomialCoefficient(final int n, final int k) {\n        if (n < k) {\n            throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");\n        }\n        if (n < 0) {\n            throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");\n        }\n        if ((n == k) || (k == 0)) {\n            return 1;\n        }\n        if ((k == 1) || (k == n - 1)) {\n            return n;\n        }\n        // Use symmetry for large k\n        if (k > n / 2)\n            return binomialCoefficient(n, n - k);\n        \n        // We use the formula\n        // (n choose k) = n! / (n-k)! / k!\n        // (n choose k) == ((n-k+1)*...*n) / (1*...*k)\n        // which could be written\n        // (n choose k) == (n-1 choose k-1) * n / k\n        long result = 1;\n        if (n <= 61) {\n            // For n <= 61, the naive implementation cannot overflow.\n            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n                result = result * i / j;\n            }\n        } else if (n <= 66) {\n            // For n > 61 but n <= 66, the result cannot overflow,\n            // but we must take care not to overflow intermediate values.\n            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n                // We know that (result * i) is divisible by j,\n                // but (result * i) may overflow, so we split j:\n                // Filter out the gcd, d, so j/d and i/d are integer.\n                // result is divisible by (j/d) because (j/d)\n                // is relative prime to (i/d) and is a divisor of\n                // result * (i/d).\n                long d = gcd(i, j);\n                result = (result / (j / d)) * (i / d);\n            }\n        } else {\n            // For n > 66, a result overflow might occur, so we check\n            // the multiplication, taking care to not overflow\n            // unnecessary.\n            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {\n                long d = gcd(i, j);\n                result = mulAndCheck((result / (j / d)), (i / d));\n            }\n        }\n        return result;\n    }\n",
                "comment": "    /**\n     * Returns an exact representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which all coefficients are\n     * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n     * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n     * thrown.</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.util.MathUtilsTest::testBinomialCoefficientLarge"
                ]
            },
            {
                "path": "src/java/org/apache/commons/math/util/MathUtils.java",
                "start_loc": 233,
                "end_loc": 237,
                "buggy_function": "    public static double binomialCoefficientDouble(final int n, final int k) {\n        \n  \n        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);\n    }\n",
                "fixed_function": "    public static double binomialCoefficientDouble(final int n, final int k) {\n        if (n < k) {\n            throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");\n        }\n        if (n < 0) {\n            throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");\n        }\n        if ((n == k) || (k == 0)) {\n            return 1d;\n        }\n        if ((k == 1) || (k == n - 1)) {\n            return n;\n        }\n        if (k > n/2) {\n            return binomialCoefficientDouble(n, n - k);\n        }\n        if (n < 67) {\n            return binomialCoefficient(n,k);\n        }\n        \n        double result = 1d;\n        for (int i = 1; i <= k; i++) {\n             result *= (double)(n - k + i) / (double)i;\n        }\n  \n        return Math.floor(result + 0.5);\n    }\n",
                "comment": "    /**\n     * Returns a <code>double</code> representation of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>double</code>. The\n     * largest value of <code>n</code> for which all coefficients are <\n     * Double.MAX_VALUE is 1029. If the computed value exceeds Double.MAX_VALUE,\n     * Double.POSITIVE_INFINITY is returned</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/java/org/apache/commons/math/util/MathUtils.java",
                "start_loc": 257,
                "end_loc": 299,
                "buggy_function": "    public static double binomialCoefficientLog(final int n, final int k) {\n        if (n < k) {\n            throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");\n        }\n        if (n < 0) {\n            throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");\n        }\n        if ((n == k) || (k == 0)) {\n            return 0;\n        }\n        if ((k == 1) || (k == n - 1)) {\n            return Math.log((double) n);\n        }\n        \n        /*\n         * For values small enough to do exact integer computation,\n         * return the log of the exact value \n         */\n        \n        /*\n         * Return the log of binomialCoefficientDouble for values that will not\n         * overflow binomialCoefficientDouble\n         */\n        \n        /*\n         * Sum logs for values that could overflow\n         */\n        double logSum = 0;\n\n        // n!/k!\n        for (int i = k + 1; i <= n; i++) {\n            logSum += Math.log((double)i);\n        }\n\n        // divide by (n-k)!\n        for (int i = 2; i <= n - k; i++) {\n            logSum -= Math.log((double)i);\n        }\n\n        return logSum;      \n    }\n",
                "fixed_function": "    public static double binomialCoefficientLog(final int n, final int k) {\n        if (n < k) {\n            throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");\n        }\n        if (n < 0) {\n            throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");\n        }\n        if ((n == k) || (k == 0)) {\n            return 0;\n        }\n        if ((k == 1) || (k == n - 1)) {\n            return Math.log((double) n);\n        }\n        \n        /*\n         * For values small enough to do exact integer computation,\n         * return the log of the exact value \n         */\n        if (n < 67) {  \n            return Math.log(binomialCoefficient(n,k));\n        }\n        \n        /*\n         * Return the log of binomialCoefficientDouble for values that will not\n         * overflow binomialCoefficientDouble\n         */\n        if (n < 1030) { \n            return Math.log(binomialCoefficientDouble(n, k));\n        } \n        \n        /*\n         * Sum logs for values that could overflow\n         */\n        double logSum = 0;\n\n        // n!/k!\n        for (int i = k + 1; i <= n; i++) {\n            logSum += Math.log((double)i);\n        }\n\n        // divide by (n-k)!\n        for (int i = 2; i <= n - k; i++) {\n            logSum -= Math.log((double)i);\n        }\n\n        return logSum;      \n    }\n",
                "comment": "    /**\n     * Returns the natural <code>log</code> of the <a\n     * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n     * Coefficient</a>, \"<code>n choose k</code>\", the number of\n     * <code>k</code>-element subsets that can be selected from an\n     * <code>n</code>-element set.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>0 <= k <= n </code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * </ul></p>\n     * \n     * @param n the size of the set\n     * @param k the size of the subsets to be counted\n     * @return <code>n choose k</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.util.MathUtilsTest::testBinomialCoefficientLarge": {
                "path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
                "function_name": "testBinomialCoefficientLarge",
                "src": "    public void testBinomialCoefficientLarge() throws Exception {\n        // This tests all legal and illegal values for n <= 200.\n        for (int n = 0; n <= 200; n++) {\n            for (int k = 0; k <= n; k++) {\n                long ourResult = -1;\n                long exactResult = -1;\n                boolean shouldThrow = false;\n                boolean didThrow = false;\n                try {\n                    ourResult = MathUtils.binomialCoefficient(n, k);\n                } catch (ArithmeticException ex) {\n                    didThrow = true;\n                }\n                try {\n                    exactResult = binomialCoefficient(n, k);\n                } catch (ArithmeticException ex) {\n                    shouldThrow = true;\n                }\n                assertEquals(n+\",\"+k, shouldThrow, didThrow);\n                assertEquals(n+\",\"+k, exactResult, ourResult);\n                assertTrue(n+\",\"+k, (n > 66 || !didThrow));\n            }\n        }\n\n        long ourResult = MathUtils.binomialCoefficient(300, 3);\n        long exactResult = binomialCoefficient(300, 3);\n        assertEquals(exactResult, ourResult);\n\n        ourResult = MathUtils.binomialCoefficient(700, 697);\n        exactResult = binomialCoefficient(700, 697);\n        assertEquals(exactResult, ourResult);\n\n        // This one should throw\n        try {\n            MathUtils.binomialCoefficient(700, 300);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // Expected\n        }\n\n        // Larger values cannot be computed directly by our\n        // test implementation because of stack limitations,\n        // so we make little jumps to fill the cache.\n        for (int i = 2000; i <= 10000; i += 2000) {\n            ourResult = MathUtils.binomialCoefficient(i, 3);\n            exactResult = binomialCoefficient(i, 3);\n            assertEquals(exactResult, ourResult);\n        }\n\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:159)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:316)\n\tat org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>\n\tat org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientLarge(MathUtilsTest.java:195)  assertEquals(n+\",\"+k, exactResult, ourResult);",
                "failed_line": 195
            }
        }
    },
    "Math_93": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/java/org/apache/commons/math/util/MathUtils.java",
                "start_loc": 344,
                "end_loc": 351,
                "buggy_function": "    public static long factorial(final int n) {\n        long result = Math.round(factorialDouble(n));\n        if (result == Long.MAX_VALUE) {\n            throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");\n        }\n        return factorials[n];\n    }\n",
                "fixed_function": "    public static long factorial(final int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n        }\n        if (n > 20) {\n            throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");\n        }\n        return factorials[n];\n    }\n",
                "comment": "    /**\n     * Returns n!. Shorthand for <code>n</code> <a\n     * href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the\n     * product of the numbers <code>1,...,n</code>.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>long</code>. The\n     * largest value of <code>n</code> for which <code>n!</code> <\n     * Long.MAX_VALUE</code> is 20. If the computed value exceeds <code>Long.MAX_VALUE</code>\n     * an <code>ArithMeticException </code> is thrown.</li>\n     * </ul>\n     * </p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws ArithmeticException if the result is too large to be represented\n     *         by a long integer.\n     * @throws IllegalArgumentException if n < 0\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.util.MathUtilsTest::testFactorial"
                ]
            },
            {
                "path": "src/java/org/apache/commons/math/util/MathUtils.java",
                "start_loc": 373,
                "end_loc": 378,
                "buggy_function": "    public static double factorialDouble(final int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n        }\n        return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n    }\n",
                "fixed_function": "    public static double factorialDouble(final int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n        }\n        if (n < 21) {\n            return factorial(n);\n        }\n        return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n    }\n",
                "comment": "    /**\n     * Returns n!. Shorthand for <code>n</code> <a\n     * href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the\n     * product of the numbers <code>1,...,n</code> as a <code>double</code>.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * <li> The result is small enough to fit into a <code>double</code>. The\n     * largest value of <code>n</code> for which <code>n!</code> <\n     * Double.MAX_VALUE</code> is 170. If the computed value exceeds\n     * Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>\n     * </ul>\n     * </p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if n < 0\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.util.MathUtilsTest::testFactorial"
                ]
            },
            {
                "path": "src/java/org/apache/commons/math/util/MathUtils.java",
                "start_loc": 393,
                "end_loc": 402,
                "buggy_function": "    public static double factorialLog(final int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"must have n > 0 for n!\");\n        }\n        double logSum = 0;\n        for (int i = 2; i <= n; i++) {\n            logSum += Math.log((double)i);\n        }\n        return logSum;\n    }\n",
                "fixed_function": "    public static double factorialLog(final int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"must have n > 0 for n!\");\n        }\n        if (n < 21) {\n            return Math.log(factorial(n));\n        }\n        double logSum = 0;\n        for (int i = 2; i <= n; i++) {\n            logSum += Math.log((double)i);\n        }\n        return logSum;\n    }\n",
                "comment": "    /**\n     * Returns the natural logarithm of n!.\n     * <p>\n     * <Strong>Preconditions</strong>:\n     * <ul>\n     * <li> <code>n >= 0</code> (otherwise\n     * <code>IllegalArgumentException</code> is thrown)</li>\n     * </ul></p>\n     * \n     * @param n argument\n     * @return <code>n!</code>\n     * @throws IllegalArgumentException if preconditions are not met.\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.util.MathUtilsTest::testFactorial": {
                "path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
                "function_name": "testFactorial",
                "src": "    public void testFactorial() {\n        for (int i = 1; i < 21; i++) {\n            assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n            assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n            assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);\n        }\n        \n        assertEquals(\"0\", 1, MathUtils.factorial(0));\n        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: 17!  expected:<3.55687428096E14> but was:<3.55687428096001E14>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:120)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:279)\n\tat org.apache.commons.math.util.MathUtilsTest.testFactorial(MathUtilsTest.java:237)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: 17!  expected:<3.55687428096E14> but was:<3.55687428096001E14>\n\tat org.apache.commons.math.util.MathUtilsTest.testFactorial(MathUtilsTest.java:237)  assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);",
                "failed_line": 237
            }
        }
    },
    "Math_98": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
                "start_loc": 985,
                "end_loc": 1000,
                "buggy_function": "    public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n        if (v.length != this.getColumnDimension()) {\n            throw new IllegalArgumentException(\"vector has wrong length\");\n        }\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        final BigDecimal[] out = new BigDecimal[v.length];\n        for (int row = 0; row < nRows; row++) {\n            BigDecimal sum = ZERO;\n            for (int i = 0; i < nCols; i++) {\n                sum = sum.add(data[row][i].multiply(v[i]));\n            }\n            out[row] = sum;\n        }\n        return out;\n    }\n",
                "fixed_function": "    public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n        if (v.length != this.getColumnDimension()) {\n            throw new IllegalArgumentException(\"vector has wrong length\");\n        }\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        final BigDecimal[] out = new BigDecimal[nRows];\n        for (int row = 0; row < nRows; row++) {\n            BigDecimal sum = ZERO;\n            for (int i = 0; i < nCols; i++) {\n                sum = sum.add(data[row][i].multiply(v[i]));\n            }\n            out[row] = sum;\n        }\n        return out;\n    }\n",
                "comment": "    /**\n     * Returns the result of multiplying this by the vector <code>v</code>.\n     *\n     * @param v the vector to operate on\n     * @return this*v\n     * @throws IllegalArgumentException if columnDimension != v.size()\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.linear.BigMatrixImplTest::testMath209"
                ]
            },
            {
                "path": "src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
                "start_loc": 773,
                "end_loc": 789,
                "buggy_function": "    public double[] operate(double[] v) throws IllegalArgumentException {\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        if (v.length != nCols) {\n            throw new IllegalArgumentException(\"vector has wrong length\");\n        }\n        final double[] out = new double[v.length];\n        for (int row = 0; row < nRows; row++) {\n            final double[] dataRow = data[row];\n            double sum = 0;\n            for (int i = 0; i < nCols; i++) {\n                sum += dataRow[i] * v[i];\n            }\n            out[row] = sum;\n        }\n        return out;\n    }\n",
                "fixed_function": "    public double[] operate(double[] v) throws IllegalArgumentException {\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        if (v.length != nCols) {\n            throw new IllegalArgumentException(\"vector has wrong length\");\n        }\n        final double[] out = new double[nRows];\n        for (int row = 0; row < nRows; row++) {\n            final double[] dataRow = data[row];\n            double sum = 0;\n            for (int i = 0; i < nCols; i++) {\n                sum += dataRow[i] * v[i];\n            }\n            out[row] = sum;\n        }\n        return out;\n    }\n",
                "comment": "    /**\n     * @param v vector to operate on\n     * @throws IllegalArgumentException if columnDimension != v.length\n     * @return resulting vector\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.linear.RealMatrixImplTest::testMath209"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.linear.BigMatrixImplTest::testMath209": {
                "path": "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java",
                "function_name": "testMath209",
                "src": "    public void testMath209() {\n        BigMatrix a = new BigMatrixImpl(new BigDecimal[][] {\n                { new BigDecimal(1), new BigDecimal(2) },\n                { new BigDecimal(3), new BigDecimal(4) },\n                { new BigDecimal(5), new BigDecimal(6) }\n        }, false);\n        BigDecimal[] b = a.operate(new BigDecimal[] { new BigDecimal(1), new BigDecimal(1) });\n        assertEquals(a.getRowDimension(), b.length);\n        assertEquals( 3.0, b[0].doubleValue(), 1.0e-12);\n        assertEquals( 7.0, b[1].doubleValue(), 1.0e-12);\n        assertEquals(11.0, b[2].doubleValue(), 1.0e-12);\n    }",
                "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 2\n\tat org.apache.commons.math.linear.BigMatrixImpl.operate(BigMatrixImpl.java:997)\n\tat org.apache.commons.math.linear.BigMatrixImplTest.testMath209(BigMatrixImplTest.java:446)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.ArrayIndexOutOfBoundsException: 2\n\tat org.apache.commons.math.linear.BigMatrixImpl.operate(BigMatrixImpl.java:997)  out[row] = sum;\n\tat org.apache.commons.math.linear.BigMatrixImplTest.testMath209(BigMatrixImplTest.java:446)  BigDecimal[] b = a.operate(new BigDecimal[] { new BigDecimal(1), new BigDecimal(1) });",
                "failed_line": 446
            },
            "org.apache.commons.math.linear.RealMatrixImplTest::testMath209": {
                "path": "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java",
                "function_name": "testMath209",
                "src": "    public void testMath209() {\n        RealMatrix a = new RealMatrixImpl(new double[][] {\n                { 1, 2 }, { 3, 4 }, { 5, 6 }\n        }, false);\n        double[] b = a.operate(new double[] { 1, 1 });\n        assertEquals(a.getRowDimension(), b.length);\n        assertEquals( 3.0, b[0], 1.0e-12);\n        assertEquals( 7.0, b[1], 1.0e-12);\n        assertEquals(11.0, b[2], 1.0e-12);\n    }",
                "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 2\n\tat org.apache.commons.math.linear.RealMatrixImpl.operate(RealMatrixImpl.java:786)\n\tat org.apache.commons.math.linear.RealMatrixImplTest.testMath209(RealMatrixImplTest.java:351)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.ArrayIndexOutOfBoundsException: 2\n\tat org.apache.commons.math.linear.RealMatrixImpl.operate(RealMatrixImpl.java:786)  out[row] = sum;\n\tat org.apache.commons.math.linear.RealMatrixImplTest.testMath209(RealMatrixImplTest.java:351)  double[] b = a.operate(new double[] { 1, 1 });",
                "failed_line": 351
            }
        }
    },
    "Math_99": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/java/org/apache/commons/math/util/MathUtils.java",
                "start_loc": 539,
                "end_loc": 592,
                "buggy_function": "    public static int gcd(final int p, final int q) {\n        int u = p;\n        int v = q;\n        if ((u == 0) || (v == 0)) {\n            return (Math.abs(u) + Math.abs(v));\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n                                                            // both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            throw MathRuntimeException.createArithmeticException(\n                    \"overflow: gcd({0}, {1}) is 2^31\",\n                    new Object[] { p, q });\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t != 0);\n        return -u * (1 << k); // gcd is u*2^k\n    }\n",
                "fixed_function": "    public static int gcd(final int p, final int q) {\n        int u = p;\n        int v = q;\n        if ((u == 0) || (v == 0)) {\n            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n                throw MathRuntimeException.createArithmeticException(\n                        \"overflow: gcd({0}, {1}) is 2^31\",\n                        new Object[] { p, q });\n            }\n            return (Math.abs(u) + Math.abs(v));\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n                                                            // both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            throw MathRuntimeException.createArithmeticException(\n                    \"overflow: gcd({0}, {1}) is 2^31\",\n                    new Object[] { p, q });\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t != 0);\n        return -u * (1 << k); // gcd is u*2^k\n    }\n",
                "comment": "    /**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * Special cases:\n     * <ul>\n     * <li>The invocations\n     * <code>gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)</code>,\n     * <code>gcd(Integer.MIN_VALUE, 0)</code> and\n     * <code>gcd(0, Integer.MIN_VALUE)</code> throw an\n     * <code>ArithmeticException</code>, because the result would be 2^31, which\n     * is too large for an int value.</li>\n     * <li>The result of <code>gcd(x, x)</code>, <code>gcd(0, x)</code> and\n     * <code>gcd(x, 0)</code> is the absolute value of <code>x</code>, except\n     * for the special cases above.\n     * <li>The invocation <code>gcd(0, 0)</code> is the only one which returns\n     * <code>0</code>.</li>\n     * </ul>\n     * \n     * @param u any number\n     * @param v any number\n     * @return the greatest common divisor, never negative\n     * @throws ArithmeticException\n     *             if the result cannot be represented as a nonnegative int\n     *             value\n     * @since 1.1\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.util.MathUtilsTest::testGcd"
                ]
            },
            {
                "path": "src/java/org/apache/commons/math/util/MathUtils.java",
                "start_loc": 709,
                "end_loc": 715,
                "buggy_function": "    public static int lcm(int a, int b) {\n        if (a==0 || b==0){\n            return 0;\n        }\n        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));\n        return lcm;\n    }\n",
                "fixed_function": "    public static int lcm(int a, int b) {\n        if (a==0 || b==0){\n            return 0;\n        }\n        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));\n        if (lcm == Integer.MIN_VALUE){\n            throw new ArithmeticException(\"overflow: lcm is 2^31\");\n        }\n        return lcm;\n    }\n",
                "comment": "    /**\n     * <p>\n     * Returns the least common multiple of the absolute value of two numbers,\n     * using the formula <code>lcm(a,b) = (a / gcd(a,b)) * b</code>.\n     * </p>\n     * Special cases:\n     * <ul>\n     * <li>The invocations <code>lcm(Integer.MIN_VALUE, n)</code> and\n     * <code>lcm(n, Integer.MIN_VALUE)</code>, where <code>abs(n)</code> is a\n     * power of 2, throw an <code>ArithmeticException</code>, because the result\n     * would be 2^31, which is too large for an int value.</li>\n     * <li>The result of <code>lcm(0, x)</code> and <code>lcm(x, 0)</code> is\n     * <code>0</code> for any <code>x</code>.\n     * </ul>\n     * \n     * @param a any number\n     * @param b any number\n     * @return the least common multiple, never negative\n     * @throws ArithmeticException\n     *             if the result cannot be represented as a nonnegative int\n     *             value\n     * @since 1.1\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.util.MathUtilsTest::testLcm"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.util.MathUtilsTest::testGcd": {
                "path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
                "function_name": "testGcd",
                "src": "    public void testGcd() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.gcd(0, 0));\n\n        assertEquals(b, MathUtils.gcd(0, b));\n        assertEquals(a, MathUtils.gcd(a, 0));\n        assertEquals(b, MathUtils.gcd(0, -b));\n        assertEquals(a, MathUtils.gcd(-a, 0));\n\n        assertEquals(10, MathUtils.gcd(a, b));\n        assertEquals(10, MathUtils.gcd(-a, b));\n        assertEquals(10, MathUtils.gcd(a, -b));\n        assertEquals(10, MathUtils.gcd(-a, -b));\n\n        assertEquals(1, MathUtils.gcd(a, c));\n        assertEquals(1, MathUtils.gcd(-a, c));\n        assertEquals(1, MathUtils.gcd(a, -c));\n        assertEquals(1, MathUtils.gcd(-a, -c));\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));\n        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expecting ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.math.util.MathUtilsTest.testGcd(MathUtilsTest.java:437)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expecting ArithmeticException\n\tat org.apache.commons.math.util.MathUtilsTest.testGcd(MathUtilsTest.java:437)  fail(\"expecting ArithmeticException\");",
                "failed_line": 437
            },
            "org.apache.commons.math.util.MathUtilsTest::testLcm": {
                "path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
                "function_name": "testLcm",
                "src": "    public void testLcm() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.lcm(0, b));\n        assertEquals(0, MathUtils.lcm(a, 0));\n        assertEquals(b, MathUtils.lcm(1, b));\n        assertEquals(a, MathUtils.lcm(a, 1));\n        assertEquals(150, MathUtils.lcm(a, b));\n        assertEquals(150, MathUtils.lcm(-a, b));\n        assertEquals(150, MathUtils.lcm(a, -b));\n        assertEquals(150, MathUtils.lcm(-a, -b));\n        assertEquals(2310, MathUtils.lcm(a, c));\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));\n\n        // Special case\n        assertEquals(0, MathUtils.lcm(0, 0));\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: Expecting ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.math.util.MathUtilsTest.testLcm(MathUtilsTest.java:590)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: Expecting ArithmeticException\n\tat org.apache.commons.math.util.MathUtilsTest.testLcm(MathUtilsTest.java:590)  fail(\"Expecting ArithmeticException\");",
                "failed_line": 590
            }
        }
    },
    "Math_100": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
                "start_loc": 158,
                "end_loc": 188,
                "buggy_function": "    public double[][] getCovariances(EstimationProblem problem)\n      throws EstimationException {\n \n       \n        updateJacobian();\n\n        \n        final int rows = problem.getMeasurements().length;\n        final int cols = problem.getAllParameters().length;\n        final int max  = cols * rows;\n        double[][] jTj = new double[cols][cols];\n        for (int i = 0; i < cols; ++i) {\n            for (int j = i; j < cols; ++j) {\n                double sum = 0;\n                for (int k = 0; k < max; k += cols) {\n                    sum += jacobian[k + i] * jacobian[k + j];\n                }\n                jTj[i][j] = sum;\n                jTj[j][i] = sum;\n            }\n        }\n\n        try {\n            // compute the covariances matrix\n            return new RealMatrixImpl(jTj).inverse().getData();\n        } catch (InvalidMatrixException ime) {\n            throw new EstimationException(\"unable to compute covariances: singular problem\",\n                                          new Object[0]);\n        }\n\n    }\n",
                "fixed_function": "    public double[][] getCovariances(EstimationProblem problem)\n      throws EstimationException {\n \n       \n        updateJacobian();\n\n        \n        final int rows = problem.getMeasurements().length;\n        final int cols = problem.getUnboundParameters().length;\n        final int max  = cols * rows;\n        double[][] jTj = new double[cols][cols];\n        for (int i = 0; i < cols; ++i) {\n            for (int j = i; j < cols; ++j) {\n                double sum = 0;\n                for (int k = 0; k < max; k += cols) {\n                    sum += jacobian[k + i] * jacobian[k + j];\n                }\n                jTj[i][j] = sum;\n                jTj[j][i] = sum;\n            }\n        }\n\n        try {\n            // compute the covariances matrix\n            return new RealMatrixImpl(jTj).inverse().getData();\n        } catch (InvalidMatrixException ime) {\n            throw new EstimationException(\"unable to compute covariances: singular problem\",\n                                          new Object[0]);\n        }\n\n    }\n",
                "comment": "    /**\n     * Get the covariance matrix of unbound estimated parameters.\n     * @param problem estimation problem\n     * @return covariance matrix\n     * @exception EstimationException if the covariance matrix\n     * cannot be computed (singular problem)\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters"
                ]
            },
            {
                "path": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
                "start_loc": 199,
                "end_loc": 214,
                "buggy_function": "    public double[] guessParametersErrors(EstimationProblem problem)\n      throws EstimationException {\n        int m = problem.getMeasurements().length;\n        int p = problem.getAllParameters().length;\n        if (m <= p) {\n            throw new EstimationException(\"no degrees of freedom ({0} measurements, {1} parameters)\",\n                                          new Object[] { new Integer(m), new Integer(p)});\n        }\n        double[] errors = new double[problem.getAllParameters().length];\n        final double c = Math.sqrt(getChiSquare(problem) / (m - p));\n        double[][] covar = getCovariances(problem);\n        for (int i = 0; i < errors.length; ++i) {\n            errors[i] = Math.sqrt(covar[i][i]) * c;\n        }\n        return errors;\n    }\n",
                "fixed_function": "    public double[] guessParametersErrors(EstimationProblem problem)\n      throws EstimationException {\n        int m = problem.getMeasurements().length;\n        int p = problem.getUnboundParameters().length;\n        if (m <= p) {\n            throw new EstimationException(\"no degrees of freedom ({0} measurements, {1} parameters)\",\n                                          new Object[] { new Integer(m), new Integer(p)});\n        }\n        double[] errors = new double[problem.getUnboundParameters().length];\n        final double c = Math.sqrt(getChiSquare(problem) / (m - p));\n        double[][] covar = getCovariances(problem);\n        for (int i = 0; i < errors.length; ++i) {\n            errors[i] = Math.sqrt(covar[i][i]) * c;\n        }\n        return errors;\n    }\n",
                "comment": "    /**\n     * Guess the errors in unbound estimated parameters.\n     * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>\n     * @param problem estimation problem\n     * @return errors in estimated parameters\n     * @exception EstimationException if the covariances matrix cannot be computed\n     * or the number of degrees of freedom is not positive (number of measurements\n     * lesser or equal to number of parameters)\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters": {
                "path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
                "function_name": "testBoundParameters",
                "src": "  public void testBoundParameters() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      assertTrue(estimator.getRMS(problem) < 1.0e-10);\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);\n      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);\n      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);\n      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      assertEquals(0, errors[i0], 1.0e-10);\n      assertEquals(0, errors[i1], 1.0e-10);\n\n  }",
                "stack_trace": "java.lang.ArrayIndexOutOfBoundsException: 6\n\tat org.apache.commons.math.estimation.AbstractEstimator.getCovariances(AbstractEstimator.java:173)\n\tat org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters(GaussNewtonEstimatorTest.java:472)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "java.lang.ArrayIndexOutOfBoundsException: 6\n\tat org.apache.commons.math.estimation.AbstractEstimator.getCovariances(AbstractEstimator.java:173)  sum += jacobian[k + i] * jacobian[k + j];\n\tat org.apache.commons.math.estimation.GaussNewtonEstimatorTest.testBoundParameters(GaussNewtonEstimatorTest.java:472)  double[][] covariances = estimator.getCovariances(problem);",
                "failed_line": 472
            }
        }
    },
    "Mockito_4": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/org/mockito/exceptions/Reporter.java",
                "start_loc": 417,
                "end_loc": 428,
                "buggy_function": "    public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n        ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n        String scenario = scenarioPrinter.print(invocations);\n\n        throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                undesired.getLocation(),\n                scenario\n        ));\n    }\n",
                "fixed_function": "    public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {\n        ScenarioPrinter scenarioPrinter = new ScenarioPrinter();\n        String scenario = scenarioPrinter.print(invocations);\n\n        throw new NoInteractionsWanted(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n                undesired.getLocation(),\n                scenario\n        ));\n    }\n",
                "comment": "",
                "directly_related_tests": [
                    "org.mockito.exceptions.ReporterTest::can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted",
                    "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest::should_not_throw_a_ClassCastException"
                ]
            },
            {
                "path": "src/org/mockito/exceptions/Reporter.java",
                "start_loc": 430,
                "end_loc": 437,
                "buggy_function": "    public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                undesired.getLocation()\n        ));\n    }\n",
                "fixed_function": "    public void noMoreInteractionsWantedInOrder(Invocation undesired) {\n        throw new VerificationInOrderFailure(join(\n                \"No interactions wanted here:\",\n                new LocationImpl(),\n                \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n                undesired.getLocation()\n        ));\n    }\n",
                "comment": "",
                "directly_related_tests": [
                    "org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order"
                ]
            },
            {
                "path": "src/org/mockito/exceptions/Reporter.java",
                "start_loc": 676,
                "end_loc": 678,
                "buggy_function": "    private String exceptionCauseMessageIfAvailable(Exception details) {\n        return details.getCause().getMessage();\n    }\n",
                "fixed_function": "    private String exceptionCauseMessageIfAvailable(Exception details) {\n        if (details.getCause() == null) {\n            return details.getMessage();\n        }\n        return details.getCause().getMessage();\n    }\n",
                "comment": "",
                "directly_related_tests": [
                    "org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure"
                ]
            }
        ],
        "trigger_test": {
            "org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order": {
                "path": "test/org/mockito/exceptions/ReporterTest.java",
                "function_name": "can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order",
                "src": "    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);\n    }",
                "stack_trace": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.VerificationInOrderFailure> but was<java.lang.ClassCastException>\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockitousage.IMethods$$EnhancerByMockitoWithCGLIB$$de235dc2.toString(<generated>)\n\tat java.lang.String.valueOf(String.java:2994)\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(Reporter.java:434)\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order(ReporterTest.java:47)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)\n\t... 33 more",
                "clean_error_message": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.VerificationInOrderFailure> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(Reporter.java:434)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order(ReporterTest.java:47)  new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);\n\t... 33 more",
                "failed_line": 47
            },
            "org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure": {
                "path": "test/org/mockito/exceptions/ReporterTest.java",
                "function_name": "can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure",
                "src": "    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure() throws Exception {\n        IMethods mock_with_bogus_default_answer = mock(IMethods.class, new Returns(false));\n        new Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());\n    }",
                "stack_trace": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.base.MockitoException> but was<java.lang.NullPointerException>\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.NullPointerException\n\tat org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(Reporter.java:677)\n\tat org.mockito.exceptions.Reporter.cannotInjectDependency(Reporter.java:671)\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure(ReporterTest.java:79)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)\n\t... 33 more",
                "clean_error_message": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.base.MockitoException> but was<java.lang.NullPointerException>\nCaused by: java.lang.NullPointerException\n\tat org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(Reporter.java:677)  return details.getCause().getMessage();\n\tat org.mockito.exceptions.Reporter.cannotInjectDependency(Reporter.java:671)  \"Also I failed because: \" + exceptionCauseMessageIfAvailable(details),\n\tat org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure(ReporterTest.java:79)  new Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());\n\t... 33 more",
                "failed_line": 79
            },
            "org.mockito.exceptions.ReporterTest::can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted": {
                "path": "test/org/mockito/exceptions/ReporterTest.java",
                "function_name": "can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted",
                "src": "    public void can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted() throws Exception {\n        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();\n        new Reporter().noMoreInteractionsWanted(invocation_with_bogus_default_answer, Collections.<VerificationAwareInvocation>emptyList());\n    }",
                "stack_trace": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockitousage.IMethods$$EnhancerByMockitoWithCGLIB$$de235dc2.toString(<generated>)\n\tat java.lang.String.valueOf(String.java:2994)\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)\n\tat org.mockito.exceptions.ReporterTest.can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted(ReporterTest.java:41)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)\n\t... 33 more",
                "clean_error_message": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.exceptions.ReporterTest.can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted(ReporterTest.java:41)  new Reporter().noMoreInteractionsWanted(invocation_with_bogus_default_answer, Collections.<VerificationAwareInvocation>emptyList());\n\t... 33 more",
                "failed_line": 41
            },
            "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest::should_not_throw_a_ClassCastException": {
                "path": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java",
                "function_name": "should_not_throw_a_ClassCastException",
                "src": "    public void should_not_throw_a_ClassCastException() {\n        TestMock test = mock(TestMock.class, new Answer() {\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                return false;\n            }\n        });\n        test.m1();\n        verifyZeroInteractions(test);\n    }",
                "stack_trace": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest$TestMock$$EnhancerByMockitoWithCGLIB$$9b036b99.toString(<generated>)\n\tat java.lang.String.valueOf(String.java:2994)\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)\n\tat org.mockito.internal.verification.NoMoreInteractions.verify(NoMoreInteractions.java:24)\n\tat org.mockito.internal.MockitoCore.verifyNoMoreInteractions(MockitoCore.java:113)\n\tat org.mockito.Mockito.verifyZeroInteractions(Mockito.java:1674)\n\tat org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.should_not_throw_a_ClassCastException(ClassCastExOnVerifyZeroInteractionsTest.java:24)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)\n\t... 31 more",
                "clean_error_message": "java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>\nCaused by: java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n\tat org.mockito.exceptions.Reporter.noMoreInteractionsWanted(Reporter.java:424)  \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n\tat org.mockito.internal.verification.NoMoreInteractions.verify(NoMoreInteractions.java:24)  new Reporter().noMoreInteractionsWanted(unverified, (List) data.getAllInvocations());\n\tat org.mockito.internal.MockitoCore.verifyNoMoreInteractions(MockitoCore.java:113)  VerificationModeFactory.noMoreInteractions().verify(data);\n\tat org.mockito.Mockito.verifyZeroInteractions(Mockito.java:1674)  MOCKITO_CORE.verifyNoMoreInteractions(mocks);\n\tat org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.should_not_throw_a_ClassCastException(ClassCastExOnVerifyZeroInteractionsTest.java:24)  verifyZeroInteractions(test);\n\t... 31 more",
                "failed_line": 24
            }
        }
    },
    "Mockito_6": {
        "function_num": 20,
        "functions": [
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 121,
                "end_loc": 123,
                "buggy_function": "    public static boolean anyBoolean() {\n        return reportMatcher(Any.ANY).returnFalse();\n    }\n",
                "fixed_function": "    public static boolean anyBoolean() {\n        return reportMatcher(new InstanceOf(Boolean.class)).returnFalse();\n    }\n",
                "comment": "    /**\n     * Any <code>boolean</code>, <code>Boolean</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>false</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 136,
                "end_loc": 138,
                "buggy_function": "    public static byte anyByte() {\n        return reportMatcher(Any.ANY).returnZero();\n    }\n",
                "fixed_function": "    public static byte anyByte() {\n        return reportMatcher(new InstanceOf(Byte.class)).returnZero();\n    }\n",
                "comment": "    /**\n     * Any <code>byte</code>, <code>Byte</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>0</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 151,
                "end_loc": 153,
                "buggy_function": "    public static char anyChar() {\n        return reportMatcher(Any.ANY).returnChar();\n    }\n",
                "fixed_function": "    public static char anyChar() {\n        return reportMatcher(new InstanceOf(Character.class)).returnChar();\n    }\n",
                "comment": "    /**\n     * Any <code>char</code>, <code>Character</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>0</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 166,
                "end_loc": 168,
                "buggy_function": "    public static int anyInt() {\n        return reportMatcher(Any.ANY).returnZero();\n    }\n",
                "fixed_function": "    public static int anyInt() {\n        return reportMatcher(new InstanceOf(Integer.class)).returnZero();\n    }\n",
                "comment": "    /**\n     * Any int, Integer or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>0</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 181,
                "end_loc": 183,
                "buggy_function": "    public static long anyLong() {\n        return reportMatcher(Any.ANY).returnZero();\n    }\n",
                "fixed_function": "    public static long anyLong() {\n        return reportMatcher(new InstanceOf(Long.class)).returnZero();\n    }\n",
                "comment": "    /**\n     * Any <code>long</code>, <code>Long</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>0</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 196,
                "end_loc": 198,
                "buggy_function": "    public static float anyFloat() {\n        return reportMatcher(Any.ANY).returnZero();\n    }\n",
                "fixed_function": "    public static float anyFloat() {\n        return reportMatcher(new InstanceOf(Float.class)).returnZero();\n    }\n",
                "comment": "    /**\n     * Any <code>float</code>, <code>Float</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>0</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 211,
                "end_loc": 213,
                "buggy_function": "    public static double anyDouble() {\n        return reportMatcher(Any.ANY).returnZero();\n    }\n",
                "fixed_function": "    public static double anyDouble() {\n        return reportMatcher(new InstanceOf(Double.class)).returnZero();\n    }\n",
                "comment": "    /**\n     * Any <code>double</code>, <code>Double</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>0</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 226,
                "end_loc": 228,
                "buggy_function": "    public static short anyShort() {\n        return reportMatcher(Any.ANY).returnZero();\n    }\n",
                "fixed_function": "    public static short anyShort() {\n        return reportMatcher(new InstanceOf(Short.class)).returnZero();\n    }\n",
                "comment": "    /**\n     * Any <code>short</code>, <code>Short</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>0</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 243,
                "end_loc": 245,
                "buggy_function": "    public static <T> T anyObject() {\n        return (T) reportMatcher(Any.ANY).returnNull();\n    }\n",
                "fixed_function": "    public static <T> T anyObject() {\n        return (T) reportMatcher(new InstanceOf(Object.class)).returnNull();\n    }\n",
                "comment": "    /**\n     * Any <code>Object</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * Has aliases: {@link #any()} and {@link #any(Class clazz)}\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>null</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 291,
                "end_loc": 293,
                "buggy_function": "    public static <T> T any(Class<T> clazz) {\n        return (T) reportMatcher(Any.ANY).returnFor(clazz);\n    }\n",
                "fixed_function": "    public static <T> T any(Class<T> clazz) {\n        return (T) reportMatcher(new InstanceOf(clazz)).returnFor(clazz);\n    }\n",
                "comment": "    /**\n     * Any kind object, not necessary of the given class.\n     * The class argument is provided only to avoid casting.\n     * <p>\n     * Sometimes looks better than <code>anyObject()</code> - especially when explicit casting is required\n     * <p>\n     * Alias to {@link Matchers#anyObject()}\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param clazz The type to avoid casting\n     * @return <code>null</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 308,
                "end_loc": 310,
                "buggy_function": "    public static <T> T any() {\n        return (T) anyObject();\n    }\n",
                "fixed_function": "    public static <T> T any() {\n        return (T) reportMatcher(Any.ANY).returnNull();\n    }\n",
                "comment": "    /**\n     * Any object or <code>null</code>.\n     * <p>\n     * Shorter alias to {@link Matchers#anyObject()}\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return <code>null</code>.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 323,
                "end_loc": 325,
                "buggy_function": "    public static String anyString() {\n        return reportMatcher(Any.ANY).returnString();\n    }\n",
                "fixed_function": "    public static String anyString() {\n        return reportMatcher(new InstanceOf(String.class)).returnString();\n    }\n",
                "comment": "    /**\n     * Any <code>String</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return empty String (\"\")\n     */\n",
                "directly_related_tests": [
                    "org.mockitousage.matchers.MatchersTest::anyStringMatcher"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 338,
                "end_loc": 340,
                "buggy_function": "    public static List anyList() {\n        return reportMatcher(Any.ANY).returnList();\n    }    \n",
                "fixed_function": "    public static List anyList() {\n        return reportMatcher(new InstanceOf(List.class)).returnList();\n    }    \n",
                "comment": "    /**\n     * Any <code>List</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return empty List.\n     */\n",
                "directly_related_tests": [
                    "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyList"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 357,
                "end_loc": 359,
                "buggy_function": "    public static <T> List<T> anyListOf(Class<T> clazz) {\n        return (List) reportMatcher(Any.ANY).returnList();\n    }    \n",
                "fixed_function": "    public static <T> List<T> anyListOf(Class<T> clazz) {\n        return anyList();\n    }    \n",
                "comment": "    /**\n     * Generic friendly alias to {@link Matchers#anyList()}.\n     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n     * <p>\n     * Any <code>List</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param clazz Type owned by the list to avoid casting\n     * @return empty List.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 372,
                "end_loc": 374,
                "buggy_function": "    public static Set anySet() {\n        return reportMatcher(Any.ANY).returnSet();\n    }\n",
                "fixed_function": "    public static Set anySet() {\n        return reportMatcher(new InstanceOf(Set.class)).returnSet();\n    }\n",
                "comment": "    /**\n     * Any <code>Set</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @return empty Set\n     */\n",
                "directly_related_tests": [
                    "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnySet"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 391,
                "end_loc": 393,
                "buggy_function": "    public static <T> Set<T> anySetOf(Class<T> clazz) {\n        return (Set) reportMatcher(Any.ANY).returnSet();\n    }\n",
                "fixed_function": "    public static <T> Set<T> anySetOf(Class<T> clazz) {\n        return anySet();\n    }\n",
                "comment": "    /**\n     * Generic friendly alias to {@link Matchers#anySet()}.\n     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n     * <p>\n     * Any <code>Set</code> or <code>null</code>\n     * <p>\n     * This method <b>*dones't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @param clazz Type owned by the Set to avoid casting\n     * @return empty Set\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 406,
                "end_loc": 408,
                "buggy_function": "    public static Map anyMap() {\n        return reportMatcher(Any.ANY).returnMap();\n    }\n",
                "fixed_function": "    public static Map anyMap() {\n        return reportMatcher(new InstanceOf(Map.class)).returnMap();\n    }\n",
                "comment": "    /**\n     * Any <code>Map</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return empty Map.\n     */\n",
                "directly_related_tests": [
                    "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyMap"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 426,
                "end_loc": 428,
                "buggy_function": "    public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {\n        return reportMatcher(Any.ANY).returnMap();\n    }\n",
                "fixed_function": "    public static <K, V>  Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {\n        return anyMap();\n    }\n",
                "comment": "    /**\n     * Generic friendly alias to {@link Matchers#anyMap()}.\n     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n     * <p>\n     * Any <code>Map</code> or <code>null</code>\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     *\n     * @param keyClazz Type of the map key to avoid casting\n     * @param valueClazz Type of the value to avoid casting\n     * @return empty Map.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 441,
                "end_loc": 443,
                "buggy_function": "    public static Collection anyCollection() {\n        return reportMatcher(Any.ANY).returnList();\n    }    \n",
                "fixed_function": "    public static Collection anyCollection() {\n        return reportMatcher(new InstanceOf(Collection.class)).returnList();\n    }    \n",
                "comment": "    /**\n     * Any <code>Collection</code> or <code>null</code>.\n     * <p>\n     * This method <b>*dones't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @return empty Collection.\n     */\n",
                "directly_related_tests": [
                    "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyCollection"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 460,
                "end_loc": 462,
                "buggy_function": "    public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {\n        return (Collection) reportMatcher(Any.ANY).returnList();\n    }    \n",
                "fixed_function": "    public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {\n        return anyCollection();\n    }    \n",
                "comment": "    /**\n     * Generic friendly alias to {@link Matchers#anyCollection()}.\n     * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.     \n     * <p>\n     * Any <code>Collection</code> or <code>null</code>.\n     * <p>\n     * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n     * in your code. This might however change (type checks could be added) in a\n     * future major release.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param clazz Type owned by the collection to avoid casting\n     * @return empty Collection.\n     */\n",
                "non_directly_related_tests": [
                    "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers"
                ]
            }
        ],
        "trigger_test": {
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers": {
                "path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
                "function_name": "shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers",
                "src": "    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        assertEquals(null, mock.forInteger(null));\n        assertEquals(null, mock.forCharacter(null));\n        assertEquals(null, mock.forShort(null));\n        assertEquals(null, mock.forByte(null));\n        assertEquals(null, mock.forBoolean(null));\n        assertEquals(null, mock.forLong(null));\n        assertEquals(null, mock.forFloat(null));\n        assertEquals(null, mock.forDouble(null));\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<0>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers(AnyXMatchersAcceptNullsTest.java:54)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<null> but was:<0>\n\tat org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers(AnyXMatchersAcceptNullsTest.java:54)  assertEquals(null, mock.forInteger(null));",
                "failed_line": 54
            },
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers": {
                "path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
                "function_name": "shouldNotAcceptNullInAnyXMatchers",
                "src": "    public void shouldNotAcceptNullInAnyXMatchers() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        assertEquals(null, mock.oneArg((Object) null));\n        assertEquals(null, mock.oneArg((String) null));\n        assertEquals(null, mock.forList(null));\n        assertEquals(null, mock.forMap(null));\n        assertEquals(null, mock.forCollection(null));\n        assertEquals(null, mock.forSet(null));\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<0>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldNotAcceptNullInAnyXMatchers(AnyXMatchersAcceptNullsTest.java:35)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<null> but was:<0>\n\tat org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldNotAcceptNullInAnyXMatchers(AnyXMatchersAcceptNullsTest.java:35)  assertEquals(null, mock.oneArg((Object) null));",
                "failed_line": 35
            },
            "org.mockitousage.matchers.MatchersTest::anyStringMatcher": {
                "path": "test/org/mockitousage/matchers/MatchersTest.java",
                "function_name": "anyStringMatcher",
                "src": "    public void anyStringMatcher() {\n        when(mock.oneArg(anyString())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.oneArg(\"\"));\n        assertEquals(\"matched\", mock.oneArg(\"any string\"));\n        assertEquals(null, mock.oneArg((String) null));\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat org.mockitousage.matchers.MatchersTest.anyStringMatcher(MatchersTest.java:232)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat org.mockitousage.matchers.MatchersTest.anyStringMatcher(MatchersTest.java:232)  assertEquals(null, mock.oneArg((String) null));",
                "failed_line": 232
            },
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyCollection": {
                "path": "test/org/mockitousage/matchers/NewMatchersTest.java",
                "function_name": "shouldAllowAnyCollection",
                "src": "    public void shouldAllowAnyCollection() {\n        when(mock.forCollection(anyCollection())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forCollection(Arrays.asList(\"x\", \"y\")));\n        assertEquals(null, mock.forCollection(null));\n\n        verify(mock, times(1)).forCollection(anyCollection());\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyCollection(NewMatchersTest.java:45)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyCollection(NewMatchersTest.java:45)  assertEquals(null, mock.forCollection(null));",
                "failed_line": 45
            },
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyList": {
                "path": "test/org/mockitousage/matchers/NewMatchersTest.java",
                "function_name": "shouldAllowAnyList",
                "src": "    public void shouldAllowAnyList() {\n        when(mock.forList(anyList())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forList(Arrays.asList(\"x\", \"y\")));\n        assertEquals(null, mock.forList(null));\n\n        verify(mock, times(1)).forList(anyList());\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyList(NewMatchersTest.java:35)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyList(NewMatchersTest.java:35)  assertEquals(null, mock.forList(null));",
                "failed_line": 35
            },
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyMap": {
                "path": "test/org/mockitousage/matchers/NewMatchersTest.java",
                "function_name": "shouldAllowAnyMap",
                "src": "    public void shouldAllowAnyMap() {\n        when(mock.forMap(anyMap())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forMap(new HashMap<String, String>()));\n        assertEquals(null, mock.forMap(null));\n\n        verify(mock, times(1)).forMap(anyMap());\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyMap(NewMatchersTest.java:55)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyMap(NewMatchersTest.java:55)  assertEquals(null, mock.forMap(null));",
                "failed_line": 55
            },
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnySet": {
                "path": "test/org/mockitousage/matchers/NewMatchersTest.java",
                "function_name": "shouldAllowAnySet",
                "src": "    public void shouldAllowAnySet() {\n        when(mock.forSet(anySet())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forSet(new HashSet<String>()));\n        assertEquals(null, mock.forSet(null));\n\n        verify(mock, times(1)).forSet(anySet());\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnySet(NewMatchersTest.java:65)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<null> but was:<matched>\n\tat org.mockitousage.matchers.NewMatchersTest.shouldAllowAnySet(NewMatchersTest.java:65)  assertEquals(null, mock.forSet(null));",
                "failed_line": 65
            }
        }
    },
    "Mockito_16": {
        "function_num": 4,
        "functions": [
            {
                "path": "src/org/mockito/Mockito.java",
                "start_loc": 826,
                "end_loc": 828,
                "buggy_function": "    public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n        return MOCKITO_CORE.mock(classToMock, mockSettings);\n    }\n",
                "fixed_function": "    public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n        return MOCKITO_CORE.mock(classToMock, mockSettings, true);\n    }\n",
                "comment": "    /**\n     * Creates a mock with some non-standard settings.\n     * <p>\n     * The number of configuration points for a mock grows \n     * so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods. \n     * Hence {@link MockSettings}.\n     * <pre>\n     *   Listener mock = mock(Listener.class, withSettings()\n     *     .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS));\n     *   );  \n     * </pre>\n     * <b>Use it carefully and occasionally</b>. What might be reason your test needs non-standard mocks? \n     * Is the code under test so complicated that it requires non-standard mocks? \n     * Wouldn't you prefer to refactor the code under test so it is testable in a simple way?\n     * <p>\n     * See also {@link Mockito#withSettings()}\n     * <p>\n     * See examples in javadoc for {@link Mockito} class\n     * \n     * @param classToMock class or interface to mock\n     * @param mockSettings additional mock settings\n     * @return mock object\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/org/mockito/Mockito.java",
                "start_loc": 896,
                "end_loc": 900,
                "buggy_function": "    public static <T> T spy(T object) {\n        return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                .spiedInstance(object)\n                .defaultAnswer(CALLS_REAL_METHODS)); \n    }\n",
                "fixed_function": "    public static <T> T spy(T object) {\n        return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()\n                .spiedInstance(object)\n                .defaultAnswer(CALLS_REAL_METHODS), true); \n    }\n",
                "comment": "    /**\n     * Creates a spy of the real object. The spy calls <b>real</b> methods unless they are stubbed.\n     * <p>\n     * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n     * <p>\n     * As usual you are going to read <b>the partial mock warning</b>:\n     * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n     * How does partial mock fit into this paradigm? Well, it just doesn't... \n     * Partial mock usually means that the complexity has been moved to a different method on the same object.\n     * In most cases, this is not the way you want to design your application.\n     * <p>\n     * However, there are rare cases when partial mocks come handy: \n     * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n     * <p>\n     * Example:\n     * \n     * <pre>\n     *   List list = new LinkedList();\n     *   List spy = spy(list);\n     * \n     *   //optionally, you can stub out some methods:\n     *   when(spy.size()).thenReturn(100);\n     * \n     *   //using the spy calls <b>real</b> methods\n     *   spy.add(\"one\");\n     *   spy.add(\"two\");\n     * \n     *   //prints \"one\" - the first element of a list\n     *   System.out.println(spy.get(0));\n     * \n     *   //size() method was stubbed - 100 is printed\n     *   System.out.println(spy.size());\n     * \n     *   //optionally, you can verify\n     *   verify(spy).add(\"one\");\n     *   verify(spy).add(\"two\");\n     * </pre>\n     * \n     * <h4>Important gotcha on spying real objects!</h4>\n     * \n     * 1. Sometimes it's impossible to use {@link Mockito#when(Object)} for stubbing spies. Example:\n     * \n     * <pre>\n     *   List list = new LinkedList();\n     *   List spy = spy(list);\n     *   \n     *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n     *   when(spy.get(0)).thenReturn(\"foo\");\n     *   \n     *   //You have to use doReturn() for stubbing\n     *   doReturn(\"foo\").when(spy).get(0);\n     * </pre>\n     * \n     * 2. Watch out for final methods. \n     * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n     * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n     * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n     * \n     * <p>\n     * See examples in javadoc for {@link Mockito} class\n     * \n     * @param object\n     *            to spy on\n     * @return a spy of the real object\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/org/mockito/internal/MockitoCore.java",
                "start_loc": 32,
                "end_loc": 32,
                "buggy_function": "    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) { return mock(classToMock, mockSettings); }\n",
                "fixed_function": "    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {\n        mockingProgress.validateState();\n        if (shouldResetOngoingStubbing) {\n            mockingProgress.resetOngoingStubbing();\n        }\n        return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n    }\n",
                "comment": "",
                "non_directly_related_tests": []
            },
            {
                "path": "src/org/mockito/internal/MockitoCore.java",
                "start_loc": 33,
                "end_loc": 37,
                "buggy_function": "    public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n        mockingProgress.validateState();\n            mockingProgress.resetOngoingStubbing();\n        return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n    }\n",
                "fixed_function": "    public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {\n        mockingProgress.validateState();\n        if (shouldResetOngoingStubbing) {\n            mockingProgress.resetOngoingStubbing();\n        }\n        return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);\n    }\n",
                "comment": "",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest::shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS": {
                "path": "test/org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java",
                "function_name": "shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS",
                "src": "    public void shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS() {\n        IMethods mock = mock(IMethods.class, RETURNS_MOCKS);\n        when(mock.objectReturningMethodNoArgs()).thenReturn(null);\n    }",
                "stack_trace": "org.mockito.exceptions.misusing.MissingMethodInvocationException: \nwhen() requires an argument which has to be a method call on a mock.\nFor example:\n    when(mock.getArticles()).thenReturn(articles);\n\nAlso, this error might show up because you stub final/private/equals() or hashCode() method.\nThose methods *cannot* be stubbed/verified.\n\n\tat org.mockito.exceptions.Reporter.missingMethodInvocation(Reporter.java:77)\n\tat org.mockito.internal.MockitoCore.stub(MockitoCore.java:43)\n\tat org.mockito.internal.MockitoCore.when(MockitoCore.java:56)\n\tat org.mockito.Mockito.when(Mockito.java:994)\n\tat org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest.shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS(StubbingMocksThatAreConfiguredToReturnMocksTest.java:19)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "org.mockito.exceptions.misusing.MissingMethodInvocationException: \nwhen() requires an argument which has to be a method call on a mock.\nFor example:\n    when(mock.getArticles()).thenReturn(articles);\n\nAlso, this error might show up because you stub final/private/equals() or hashCode() method.\nThose methods *cannot* be stubbed/verified.\n\n\tat org.mockito.exceptions.Reporter.missingMethodInvocation(Reporter.java:77)  throw new MissingMethodInvocationException(join(                \"when() requires an argument which has to be a method call on a mock.\",                \"For example:\",                \"    when(mock.getArticles()).thenReturn(articles);\",                \"\",                \"Also, this error might show up because you stub final/private/equals() or hashCode() method.\",                \"Those methods *cannot* be stubbed/verified.\",                \"\"        ));\n\tat org.mockito.internal.MockitoCore.stub(MockitoCore.java:43)  reporter.missingMethodInvocation();\n\tat org.mockito.internal.MockitoCore.when(MockitoCore.java:56)  return (OngoingStubbing) stub();\n\tat org.mockito.Mockito.when(Mockito.java:994)  return MOCKITO_CORE.when(methodCall);\n\tat org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest.shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS(StubbingMocksThatAreConfiguredToReturnMocksTest.java:19)  when(mock.objectReturningMethodNoArgs()).thenReturn(null);",
                "failed_line": 19
            }
        }
    },
    "Mockito_35": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 361,
                "end_loc": 363,
                "buggy_function": "    public static <T> T isA(Class<T> clazz) {\n        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();\n    }\n",
                "fixed_function": "    public static <T> T isA(Class<T> clazz) {\n        return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);\n    }\n",
                "comment": "    /**\n     * Object argument that implements the given class. \n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param <T>\n     *            the accepted type.\n     * @param clazz\n     *            the class of the accepted type.\n     * @return <code>null</code>.\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 478,
                "end_loc": 480,
                "buggy_function": "    public static <T> T eq(T value) {\n        return reportMatcher(new Equals(value)).<T>returnNull();\n    }  \n",
                "fixed_function": "    public static <T> T eq(T value) {\n        return (T) reportMatcher(new Equals(value)).<T>returnFor((Class) value.getClass());\n    }  \n",
                "comment": "    /**\n     * Object argument that is equal to the given value.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param value\n     *            the given value.\n     * @return <code>null</code>.\n     */\n",
                "directly_related_tests": [
                    "org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassedToEq"
                ]
            },
            {
                "path": "src/org/mockito/Matchers.java",
                "start_loc": 515,
                "end_loc": 517,
                "buggy_function": "    public static <T> T same(T value) {\n        return reportMatcher(new Same(value)).<T>returnNull();\n    }\n",
                "fixed_function": "    public static <T> T same(T value) {\n        return (T) reportMatcher(new Same(value)).<T>returnFor((Class) value.getClass());\n    }\n",
                "comment": "    /**\n     * Object argument that is the same as the given value.\n     * <p>\n     * See examples in javadoc for {@link Matchers} class\n     * \n     * @param <T>\n     *            the type of the object, it is passed through to prevent casts.\n     * @param value\n     *            the given value.\n     * @return <code>null</code>.\n     */\n",
                "directly_related_tests": [
                    "org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassedToSame"
                ]
            }
        ],
        "trigger_test": {
            "org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntPassed": {
                "path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
                "function_name": "shouldNotThrowNPEWhenIntPassed",
                "src": "    public void shouldNotThrowNPEWhenIntPassed() {\n        mock.intArgumentMethod(100);\n        \n        verify(mock).intArgumentMethod(isA(Integer.class));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntPassed(NPEWithCertainMatchersTest.java:38)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntPassed(NPEWithCertainMatchersTest.java:38)  verify(mock).intArgumentMethod(isA(Integer.class));",
                "failed_line": 38
            },
            "org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassed": {
                "path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
                "function_name": "shouldNotThrowNPEWhenIntegerPassed",
                "src": "    public void shouldNotThrowNPEWhenIntegerPassed() {\n        mock.intArgumentMethod(100);\n\n        verify(mock).intArgumentMethod(isA(Integer.class));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntegerPassed(NPEWithCertainMatchersTest.java:31)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntegerPassed(NPEWithCertainMatchersTest.java:31)  verify(mock).intArgumentMethod(isA(Integer.class));",
                "failed_line": 31
            },
            "org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassedToEq": {
                "path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
                "function_name": "shouldNotThrowNPEWhenIntegerPassedToEq",
                "src": "    public void shouldNotThrowNPEWhenIntegerPassedToEq() {\n        mock.intArgumentMethod(100);\n        \n        verify(mock).intArgumentMethod(eq(new Integer(100)));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntegerPassedToEq(NPEWithCertainMatchersTest.java:45)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntegerPassedToEq(NPEWithCertainMatchersTest.java:45)  verify(mock).intArgumentMethod(eq(new Integer(100)));",
                "failed_line": 45
            },
            "org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassedToSame": {
                "path": "test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java",
                "function_name": "shouldNotThrowNPEWhenIntegerPassedToSame",
                "src": "    public void shouldNotThrowNPEWhenIntegerPassedToSame() {\n        mock.intArgumentMethod(100);\n\n        verify(mock, never()).intArgumentMethod(same(new Integer(100)));\n    }",
                "stack_trace": "java.lang.NullPointerException\n\tat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntegerPassedToSame(NPEWithCertainMatchersTest.java:52)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1617)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:1039)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:2162)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:853)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:99)\n\tat org.apache.tools.ant.Task.perform(Task.java:350)\n\tat org.apache.tools.ant.Target.execute(Target.java:449)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:470)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1388)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1361)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:834)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:223)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:284)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:101)",
                "clean_error_message": "java.lang.NullPointerException\n\tat org.mockitousage.bugs.NPEWithCertainMatchersTest.shouldNotThrowNPEWhenIntegerPassedToSame(NPEWithCertainMatchersTest.java:52)  verify(mock, never()).intArgumentMethod(same(new Integer(100)));",
                "failed_line": 52
            }
        }
    },
    "Time_3": {
        "function_num": 10,
        "functions": [
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 635,
                "end_loc": 640,
                "buggy_function": "    public void add(DurationFieldType type, int amount) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n    }\n",
                "fixed_function": "    public void add(DurationFieldType type, int amount) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n        if (amount != 0) {\n            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n        }\n    }\n",
                "comment": "    /**\n     * Adds to the instant specifying the duration and multiple to add.\n     *\n     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n     * @param amount  the amount to add of this duration\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the result exceeds the capacity of the instant\n     */\n",
                "directly_related_tests": [
                    "org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero"
                ]
            },
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 659,
                "end_loc": 661,
                "buggy_function": "    public void addYears(final int years) {\n            setMillis(getChronology().years().add(getMillis(), years));\n    }\n",
                "fixed_function": "    public void addYears(final int years) {\n        if (years != 0) {\n            setMillis(getChronology().years().add(getMillis(), years));\n        }\n    }\n",
                "comment": "    /**\n     * Add a number of years to the date.\n     *\n     * @param years  the years to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n",
                "directly_related_tests": [
                    "org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero"
                ]
            },
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 680,
                "end_loc": 682,
                "buggy_function": "    public void addWeekyears(final int weekyears) {\n            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n    }\n",
                "fixed_function": "    public void addWeekyears(final int weekyears) {\n        if (weekyears != 0) {\n            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n        }\n    }\n",
                "comment": "    /**\n     * Add a number of weekyears to the date.\n     *\n     * @param weekyears  the weekyears to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 701,
                "end_loc": 703,
                "buggy_function": "    public void addMonths(final int months) {\n            setMillis(getChronology().months().add(getMillis(), months));\n    }\n",
                "fixed_function": "    public void addMonths(final int months) {\n        if (months != 0) {\n            setMillis(getChronology().months().add(getMillis(), months));\n        }\n    }\n",
                "comment": "    /**\n     * Add a number of months to the date.\n     *\n     * @param months  the months to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n",
                "directly_related_tests": [
                    "org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero"
                ]
            },
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 722,
                "end_loc": 724,
                "buggy_function": "    public void addWeeks(final int weeks) {\n            setMillis(getChronology().weeks().add(getMillis(), weeks));\n    }\n",
                "fixed_function": "    public void addWeeks(final int weeks) {\n        if (weeks != 0) {\n            setMillis(getChronology().weeks().add(getMillis(), weeks));\n        }\n    }\n",
                "comment": "    /**\n     * Add a number of weeks to the date.\n     *\n     * @param weeks  the weeks to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n",
                "directly_related_tests": [
                    "org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero"
                ]
            },
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 763,
                "end_loc": 765,
                "buggy_function": "    public void addDays(final int days) {\n            setMillis(getChronology().days().add(getMillis(), days));\n    }\n",
                "fixed_function": "    public void addDays(final int days) {\n        if (days != 0) {\n            setMillis(getChronology().days().add(getMillis(), days));\n        }\n    }\n",
                "comment": "    /**\n     * Add a number of days to the date.\n     *\n     * @param days  the days to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n",
                "directly_related_tests": [
                    "org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero"
                ]
            },
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 784,
                "end_loc": 786,
                "buggy_function": "    public void addHours(final int hours) {\n            setMillis(getChronology().hours().add(getMillis(), hours));\n    }\n",
                "fixed_function": "    public void addHours(final int hours) {\n        if (hours != 0) {\n            setMillis(getChronology().hours().add(getMillis(), hours));\n        }\n    }\n",
                "comment": "    /**\n     * Add a number of hours to the date.\n     *\n     * @param hours  the hours to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 815,
                "end_loc": 817,
                "buggy_function": "    public void addMinutes(final int minutes) {\n            setMillis(getChronology().minutes().add(getMillis(), minutes));\n    }\n",
                "fixed_function": "    public void addMinutes(final int minutes) {\n        if (minutes != 0) {\n            setMillis(getChronology().minutes().add(getMillis(), minutes));\n        }\n    }\n",
                "comment": "    /**\n     * Add a number of minutes to the date.\n     *\n     * @param minutes  the minutes to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 846,
                "end_loc": 848,
                "buggy_function": "    public void addSeconds(final int seconds) {\n            setMillis(getChronology().seconds().add(getMillis(), seconds));\n    }\n",
                "fixed_function": "    public void addSeconds(final int seconds) {\n        if (seconds != 0) {\n            setMillis(getChronology().seconds().add(getMillis(), seconds));\n        }\n    }\n",
                "comment": "    /**\n     * Add a number of seconds to the date.\n     *\n     * @param seconds  the seconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/joda/time/MutableDateTime.java",
                "start_loc": 879,
                "end_loc": 881,
                "buggy_function": "    public void addMillis(final int millis) {\n            setMillis(getChronology().millis().add(getMillis(), millis));\n    }\n",
                "fixed_function": "    public void addMillis(final int millis) {\n        if (millis != 0) {\n            setMillis(getChronology().millis().add(getMillis(), millis));\n        }\n    }\n",
                "comment": "    /**\n     * Add a number of milliseconds to the date. The implementation of this\n     * method differs from the {@link #add(long)} method in that a\n     * DateTimeField performs the addition.\n     *\n     * @param millis  the milliseconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            }
        ],
        "trigger_test": {
            "org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero": {
                "path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
                "function_name": "testAddYears_int_dstOverlapWinter_addZero",
                "src": "    public void testAddYears_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addYears(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.joda.time.TestMutableDateTime_Adds.testAddYears_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:227)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat org.joda.time.TestMutableDateTime_Adds.testAddYears_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:227)  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
                "failed_line": 227
            },
            "org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero": {
                "path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
                "function_name": "testAddDays_int_dstOverlapWinter_addZero",
                "src": "    public void testAddDays_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addDays(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:271)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:271)  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
                "failed_line": 271
            },
            "org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero": {
                "path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
                "function_name": "testAddWeeks_int_dstOverlapWinter_addZero",
                "src": "    public void testAddWeeks_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addWeeks(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:300)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:300)  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
                "failed_line": 300
            },
            "org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero": {
                "path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
                "function_name": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero",
                "src": "    public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.add(DurationFieldType.years(), 0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:187)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:187)  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
                "failed_line": 187
            },
            "org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero": {
                "path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
                "function_name": "testAddMonths_int_dstOverlapWinter_addZero",
                "src": "    public void testAddMonths_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addMonths(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.joda.time.TestMutableDateTime_Adds.testAddMonths_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:249)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>\n\tat org.joda.time.TestMutableDateTime_Adds.testAddMonths_int_dstOverlapWinter_addZero(TestMutableDateTime_Adds.java:249)  assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());",
                "failed_line": 249
            }
        }
    },
    "Time_6": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/main/java/org/joda/time/chrono/GJChronology.java",
                "start_loc": 185,
                "end_loc": 230,
                "buggy_function": "    public static synchronized GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover,\n            int minDaysInFirstWeek) {\n        \n        zone = DateTimeUtils.getZone(zone);\n        Instant cutoverInstant;\n        if (gregorianCutover == null) {\n            cutoverInstant = DEFAULT_CUTOVER;\n        } else {\n            cutoverInstant = gregorianCutover.toInstant();\n        }\n\n        GJChronology chrono;\n        synchronized (cCache) {\n            ArrayList<GJChronology> chronos = cCache.get(zone);\n            if (chronos == null) {\n                chronos = new ArrayList<GJChronology>(2);\n                cCache.put(zone, chronos);\n            } else {\n                for (int i = chronos.size(); --i >= 0;) {\n                    chrono = chronos.get(i);\n                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n                        cutoverInstant.equals(chrono.getGregorianCutover())) {\n                        \n                        return chrono;\n                    }\n                }\n            }\n            if (zone == DateTimeZone.UTC) {\n                chrono = new GJChronology\n                    (JulianChronology.getInstance(zone, minDaysInFirstWeek),\n                     GregorianChronology.getInstance(zone, minDaysInFirstWeek),\n                     cutoverInstant);\n            } else {\n                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n                chrono = new GJChronology\n                    (ZonedChronology.getInstance(chrono, zone),\n                     chrono.iJulianChronology,\n                     chrono.iGregorianChronology,\n                     chrono.iCutoverInstant);\n            }\n            chronos.add(chrono);\n        }\n        return chrono;\n    }\n",
                "fixed_function": "    public static synchronized GJChronology getInstance(\n            DateTimeZone zone,\n            ReadableInstant gregorianCutover,\n            int minDaysInFirstWeek) {\n        \n        zone = DateTimeUtils.getZone(zone);\n        Instant cutoverInstant;\n        if (gregorianCutover == null) {\n            cutoverInstant = DEFAULT_CUTOVER;\n        } else {\n            cutoverInstant = gregorianCutover.toInstant();\n            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));\n            if (cutoverDate.getYear() <= 0) {\n                throw new IllegalArgumentException(\"Cutover too early. Must be on or after 0001-01-01.\");\n            }\n        }\n\n        GJChronology chrono;\n        synchronized (cCache) {\n            ArrayList<GJChronology> chronos = cCache.get(zone);\n            if (chronos == null) {\n                chronos = new ArrayList<GJChronology>(2);\n                cCache.put(zone, chronos);\n            } else {\n                for (int i = chronos.size(); --i >= 0;) {\n                    chrono = chronos.get(i);\n                    if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&\n                        cutoverInstant.equals(chrono.getGregorianCutover())) {\n                        \n                        return chrono;\n                    }\n                }\n            }\n            if (zone == DateTimeZone.UTC) {\n                chrono = new GJChronology\n                    (JulianChronology.getInstance(zone, minDaysInFirstWeek),\n                     GregorianChronology.getInstance(zone, minDaysInFirstWeek),\n                     cutoverInstant);\n            } else {\n                chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n                chrono = new GJChronology\n                    (ZonedChronology.getInstance(chrono, zone),\n                     chrono.iJulianChronology,\n                     chrono.iGregorianChronology,\n                     chrono.iCutoverInstant);\n            }\n            chronos.add(chrono);\n        }\n        return chrono;\n    }\n",
                "comment": "    /**\n     * Factory method returns instances of the GJ cutover chronology. Any\n     * cutover date may be specified.\n     *\n     * @param zone  the time zone to use, null is default\n     * @param gregorianCutover  the cutover to use, null means default\n     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n     */\n",
                "directly_related_tests": [
                    "org.joda.time.chrono.TestGJDate::test_cutoverPreZero"
                ]
            },
            {
                "path": "src/main/java/org/joda/time/chrono/GJChronology.java",
                "start_loc": 973,
                "end_loc": 993,
                "buggy_function": "        public long add(long instant, int value) {\n            if (instant >= iCutover) {\n                instant = iGregorianField.add(instant, value);\n                if (instant < iCutover) {\n                    // Only adjust if gap fully crossed.\n                    if (instant + iGapDuration < iCutover) {\n                        instant = gregorianToJulian(instant);\n                    }\n                }\n            } else {\n                instant = iJulianField.add(instant, value);\n                if (instant >= iCutover) {\n                    // Only adjust if gap fully crossed.\n                    if (instant - iGapDuration >= iCutover) {\n                        // no special handling for year zero as cutover always after year zero\n                        instant = julianToGregorian(instant);\n                    }\n                }\n            }\n            return instant;\n        }\n",
                "fixed_function": "        public long add(long instant, int value) {\n            if (instant >= iCutover) {\n                instant = iGregorianField.add(instant, value);\n                if (instant < iCutover) {\n                    // Only adjust if gap fully crossed.\n                    if (instant + iGapDuration < iCutover) {\n                        if (iConvertByWeekyear) {\n                            int wyear = iGregorianChronology.weekyear().get(instant);\n                            if (wyear <= 0) {\n                                instant = iGregorianChronology.weekyear().add(instant, -1);\n                            }\n                        } else {\n                            int year = iGregorianChronology.year().get(instant);\n                            if (year <= 0) {\n                                instant = iGregorianChronology.year().add(instant, -1);\n                            }\n                        }\n                        instant = gregorianToJulian(instant);\n                    }\n                }\n            } else {\n                instant = iJulianField.add(instant, value);\n                if (instant >= iCutover) {\n                    // Only adjust if gap fully crossed.\n                    if (instant - iGapDuration >= iCutover) {\n                        // no special handling for year zero as cutover always after year zero\n                        instant = julianToGregorian(instant);\n                    }\n                }\n            }\n            return instant;\n        }\n",
                "comment": "",
                "non_directly_related_tests": []
            },
            {
                "path": "src/main/java/org/joda/time/chrono/GJChronology.java",
                "start_loc": 995,
                "end_loc": 1015,
                "buggy_function": "        public long add(long instant, long value) {\n            if (instant >= iCutover) {\n                instant = iGregorianField.add(instant, value);\n                if (instant < iCutover) {\n                    // Only adjust if gap fully crossed.\n                    if (instant + iGapDuration < iCutover) {\n                        instant = gregorianToJulian(instant);\n                    }\n                }\n            } else {\n                instant = iJulianField.add(instant, value);\n                if (instant >= iCutover) {\n                    // Only adjust if gap fully crossed.\n                    if (instant - iGapDuration >= iCutover) {\n                        // no special handling for year zero as cutover always after year zero\n                        instant = julianToGregorian(instant);\n                    }\n                }\n            }\n            return instant;\n        }\n",
                "fixed_function": "        public long add(long instant, long value) {\n            if (instant >= iCutover) {\n                instant = iGregorianField.add(instant, value);\n                if (instant < iCutover) {\n                    // Only adjust if gap fully crossed.\n                    if (instant + iGapDuration < iCutover) {\n                        if (iConvertByWeekyear) {\n                            int wyear = iGregorianChronology.weekyear().get(instant);\n                            if (wyear <= 0) {\n                                instant = iGregorianChronology.weekyear().add(instant, -1);\n                            }\n                        } else {\n                            int year = iGregorianChronology.year().get(instant);\n                            if (year <= 0) {\n                                instant = iGregorianChronology.year().add(instant, -1);\n                            }\n                        }\n                        instant = gregorianToJulian(instant);\n                    }\n                }\n            } else {\n                instant = iJulianField.add(instant, value);\n                if (instant >= iCutover) {\n                    // Only adjust if gap fully crossed.\n                    if (instant - iGapDuration >= iCutover) {\n                        // no special handling for year zero as cutover always after year zero\n                        instant = julianToGregorian(instant);\n                    }\n                }\n            }\n            return instant;\n        }\n",
                "comment": "",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.joda.time.chrono.TestGJDate::test_cutoverPreZero": {
                "path": "src/test/java/org/joda/time/chrono/TestGJDate.java",
                "function_name": "test_cutoverPreZero",
                "src": "    public void test_cutoverPreZero() {\n        DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);\n        try {\n            GJChronology.getInstance(DateTimeZone.UTC, cutover);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.fail(Assert.java:64)\n\tat junit.framework.TestCase.fail(TestCase.java:235)\n\tat org.joda.time.chrono.TestGJDate.test_cutoverPreZero(TestGJDate.java:132)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.joda.time.chrono.TestGJDate.test_cutoverPreZero(TestGJDate.java:132)  fail();",
                "failed_line": 132
            },
            "org.joda.time.chrono.TestGJDate::test_plusWeekyears_positiveToNegative_crossCutover": {
                "path": "src/test/java/org/joda/time/chrono/TestGJDate.java",
                "function_name": "test_plusWeekyears_positiveToNegative_crossCutover",
                "src": "    public void test_plusWeekyears_positiveToNegative_crossCutover() {\n        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());\n        assertEquals(expected, date.weekyear().addToCopy(-2004));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-06-30> but was:<-0001-06-28>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToNegative_crossCutover(TestGJDate.java:124)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<-0002-06-30> but was:<-0001-06-28>\n\tat org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToNegative_crossCutover(TestGJDate.java:124)  assertEquals(expected, date.weekyear().addToCopy(-2004));",
                "failed_line": 124
            },
            "org.joda.time.chrono.TestGJDate::test_plusYears_positiveToZero_crossCutover": {
                "path": "src/test/java/org/joda/time/chrono/TestGJDate.java",
                "function_name": "test_plusYears_positiveToZero_crossCutover",
                "src": "    public void test_plusYears_positiveToZero_crossCutover() {\n        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);\n        assertEquals(expected, date.plusYears(-2003));\n    }",
                "stack_trace": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\n\tat org.joda.time.chrono.JulianChronology.adjustYearForSet(JulianChronology.java:81)\n\tat org.joda.time.chrono.JulianChronology.getDateMidnightMillis(JulianChronology.java:207)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:159)\n\tat org.joda.time.chrono.JulianChronology.getDateTimeMillis(JulianChronology.java:50)\n\tat org.joda.time.chrono.GJChronology.convertByYear(GJChronology.java:85)\n\tat org.joda.time.chrono.GJChronology.gregorianToJulianByYear(GJChronology.java:588)\n\tat org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(GJChronology.java:924)\n\tat org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(GJChronology.java:979)\n\tat org.joda.time.chrono.GJChronology$LinkedDurationField.add(GJChronology.java:1099)\n\tat org.joda.time.LocalDate.plusYears(LocalDate.java:1205)\n\tat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover(TestGJDate.java:99)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\n\tat org.joda.time.chrono.JulianChronology.adjustYearForSet(JulianChronology.java:81)  (DateTimeFieldType.year(), Integer.valueOf(year), null, null);\n\tat org.joda.time.chrono.JulianChronology.getDateMidnightMillis(JulianChronology.java:207)  return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:159)  return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n\tat org.joda.time.chrono.JulianChronology.getDateTimeMillis(JulianChronology.java:50)  public final class JulianChronology extends BasicGJChronology {    /** Serialization lock */    private static final long serialVersionUID = -8731039522547897247L;    private static final long MILLIS_PER_YEAR =        (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);    private static final long MILLIS_PER_MONTH =        (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);    /** The lowest year that can be fully supported. */    private static final int MIN_YEAR = -292269054;    /** The highest year that can be fully supported. */    private static final int MAX_YEAR = 292272992;    /** Singleton instance of a UTC JulianChronology */    private static final JulianChronology INSTANCE_UTC;    /** Cache of zone to chronology arrays */    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();    static {        INSTANCE_UTC = getInstance(DateTimeZone.UTC);    }    static int adjustYearForSet(int year) {        if (year <= 0) {            if (year == 0) {                throw new IllegalFieldValueException                    (DateTimeFieldType.year(), Integer.valueOf(year), null, null);            }            year++;        }        return year;    }    /**     * Gets an instance of the JulianChronology.     * The time zone of the returned instance is UTC.     *     * @return a singleton UTC instance of the chronology     */    public static JulianChronology getInstanceUTC() {        return INSTANCE_UTC;    }    /**     * Gets an instance of the JulianChronology in the default time zone.     *     * @return a chronology in the default time zone     */    public static JulianChronology getInstance() {        return getInstance(DateTimeZone.getDefault(), 4);    }    /**     * Gets an instance of the JulianChronology in the given time zone.     *     * @param zone  the time zone to get the chronology in, null is default     * @return a chronology in the specified time zone     */    public static JulianChronology getInstance(DateTimeZone zone) {        return getInstance(zone, 4);    }    /**     * Gets an instance of the JulianChronology in the given time zone.     *     * @param zone  the time zone to get the chronology in, null is default     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4     * @return a chronology in the specified time zone     */    public static JulianChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {        if (zone == null) {            zone = DateTimeZone.getDefault();        }        JulianChronology chrono;        synchronized (cCache) {            JulianChronology[] chronos = cCache.get(zone);            if (chronos == null) {                chronos = new JulianChronology[7];                cCache.put(zone, chronos);            }            try {                chrono = chronos[minDaysInFirstWeek - 1];            } catch (ArrayIndexOutOfBoundsException e) {                throw new IllegalArgumentException                    (\"Invalid min days in first week: \" + minDaysInFirstWeek);            }            if (chrono == null) {                if (zone == DateTimeZone.UTC) {                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);                } else {                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);                    chrono = new JulianChronology                        (ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);                }                chronos[minDaysInFirstWeek - 1] = chrono;            }        }        return chrono;    }    // Constructors and instance variables    //-----------------------------------------------------------------------    /**     * Restricted constructor     */    JulianChronology(Chronology base, Object param, int minDaysInFirstWeek) {        super(base, param, minDaysInFirstWeek);    }    /**     * Serialization singleton     */    private Object readResolve() {        Chronology base = getBase();        int minDays = getMinimumDaysInFirstWeek();        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology        return base == null ?                getInstance(DateTimeZone.UTC, minDays) :                    getInstance(base.getZone(), minDays);    }    // Conversion    //-----------------------------------------------------------------------    /**     * Gets the Chronology in the UTC time zone.     *     * @return the chronology in UTC     */    public Chronology withUTC() {        return INSTANCE_UTC;    }    /**     * Gets the Chronology in a specific time zone.     *     * @param zone  the zone to get the chronology in, null is default     * @return the chronology     */    public Chronology withZone(DateTimeZone zone) {        if (zone == null) {            zone = DateTimeZone.getDefault();        }        if (zone == getZone()) {            return this;        }        return getInstance(zone);    }    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)        throws IllegalArgumentException    {        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);    }    boolean isLeapYear(int year) {        return (year & 3) == 0;    }    long calculateFirstDayOfYearMillis(int year) {        // Java epoch is 1970-01-01 Gregorian which is 1969-12-19 Julian.        // Calculate relative to the nearest leap year and account for the        // difference later.        int relativeYear = year - 1968;        int leapYears;        if (relativeYear <= 0) {            // Add 3 before shifting right since /4 and >>2 behave differently            // on negative numbers.            leapYears = (relativeYear + 3) >> 2;        } else {            leapYears = relativeYear >> 2;            // For post 1968 an adjustment is needed as jan1st is before leap day            if (!isLeapYear(year)) {                leapYears++;            }        }        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;        // Adjust to account for difference between 1968-01-01 and 1969-12-19.        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;    }    int getMinYear() {        return MIN_YEAR;    }    int getMaxYear() {        return MAX_YEAR;    }    long getAverageMillisPerYear() {        return MILLIS_PER_YEAR;    }    long getAverageMillisPerYearDividedByTwo() {        return MILLIS_PER_YEAR / 2;    }    long getAverageMillisPerMonth() {        return MILLIS_PER_MONTH;    }    long getApproxMillisAtEpochDividedByTwo() {        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;    }    protected void assemble(Fields fields) {        if (getBase() == null) {            super.assemble(fields);            // Julian chronology has no year zero.            fields.year = new SkipDateTimeField(this, fields.year);            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);        }    }}\n\tat org.joda.time.chrono.GJChronology.convertByYear(GJChronology.java:85)  (from.year().get(instant),             from.monthOfYear().get(instant),             from.dayOfMonth().get(instant),             from.millisOfDay().get(instant));\n\tat org.joda.time.chrono.GJChronology.gregorianToJulianByYear(GJChronology.java:588)  return convertByYear(instant, iGregorianChronology, iJulianChronology);\n\tat org.joda.time.LocalDate.plusYears(LocalDate.java:1205)  long instant = getChronology().years().add(getLocalMillis(), years);\n\tat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToZero_crossCutover(TestGJDate.java:99)  assertEquals(expected, date.plusYears(-2003));",
                "failed_line": 99
            },
            "org.joda.time.chrono.TestGJDate::test_plusYears_positiveToNegative_crossCutover": {
                "path": "src/test/java/org/joda/time/chrono/TestGJDate.java",
                "function_name": "test_plusYears_positiveToNegative_crossCutover",
                "src": "    public void test_plusYears_positiveToNegative_crossCutover() {\n        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);\n        assertEquals(expected, date.plusYears(-2004));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-06-30> but was:<-0001-06-30>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToNegative_crossCutover(TestGJDate.java:105)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<-0002-06-30> but was:<-0001-06-30>\n\tat org.joda.time.chrono.TestGJDate.test_plusYears_positiveToNegative_crossCutover(TestGJDate.java:105)  assertEquals(expected, date.plusYears(-2004));",
                "failed_line": 105
            },
            "org.joda.time.chrono.TestGJDate::test_plusWeekyears_positiveToZero_crossCutover": {
                "path": "src/test/java/org/joda/time/chrono/TestGJDate.java",
                "function_name": "test_plusWeekyears_positiveToZero_crossCutover",
                "src": "    public void test_plusWeekyears_positiveToZero_crossCutover() {\n        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);\n        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());\n        assertEquals(expected, date.weekyear().addToCopy(-2003));\n    }",
                "stack_trace": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\n\tat org.joda.time.field.SkipDateTimeField.set(SkipDateTimeField.java:92)\n\tat org.joda.time.chrono.GJChronology.convertByWeekyear(GJChronology.java:96)\n\tat org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(GJChronology.java:596)\n\tat org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian(GJChronology.java:922)\n\tat org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(GJChronology.java:979)\n\tat org.joda.time.LocalDate$Property.addToCopy(LocalDate.java:1965)\n\tat org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToZero_crossCutover(TestGJDate.java:118)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "org.joda.time.IllegalFieldValueException: Value 0 for year is not supported\n\tat org.joda.time.field.SkipDateTimeField.set(SkipDateTimeField.java:92)  (DateTimeFieldType.year(), Integer.valueOf(value), null, null);\n\tat org.joda.time.chrono.GJChronology.convertByWeekyear(GJChronology.java:96)  newInstant = to.weekyear().set(0, from.weekyear().get(instant));\n\tat org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear(GJChronology.java:596)  return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);\n\tat org.joda.time.chrono.TestGJDate.test_plusWeekyears_positiveToZero_crossCutover(TestGJDate.java:118)  assertEquals(expected, date.weekyear().addToCopy(-2003));",
                "failed_line": 118
            }
        }
    },
    "Time_12": {
        "function_num": 4,
        "functions": [
            {
                "path": "src/main/java/org/joda/time/LocalDate.java",
                "start_loc": 206,
                "end_loc": 216,
                "buggy_function": "    public static LocalDate fromCalendarFields(Calendar calendar) {\n        if (calendar == null) {\n            throw new IllegalArgumentException(\"The calendar must not be null\");\n        }\n        int yearOfEra = calendar.get(Calendar.YEAR);\n        return new LocalDate(\n            yearOfEra,\n            calendar.get(Calendar.MONTH) + 1,\n            calendar.get(Calendar.DAY_OF_MONTH)\n        );\n    }\n",
                "fixed_function": "    public static LocalDate fromCalendarFields(Calendar calendar) {\n        if (calendar == null) {\n            throw new IllegalArgumentException(\"The calendar must not be null\");\n        }\n        int era = calendar.get(Calendar.ERA);\n        int yearOfEra = calendar.get(Calendar.YEAR);\n        return new LocalDate(\n            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n            calendar.get(Calendar.MONTH) + 1,\n            calendar.get(Calendar.DAY_OF_MONTH)\n        );\n    }\n",
                "comment": "    //-----------------------------------------------------------------------\n    /**\n     * Constructs a LocalDate from a <code>java.util.Calendar</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Calendar and assigned to the LocalDate.\n     * This is useful if you have been using the Calendar as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method ignores the type of the calendar and always\n     * creates a LocalDate with ISO chronology. It is expected that you\n     * will only pass in instances of <code>GregorianCalendar</code> however\n     * this is not validated.\n     *\n     * @param calendar  the Calendar to extract fields from, not null\n     * @return the created local date, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n",
                "directly_related_tests": [
                    "org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero1",
                    "org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero3"
                ]
            },
            {
                "path": "src/main/java/org/joda/time/LocalDate.java",
                "start_loc": 238,
                "end_loc": 249,
                "buggy_function": "    @SuppressWarnings(\"deprecation\")\n    public static LocalDate fromDateFields(Date date) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n            // handle years in era BC\n        return new LocalDate(\n            date.getYear() + 1900,\n            date.getMonth() + 1,\n            date.getDate()\n        );\n    }\n",
                "fixed_function": "    @SuppressWarnings(\"deprecation\")\n    public static LocalDate fromDateFields(Date date) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        if (date.getTime() < 0) {\n            // handle years in era BC\n            GregorianCalendar cal = new GregorianCalendar();\n            cal.setTime(date);\n            return fromCalendarFields(cal);\n        }\n        return new LocalDate(\n            date.getYear() + 1900,\n            date.getMonth() + 1,\n            date.getDate()\n        );\n    }\n",
                "comment": "    /**\n     * Constructs a LocalDate from a <code>java.util.Date</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Date and assigned to the LocalDate.\n     * This is useful if you have been using the Date as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method always creates a LocalDate with ISO chronology.\n     *\n     * @param date  the Date to extract fields from, not null\n     * @return the created local date, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n",
                "non_directly_related_tests": []
            },
            {
                "path": "src/main/java/org/joda/time/LocalDateTime.java",
                "start_loc": 195,
                "end_loc": 209,
                "buggy_function": "    public static LocalDateTime fromCalendarFields(Calendar calendar) {\n        if (calendar == null) {\n            throw new IllegalArgumentException(\"The calendar must not be null\");\n        }\n        int yearOfEra = calendar.get(Calendar.YEAR);\n        return new LocalDateTime(\n            yearOfEra,\n            calendar.get(Calendar.MONTH) + 1,\n            calendar.get(Calendar.DAY_OF_MONTH),\n            calendar.get(Calendar.HOUR_OF_DAY),\n            calendar.get(Calendar.MINUTE),\n            calendar.get(Calendar.SECOND),\n            calendar.get(Calendar.MILLISECOND)\n        );\n    }\n",
                "fixed_function": "    public static LocalDateTime fromCalendarFields(Calendar calendar) {\n        if (calendar == null) {\n            throw new IllegalArgumentException(\"The calendar must not be null\");\n        }\n        int era = calendar.get(Calendar.ERA);\n        int yearOfEra = calendar.get(Calendar.YEAR);\n        return new LocalDateTime(\n            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n            calendar.get(Calendar.MONTH) + 1,\n            calendar.get(Calendar.DAY_OF_MONTH),\n            calendar.get(Calendar.HOUR_OF_DAY),\n            calendar.get(Calendar.MINUTE),\n            calendar.get(Calendar.SECOND),\n            calendar.get(Calendar.MILLISECOND)\n        );\n    }\n",
                "comment": "    //-----------------------------------------------------------------------\n    /**\n     * Constructs a LocalDateTime from a <code>java.util.Calendar</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Calendar and assigned to the LocalDateTime.\n     * This is useful if you have been using the Calendar as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method ignores the type of the calendar and always\n     * creates a LocalDateTime with ISO chronology. It is expected that you\n     * will only pass in instances of <code>GregorianCalendar</code> however\n     * this is not validated.\n     *\n     * @param calendar  the Calendar to extract fields from, not null\n     * @return the created local date-time, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n",
                "directly_related_tests": [
                    "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero1",
                    "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero3"
                ]
            },
            {
                "path": "src/main/java/org/joda/time/LocalDateTime.java",
                "start_loc": 231,
                "end_loc": 246,
                "buggy_function": "    @SuppressWarnings(\"deprecation\")\n    public static LocalDateTime fromDateFields(Date date) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n            // handle years in era BC\n        return new LocalDateTime(\n            date.getYear() + 1900,\n            date.getMonth() + 1,\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            (((int) (date.getTime() % 1000)) + 1000) % 1000\n        );\n    }\n",
                "fixed_function": "    @SuppressWarnings(\"deprecation\")\n    public static LocalDateTime fromDateFields(Date date) {\n        if (date == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        if (date.getTime() < 0) {\n            // handle years in era BC\n            GregorianCalendar cal = new GregorianCalendar();\n            cal.setTime(date);\n            return fromCalendarFields(cal);\n        }\n        return new LocalDateTime(\n            date.getYear() + 1900,\n            date.getMonth() + 1,\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            (((int) (date.getTime() % 1000)) + 1000) % 1000\n        );\n    }\n",
                "comment": "    /**\n     * Constructs a LocalDateTime from a <code>java.util.Date</code>\n     * using exactly the same field values.\n     * <p>\n     * Each field is queried from the Date and assigned to the LocalDateTime.\n     * This is useful if you have been using the Date as a local date,\n     * ignoring the zone.\n     * <p>\n     * One advantage of this method is that this method is unaffected if the\n     * version of the time zone data differs between the JDK and Joda-Time.\n     * That is because the local field values are transferred, calculated using\n     * the JDK time zone data and without using the Joda-Time time zone data.\n     * <p>\n     * This factory method always creates a LocalDateTime with ISO chronology.\n     *\n     * @param date  the Date to extract fields from, not null\n     * @return the created local date-time, not null\n     * @throws IllegalArgumentException if the calendar is null\n     * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n     */\n",
                "non_directly_related_tests": []
            }
        ],
        "trigger_test": {
            "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromDateFields_beforeYearZero1": {
                "path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
                "function_name": "testFactory_fromDateFields_beforeYearZero1",
                "src": "    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1(TestLocalDateTime_Constructors.java:155)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>\n\tat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1(TestLocalDateTime_Constructors.java:155)  assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));",
                "failed_line": 155
            },
            "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromDateFields_beforeYearZero3": {
                "path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
                "function_name": "testFactory_fromDateFields_beforeYearZero3",
                "src": "    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-02-03T04:05:06.007> but was:<0003-02-03T04:05:06.007>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero3(TestLocalDateTime_Constructors.java:163)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<-0002-02-03T04:05:06.007> but was:<0003-02-03T04:05:06.007>\n\tat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero3(TestLocalDateTime_Constructors.java:163)  assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));",
                "failed_line": 163
            },
            "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero1": {
                "path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
                "function_name": "testFactory_fromCalendarFields_beforeYearZero1",
                "src": "    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero1(TestLocalDateTime_Constructors.java:117)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>\n\tat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero1(TestLocalDateTime_Constructors.java:117)  assertEquals(expected, LocalDateTime.fromCalendarFields(cal));",
                "failed_line": 117
            },
            "org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero3": {
                "path": "src/test/java/org/joda/time/TestLocalDateTime_Constructors.java",
                "function_name": "testFactory_fromCalendarFields_beforeYearZero3",
                "src": "    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-02-03T04:05:06.007> but was:<0003-02-03T04:05:06.007>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero3(TestLocalDateTime_Constructors.java:125)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<-0002-02-03T04:05:06.007> but was:<0003-02-03T04:05:06.007>\n\tat org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero3(TestLocalDateTime_Constructors.java:125)  assertEquals(expected, LocalDateTime.fromCalendarFields(cal));",
                "failed_line": 125
            },
            "org.joda.time.TestLocalDate_Constructors::testFactory_fromDateFields_beforeYearZero1": {
                "path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
                "function_name": "testFactory_fromDateFields_beforeYearZero1",
                "src": "    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(0, 2, 3);\n        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero1(TestLocalDate_Constructors.java:147)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>\n\tat org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero1(TestLocalDate_Constructors.java:147)  assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));",
                "failed_line": 147
            },
            "org.joda.time.TestLocalDate_Constructors::testFactory_fromDateFields_beforeYearZero3": {
                "path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
                "function_name": "testFactory_fromDateFields_beforeYearZero3",
                "src": "    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(-2, 2, 3);\n        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-02-03> but was:<0003-02-03>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero3(TestLocalDate_Constructors.java:155)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<-0002-02-03> but was:<0003-02-03>\n\tat org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero3(TestLocalDate_Constructors.java:155)  assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));",
                "failed_line": 155
            },
            "org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero1": {
                "path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
                "function_name": "testFactory_fromCalendarFields_beforeYearZero1",
                "src": "    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(0, 2, 3);\n        assertEquals(expected, LocalDate.fromCalendarFields(cal));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero1(TestLocalDate_Constructors.java:109)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>\n\tat org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero1(TestLocalDate_Constructors.java:109)  assertEquals(expected, LocalDate.fromCalendarFields(cal));",
                "failed_line": 109
            },
            "org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero3": {
                "path": "src/test/java/org/joda/time/TestLocalDate_Constructors.java",
                "function_name": "testFactory_fromCalendarFields_beforeYearZero3",
                "src": "    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n        cal.set(Calendar.ERA, GregorianCalendar.BC);\n        cal.set(Calendar.MILLISECOND, 7);\n        LocalDate expected = new LocalDate(-2, 2, 3);\n        assertEquals(expected, LocalDate.fromCalendarFields(cal));\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<-0002-02-03> but was:<0003-02-03>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero3(TestLocalDate_Constructors.java:117)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<-0002-02-03> but was:<0003-02-03>\n\tat org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero3(TestLocalDate_Constructors.java:117)  assertEquals(expected, LocalDate.fromCalendarFields(cal));",
                "failed_line": 117
            }
        }
    },
    "Time_13": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
                "start_loc": 1088,
                "end_loc": 1118,
                "buggy_function": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n            long valueLong = getFieldValue(period);\n            if (valueLong == Long.MAX_VALUE) {\n                return 0;\n            }\n\n            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\n            if (iFieldType >= SECONDS_MILLIS) {\n                // valueLong contains the seconds and millis fields\n                // the minimum output is 0.000, which is 4 or 5 digits with a negative\n                sum = Math.max(sum, 4);\n                // plus one for the decimal point\n                sum++;\n                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n                        (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {\n                    sum -= 4; // remove three digits and decimal point\n                }\n                // reset valueLong to refer to the seconds part for the prefic/suffix calculation\n                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\n            }\n            int value = (int) valueLong;\n\n            if (iPrefix != null) {\n                sum += iPrefix.calculatePrintedLength(value);\n            }\n            if (iSuffix != null) {\n                sum += iSuffix.calculatePrintedLength(value);\n            }\n\n            return sum;\n        }\n",
                "fixed_function": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n            long valueLong = getFieldValue(period);\n            if (valueLong == Long.MAX_VALUE) {\n                return 0;\n            }\n\n            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\n            if (iFieldType >= SECONDS_MILLIS) {\n                // valueLong contains the seconds and millis fields\n                // the minimum output is 0.000, which is 4 or 5 digits with a negative\n                sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4));\n                // plus one for the decimal point\n                sum++;\n                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n                        (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {\n                    sum -= 4; // remove three digits and decimal point\n                }\n                // reset valueLong to refer to the seconds part for the prefic/suffix calculation\n                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\n            }\n            int value = (int) valueLong;\n\n            if (iPrefix != null) {\n                sum += iPrefix.calculatePrintedLength(value);\n            }\n            if (iSuffix != null) {\n                sum += iSuffix.calculatePrintedLength(value);\n            }\n\n            return sum;\n        }\n",
                "comment": "",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
                "start_loc": 1120,
                "end_loc": 1149,
                "buggy_function": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n            long valueLong = getFieldValue(period);\n            if (valueLong == Long.MAX_VALUE) {\n                return;\n            }\n            int value = (int) valueLong;\n            if (iFieldType >= SECONDS_MILLIS) {\n                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\n            }\n\n            if (iPrefix != null) {\n                iPrefix.printTo(buf, value);\n            }\n            int minDigits = iMinPrintedDigits;\n            if (minDigits <= 1) {\n                FormatUtils.appendUnpaddedInteger(buf, value);\n            } else {\n                FormatUtils.appendPaddedInteger(buf, value, minDigits);\n            }\n            if (iFieldType >= SECONDS_MILLIS) {\n                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n                if (iFieldType == SECONDS_MILLIS || dp > 0) {\n                    buf.append('.');\n                    FormatUtils.appendPaddedInteger(buf, dp, 3);\n                }\n            }\n            if (iSuffix != null) {\n                iSuffix.printTo(buf, value);\n            }\n        }\n",
                "fixed_function": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n            long valueLong = getFieldValue(period);\n            if (valueLong == Long.MAX_VALUE) {\n                return;\n            }\n            int value = (int) valueLong;\n            if (iFieldType >= SECONDS_MILLIS) {\n                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\n            }\n\n            if (iPrefix != null) {\n                iPrefix.printTo(buf, value);\n            }\n            int bufLen = buf.length();\n            int minDigits = iMinPrintedDigits;\n            if (minDigits <= 1) {\n                FormatUtils.appendUnpaddedInteger(buf, value);\n            } else {\n                FormatUtils.appendPaddedInteger(buf, value, minDigits);\n            }\n            if (iFieldType >= SECONDS_MILLIS) {\n                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n                if (iFieldType == SECONDS_MILLIS || dp > 0) {\n                    if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) {\n                        buf.insert(bufLen, '-');\n                    }\n                    buf.append('.');\n                    FormatUtils.appendPaddedInteger(buf, dp, 3);\n                }\n            }\n            if (iSuffix != null) {\n                iSuffix.printTo(buf, value);\n            }\n        }\n",
                "comment": "",
                "directly_related_tests": [
                    "org.joda.time.format.TestISOPeriodFormat::testFormatStandard_negative"
                ]
            }
        ],
        "trigger_test": {
            "org.joda.time.format.TestISOPeriodFormat::testFormatStandard_negative": {
                "path": "src/test/java/org/joda/time/format/TestISOPeriodFormat.java",
                "function_name": "testFormatStandard_negative",
                "src": "    public void testFormatStandard_negative() {\n        Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\n        assertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.years(-54);\n        assertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(4).withMillis(-8);\n        assertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-4).withMillis(8);\n        assertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-23);\n        assertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.millis(-8);\n        assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n    }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<PT[-]0.008S> but was:<PT[]0.008S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative(TestISOPeriodFormat.java:135)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<PT[-]0.008S> but was:<PT[]0.008S>\n\tat org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative(TestISOPeriodFormat.java:135)  assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));",
                "failed_line": 135
            }
        }
    },
    "Closure_34": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/CodeGenerator.java",
                "start_loc": 85,
                "end_loc": 732,
                "buggy_function": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p + 1, rhsContext);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        add(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        add(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().isObjectLit()) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isString());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
                "fixed_function": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        add(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        add(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().isObjectLit()) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isString());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }\n",
                "comment": "",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.CodePrinterTest::testManyAdds"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/CodeGenerator.java",
                "start_loc": 741,
                "end_loc": 757,
                "buggy_function": "  private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence) {\n    Node firstNonOperator = n.getFirstChild();\n    while (firstNonOperator.getType() == op) {\n      firstNonOperator = firstNonOperator.getFirstChild();\n    }\n\n    addExpr(firstNonOperator, leftPrecedence, context);\n\n    Node current = firstNonOperator;\n    do {\n      current = current.getParent();\n      cc.listSeparator();\n      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n    } while (current != n);\n  }\n",
                "fixed_function": "  private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence) {\n    Node firstNonOperator = n.getFirstChild();\n    while (firstNonOperator.getType() == op) {\n      firstNonOperator = firstNonOperator.getFirstChild();\n    }\n\n    addExpr(firstNonOperator, leftPrecedence, context);\n\n    Node current = firstNonOperator;\n    do {\n      current = current.getParent();\n      cc.addOp(opStr, true);\n      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n    } while (current != n);\n  }\n",
                "comment": "  /**\n   * We could use addList recursively here, but sometimes we produce\n   * very deeply nested operators and run out of stack space, so we\n   * just unroll the recursion when possible.\n   *\n   * We assume nodes are left-recursive.\n   */\n",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.CodePrinterTest::testManyAdds"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/CodePrinter.java",
                "start_loc": 331,
                "end_loc": 342,
                "buggy_function": "     \n    void appendOp(String op, boolean binOp) {\n      if (binOp) {\n        if (getLastChar() != ' ') {\n          append(\" \");\n        }\n        append(op);\n        append(\" \");\n      } else {\n        append(op);\n      }\n    }\n",
                "fixed_function": "     \n    void appendOp(String op, boolean binOp) {\n      if (binOp) {\n        if (getLastChar() != ' ' && op.charAt(0) != ',') {\n          append(\" \");\n        }\n        append(op);\n        append(\" \");\n      } else {\n        append(op);\n      }\n    }\n",
                "comment": "",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.CodePrinterTest::testManyAdds"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.CodePrinterTest::testManyAdds": {
                "path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
                "function_name": "testManyAdds",
                "src": "  public void testManyAdds() {\n    int numAdds = 10000;\n    List<String> numbers = Lists.newArrayList(\"0\", \"1\");\n    Node current = new Node(Token.ADD, Node.newNumber(0), Node.newNumber(1));\n    for (int i = 2; i < numAdds; i++) {\n      current = new Node(Token.ADD, current);\n\n      // 1000 is printed as 1E3, and screws up our test.\n      int num = i % 1000;\n      numbers.add(String.valueOf(num));\n      current.addChildToBack(Node.newNumber(num));\n    }\n\n    String expected = Joiner.on(\"+\").join(numbers);\n    String actual = printNode(current).replace(\"\\n\", \"\");\n    assertEquals(expected, actual);\n  }",
                "stack_trace": "java.lang.StackOverflowError\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:102)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)",
                "clean_error_message": "java.lang.StackOverflowError\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:102)  int p = NodeUtil.precedence(type);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);\n\tat com.google.javascript.jscomp.CodeGenerator.add(CodeGenerator.java:122)  addExpr(first, p, context);\n\tat com.google.javascript.jscomp.CodeGenerator.addExpr(CodeGenerator.java:891)  add(n, context);"
            }
        }
    },
    "Closure_37": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/NodeTraversal.java",
                "start_loc": 510,
                "end_loc": 545,
                "buggy_function": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.isFunction());\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.isBlock());\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
                "fixed_function": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.isFunction());\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.isBlock(), body);\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
                "comment": "  /**\n   * Traverses a function.\n   */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
                "start_loc": 609,
                "end_loc": 673,
                "buggy_function": "     \n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n\n          // Return the bare minimum to put the AST in a valid state.\n          return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n        }\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        maybeSetLengthFrom(newName, name);\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.PARAM_LIST);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n        // When in ideMode Rhino tries to parse some constructs the compiler\n        // doesn't support, repair it here. see Rhino's\n        // Parser#parseFunctionBodyExpr.\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
                "fixed_function": "     \n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n\n          // Return the bare minimum to put the AST in a valid state.\n          return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n        }\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        maybeSetLengthFrom(newName, name);\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.PARAM_LIST);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      if (!bodyNode.isBlock()) {\n        // When in ideMode Rhino tries to parse some constructs the compiler\n        // doesn't support, repair it here. see Rhino's\n        // Parser#parseFunctionBodyExpr.\n        Preconditions.checkState(config.isIdeMode);\n        bodyNode = IR.block();\n      }\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.IntegrationTest::testIncompleteFunction"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.IntegrationTest::testIncompleteFunction": {
                "path": "test/com/google/javascript/jscomp/IntegrationTest.java",
                "function_name": "testIncompleteFunction",
                "src": "  public void testIncompleteFunction() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"var foo = {bar: function(e) }\" },\n        new String[] { \"var foo = {bar: function(e){}};\" },\n        warnings\n    );\n  }",
                "stack_trace": "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n\tat com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:642)\n\tat com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:587)\n\tat com.google.javascript.jscomp.Compiler.compile(Compiler.java:569)\n\tat com.google.javascript.jscomp.Compiler.compileModules(Compiler.java:560)\n\tat com.google.javascript.jscomp.Compiler.compile(Compiler.java:542)\n\tat com.google.javascript.jscomp.IntegrationTest.compile(IntegrationTest.java:2080)\n\tat com.google.javascript.jscomp.IntegrationTest.test(IntegrationTest.java:2041)\n\tat com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction(IntegrationTest.java:1945)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\nCaused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:129)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:540)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:489)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.PrepareAst.process(PrepareAst.java:70)\n\tat com.google.javascript.jscomp.Compiler.prepareAst(Compiler.java:1835)\n\tat com.google.javascript.jscomp.JsAst.parse(JsAst.java:99)\n\tat com.google.javascript.jscomp.JsAst.getAstRoot(JsAst.java:52)\n\tat com.google.javascript.jscomp.CompilerInput.getAstRoot(CompilerInput.java:119)\n\tat com.google.javascript.jscomp.Compiler.parseInputs(Compiler.java:1302)\n\tat com.google.javascript.jscomp.Compiler.parse(Compiler.java:696)\n\tat com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:650)\n\tat com.google.javascript.jscomp.Compiler.access$000(Compiler.java:71)\n\tat com.google.javascript.jscomp.Compiler$1.call(Compiler.java:572)\n\tat com.google.javascript.jscomp.Compiler$1.call(Compiler.java:569)\n\tat com.google.javascript.jscomp.Compiler$2.run(Compiler.java:614)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.IllegalStateException\n\t... 23 more",
                "clean_error_message": "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n\tat com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:642)  throw new RuntimeException(exception[0]);\n\tat com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:587)  return runCallable(callable, useThreads, options.tracer.isOn());\n\tat com.google.javascript.jscomp.Compiler.compile(Compiler.java:569)  return runInCompilerThread(new Callable<Result>() {             public Result call() throws Exception {        compileInternal();        return getResult();      }    });\n\tat com.google.javascript.jscomp.Compiler.compileModules(Compiler.java:560)  return compile();\n\tat com.google.javascript.jscomp.Compiler.compile(Compiler.java:542)  return compileModules(Lists.<JSSourceFile>newArrayList(externs),        Lists.<JSModule>newArrayList(modules),        options);\n\tat com.google.javascript.jscomp.IntegrationTest.compile(IntegrationTest.java:2080)  compiler.compile(        externs, CompilerTestCase.createModuleChain(original), options);\n\tat com.google.javascript.jscomp.IntegrationTest.test(IntegrationTest.java:2041)  Compiler compiler = compile(options, original);\n\tat com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction(IntegrationTest.java:1945)  test(options,        new String[] { \"var foo = {bar: function(e) }\" },        new String[] { \"var foo = {bar: function(e){}};\" },        warnings    );\nCaused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:540)  Preconditions.checkState(body.getNext() == null &&            body.isBlock());\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:489)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:497)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.PrepareAst.process(PrepareAst.java:70)  NodeTraversal.traverse(            compiler, root, new PrepareAnnotations(compiler));\n\tat com.google.javascript.jscomp.Compiler.prepareAst(Compiler.java:1835)  pass.process(null, root);\n\tat com.google.javascript.jscomp.JsAst.parse(JsAst.java:99)  compiler.prepareAst(root);\n\tat com.google.javascript.jscomp.JsAst.getAstRoot(JsAst.java:52)  parse(compiler);\n\tat com.google.javascript.jscomp.CompilerInput.getAstRoot(CompilerInput.java:119)  Node root = ast.getAstRoot(compiler);\n\tat com.google.javascript.jscomp.Compiler.parseInputs(Compiler.java:1302)  Node n = input.getAstRoot(this);\n\tat com.google.javascript.jscomp.Compiler.parse(Compiler.java:696)  parseInputs();\n\tat com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:650)  parse();\n\tat com.google.javascript.jscomp.Compiler.access$000(Compiler.java:71)  public class Compiler extends AbstractCompiler {  static final String SINGLETON_MODULE_NAME = \"[singleton]\";  static final DiagnosticType MODULE_DEPENDENCY_ERROR =      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",          \"Bad dependency: {0} -> {1}. \"              + \"Modules must be listed in dependency order.\");  static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(      \"JSC_MISSING_ENTRY_ERROR\",      \"required entry point \\\"{0}\\\" never provided\");  CompilerOptions options = null;  private PassConfig passes = null;  // The externs inputs  private List<CompilerInput> externs;  // The JS source modules  private List<JSModule> modules;  // The graph of the JS source modules. Must be null if there are less than  // 2 modules, because we use this as a signal for which passes to run.  private JSModuleGraph moduleGraph;  // The JS source inputs  private List<CompilerInput> inputs;  // error manager to which error management is delegated  private ErrorManager errorManager;  // Warnings guard for filtering warnings.  private WarningsGuard warningsGuard;  // Parse tree root nodes  Node externsRoot;  Node jsRoot;  Node externAndJsRoot;  private Map<InputId, CompilerInput> inputsById;  /** The source code map */  private SourceMap sourceMap;  /** The externs created from the exports.  */  private String externExports = null;  /**   * Ids for function inlining so that each declared name remains   * unique.   */  private int uniqueNameId = 0;  /** Whether to use threads. */  private boolean useThreads = true;  /**   * Whether to assume there are references to the RegExp Global object   * properties.   */  private boolean hasRegExpGlobalReferences = true;  /** The function information map */  private FunctionInformationMap functionInformationMap;  /** Debugging information */  private final StringBuilder debugLog = new StringBuilder();  /** Detects Google-specific coding conventions. */  CodingConvention defaultCodingConvention = new ClosureCodingConvention();  private JSTypeRegistry typeRegistry;  private Config parserConfig = null;  private ReverseAbstractInterpreter abstractInterpreter;  private TypeValidator typeValidator;  public PerformanceTracker tracker;  // The oldErrorReporter exists so we can get errors from the JSTypeRegistry.  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =      RhinoErrorReporter.forOldRhino(this);  // This error reporter gets the messages from the current Rhino parser.  private final ErrorReporter defaultErrorReporter =      RhinoErrorReporter.forNewRhino(this);  /** Error strings used for reporting JSErrors */  public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(      \"JSC_OPTIMIZE_LOOP_ERROR\",      \"Exceeded max number of optimization iterations: {0}\");  public static final DiagnosticType MOTION_ITERATIONS_ERROR =      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",          \"Exceeded max number of code motion iterations: {0}\");  private static final long COMPILER_STACK_SIZE = 1048576L;  /**   * Logger for the whole com.google.javascript.jscomp domain -   * setting configuration for this logger affects all loggers   *  in other classes within the compiler.   */  private static final Logger logger =      Logger.getLogger(\"com.google.javascript.jscomp\");  private final PrintStream outStream;  private GlobalVarReferenceMap globalRefMap = null;  private volatile double progress = 0.0;  /**   * Creates a Compiler that reports errors and warnings to its logger.   */  public Compiler() {    this((PrintStream) null);  }  /**   * Creates n Compiler that reports errors and warnings to an output   * stream.   */  public Compiler(PrintStream stream) {    addChangeHandler(recentChange);    outStream = stream;  }  /**   * Creates a Compiler that uses a custom error manager.   */  public Compiler(ErrorManager errorManager) {    this();    setErrorManager(errorManager);  }  /**   * Sets the error manager.   *   * @param errorManager the error manager, it cannot be {@code null}   */  public void setErrorManager(ErrorManager errorManager) {    Preconditions.checkNotNull(        errorManager, \"the error manager cannot be null\");    this.errorManager = errorManager;  }  /**   * Creates a message formatter instance corresponding to the value of   * {@link CompilerOptions}.   */  private MessageFormatter createMessageFormatter() {    boolean colorize = options.shouldColorizeErrorOutput();    return options.errorFormat.toFormatter(this, colorize);  }  /**   * Initialize the compiler options. Only necessary if you're not doing   * a normal compile() job.   */  public void initOptions(CompilerOptions options) {    this.options = options;    if (errorManager == null) {      if (outStream == null) {        setErrorManager(            new LoggerErrorManager(createMessageFormatter(), logger));      } else {        PrintStreamErrorManager printer =            new PrintStreamErrorManager(createMessageFormatter(), outStream);        printer.setSummaryDetailLevel(options.summaryDetailLevel);        setErrorManager(printer);      }    }    // DiagnosticGroups override the plain checkTypes option.    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {      options.checkTypes = true;    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {      options.checkTypes = false;    } else if (!options.checkTypes) {      // If DiagnosticGroups did not override the plain checkTypes      // option, and checkTypes is enabled, then turn off the      // parser type warnings.      options.setWarningLevel(          DiagnosticGroup.forType(              RhinoErrorReporter.TYPE_PARSE_ERROR),          CheckLevel.OFF);    }    if (options.checkGlobalThisLevel.isOn() &&        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {      options.setWarningLevel(          DiagnosticGroups.GLOBAL_THIS,          options.checkGlobalThisLevel);    }    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {      options.setWarningLevel(          DiagnosticGroups.ES5_STRICT,          CheckLevel.ERROR);    }    // Initialize the warnings guard.    List<WarningsGuard> guards = Lists.newArrayList();    guards.add(        new SuppressDocWarningsGuard(            getDiagnosticGroups().getRegisteredGroups()));    guards.add(options.getWarningsGuard());    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);    // All passes must run the variable check. This synthesizes    // variables later so that the compiler doesn't crash. It also    // checks the externs file for validity. If you don't want to warn    // about missing variable declarations, we shut that specific    // error off.    if (!options.checkSymbols &&        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));    }    this.warningsGuard = composedGuards;  }  /**   * Initializes the instance state needed for a compile job.   */  public void init(JSSourceFile[] externs, JSSourceFile[] inputs,      CompilerOptions options) {    init(Lists.<JSSourceFile>newArrayList(externs),        Lists.<JSSourceFile>newArrayList(inputs), options);  }  /**   * Initializes the instance state needed for a compile job.   */  public void init(List<JSSourceFile> externs, List<JSSourceFile> inputs,      CompilerOptions options) {    JSModule module = new JSModule(SINGLETON_MODULE_NAME);    for (JSSourceFile input : inputs) {      module.add(input);    }    initModules(externs, Lists.newArrayList(module), options);  }  /**   * Initializes the instance state needed for a compile job if the sources   * are in modules.   */  public void init(JSSourceFile[] externs, JSModule[] modules,      CompilerOptions options) {    initModules(Lists.<JSSourceFile>newArrayList(externs),         Lists.<JSModule>newArrayList(modules), options);  }  /**   * Initializes the instance state needed for a compile job if the sources   * are in modules.   */  public void initModules(      List<JSSourceFile> externs, List<JSModule> modules,      CompilerOptions options) {    initOptions(options);    checkFirstModule(modules);    fillEmptyModules(modules);    this.externs = makeCompilerInput(externs, true);    // Generate the module graph, and report any errors in the module    // specification as errors.    this.modules = modules;    if (modules.size() > 1) {      try {        this.moduleGraph = new JSModuleGraph(modules);      } catch (JSModuleGraph.ModuleDependenceException e) {        // problems with the module format.  Report as an error.  The        // message gives all details.        report(JSError.make(MODULE_DEPENDENCY_ERROR,                e.getModule().getName(), e.getDependentModule().getName()));        return;      }    } else {      this.moduleGraph = null;    }    this.inputs = getAllInputsFromModules(modules);    initBasedOnOptions();    initInputsByIdMap();  }  /**   * Do any initialization that is dependent on the compiler options.   */  private void initBasedOnOptions() {    // Create the source map if necessary.    if (options.sourceMapOutputPath != null) {      sourceMap = options.sourceMapFormat.getInstance();      sourceMap.setPrefixMappings(options.sourceMapLocationMappings);    }  }  private List<CompilerInput> makeCompilerInput(      List<JSSourceFile> files, boolean isExtern) {    List<CompilerInput> inputs = Lists.newArrayList();    for (JSSourceFile file : files) {      inputs.add(new CompilerInput(file, isExtern));    }    return inputs;  }  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",          \"At least one module must be provided\");  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",          \"Root module '{0}' must contain at least one source code input\");  /**   * Verifies that at least one module has been provided and that the first one   * has at least one source code input.   */  private void checkFirstModule(List<JSModule> modules) {    if (modules.isEmpty()) {      report(JSError.make(EMPTY_MODULE_LIST_ERROR));    } else if (modules.get(0).getInputs().isEmpty() && modules.size() > 1) {      // The root module may only be empty if there is exactly 1 module.      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,          modules.get(0).getName()));    }  }  /**   * Empty modules get an empty \"fill\" file, so that we can move code into   * an empty module.   */  static String createFillFileName(String moduleName) {    return \"[\" + moduleName + \"]\";  }  /**   * Fill any empty modules with a place holder file. It makes any cross module   * motion easier.   */  private static void fillEmptyModules(List<JSModule> modules) {    for (JSModule module : modules) {      if (module.getInputs().isEmpty()) {        module.add(JSSourceFile.fromCode(            createFillFileName(module.getName()), \"\"));      }    }  }  /**   * Rebuilds the internal list of inputs by iterating over all modules.   * This is necessary if inputs have been added to or removed from a module   * after the {@link #init(JSSourceFile[], JSModule[], CompilerOptions)} call.   */  public void rebuildInputsFromModules() {    inputs = getAllInputsFromModules(modules);    initInputsByIdMap();  }  /**   * Builds a single list of all module inputs. Verifies that it contains no   * duplicates.   */  private static List<CompilerInput> getAllInputsFromModules(      List<JSModule> modules) {    List<CompilerInput> inputs = Lists.newArrayList();    Map<String, JSModule> inputMap = Maps.newHashMap();    for (JSModule module : modules) {      for (CompilerInput input : module.getInputs()) {        String inputName = input.getName();        // NOTE(nicksantos): If an input is in more than one module,        // it will show up twice in the inputs list, and then we        // will get an error down the line.        inputs.add(input);        inputMap.put(inputName, module);      }    }    return inputs;  }  static final DiagnosticType DUPLICATE_INPUT =      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");  static final DiagnosticType DUPLICATE_EXTERN_INPUT =      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",          \"Duplicate extern input: {0}\");  /**   * Creates a map to make looking up an input by name fast. Also checks for   * duplicate inputs.   */  void initInputsByIdMap() {    inputsById = new HashMap<InputId, CompilerInput>();    for (CompilerInput input : externs) {      InputId id = input.getInputId();      CompilerInput previous = inputsById.put(id, input);      if (previous != null) {        report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));      }    }    for (CompilerInput input : inputs) {      InputId id = input.getInputId();      CompilerInput previous = inputsById.put(id, input);      if (previous != null) {        report(JSError.make(DUPLICATE_INPUT, input.getName()));      }    }  }  public Result compile(      JSSourceFile extern, JSSourceFile input, CompilerOptions options) {     return compile(extern, new JSSourceFile[] { input }, options);  }  public Result compile(      JSSourceFile extern, JSSourceFile[] input, CompilerOptions options) {     return compile(new JSSourceFile[] { extern }, input, options);  }  public Result compile(      JSSourceFile extern, JSModule[] modules, CompilerOptions options) {     return compile(new JSSourceFile[] { extern }, modules, options);  }  /**   * Compiles a list of inputs.   */  public Result compile(JSSourceFile[] externs,                        JSSourceFile[] inputs,                        CompilerOptions options) {    return compile(Lists.<JSSourceFile>newArrayList(externs),        Lists.<JSSourceFile>newArrayList(inputs),        options);  }  /**   * Compiles a list of inputs.   */  public Result compile(List<JSSourceFile> externs,      List<JSSourceFile> inputs, CompilerOptions options) {    // The compile method should only be called once.    Preconditions.checkState(jsRoot == null);    try {      init(externs, inputs, options);      if (hasErrors()) {        return getResult();      }      return compile();    } finally {      Tracer t = newTracer(\"generateReport\");      errorManager.generateReport();      stopTracer(t, \"generateReport\");    }  }  /**   * Compiles a list of modules.   */  public Result compile(JSSourceFile[] externs,                        JSModule[] modules,                        CompilerOptions options) {    return compileModules(Lists.<JSSourceFile>newArrayList(externs),        Lists.<JSModule>newArrayList(modules),        options);  }  /**   * Compiles a list of modules.   */  public Result compileModules(List<JSSourceFile> externs,      List<JSModule> modules, CompilerOptions options) {    // The compile method should only be called once.    Preconditions.checkState(jsRoot == null);    try {      initModules(externs, modules, options);      if (hasErrors()) {        return getResult();      }      return compile();    } finally {      Tracer t = newTracer(\"generateReport\");      errorManager.generateReport();      stopTracer(t, \"generateReport\");    }  }  private Result compile() {    return runInCompilerThread(new Callable<Result>() {             public Result call() throws Exception {        compileInternal();        return getResult();      }    });  }  /**   * Disable threads. This is for clients that run on AppEngine and   * don't have threads.   */  public void disableThreads() {    useThreads = false;  }  private <T> T runInCompilerThread(final Callable<T> callable) {    return runCallable(callable, useThreads, options.tracer.isOn());  }  static <T> T runCallableWithLargeStack(final Callable<T> callable) {    return runCallable(callable, true, false);  }  @SuppressWarnings(\"unchecked\")  static <T> T runCallable(      final Callable<T> callable, boolean useLargeStackThread, boolean trace) {    // Under JRE 1.6, the jscompiler overflows the stack when running on some    // large or complex js code. Here we start a new thread with a larger    // stack in order to let the compiler do its thing, without having to    // increase the stack size for *every* thread (which is what -Xss does).    // Might want to add thread pool support for clients that compile a lot.    final boolean dumpTraceReport = trace;    final Object[] result = new Object[1];    final Throwable[] exception = new Throwable[1];    Runnable runnable = new Runnable() {             public void run() {        try {          if (dumpTraceReport) {            Tracer.initCurrentThreadTrace();          }          result[0] = callable.call();        } catch (Throwable e) {          exception[0] = e;        } finally {          if (dumpTraceReport) {            Tracer.logAndClearCurrentThreadTrace();          }        }      }    };    if (useLargeStackThread) {      Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);      th.start();      while (true) {        try {          th.join();          break;        } catch (InterruptedException ignore) {          // ignore        }      }    } else {      runnable.run();    }    // Pass on any exception caught by the runnable object.    if (exception[0] != null) {      throw new RuntimeException(exception[0]);    }    return (T) result[0];  }  private void compileInternal() {    setProgress(0.0);    parse();    // 15 percent of the work is assumed to be for parsing (based on some    // minimal analysis on big JS projects, of course this depends on options)    setProgress(0.15);    if (hasErrors()) {      return;    }    if (!precheck()) {      return;    }    if (options.nameAnonymousFunctionsOnly) {      // TODO(nicksantos): Move this into an instrument() phase maybe?      check();      return;    }    if (!options.skipAllPasses) {      check();      if (hasErrors()) {        return;      }      if (options.isExternExportsEnabled()          || options.externExportsPath != null) {        externExports();      }      // IDE-mode is defined to stop here, before the heavy rewriting begins.      if (!options.ideMode) {        optimize();      }    }    if (options.recordFunctionInformation) {      recordFunctionInformation();    }    if (options.devMode == DevMode.START_AND_END) {      runSanityCheck();    }    setProgress(1.0);  }  public void parse() {    parseInputs();  }  PassConfig getPassConfig() {    if (passes == null) {      passes = createPassConfigInternal();    }    return passes;  }  /**   * Create the passes object. Clients should use setPassConfig instead of   * overriding this.   */  PassConfig createPassConfigInternal() {    return new DefaultPassConfig(options);  }  /**   * @param passes The PassConfig to use with this Compiler.   * @throws NullPointerException if passes is null   * @throws IllegalStateException if this.passes has already been assigned   */  public void setPassConfig(PassConfig passes) {    // Important to check for null because if setPassConfig(null) is    // called before this.passes is set, getPassConfig() will create a    // new PassConfig object and use that, which is probably not what    // the client wanted since he or she probably meant to use their    // own PassConfig object.    Preconditions.checkNotNull(passes);    if (this.passes != null) {      throw new IllegalStateException(\"this.passes has already been assigned\");    }    this.passes = passes;  }  /**   * Carry out any special checks or procedures that need to be done before   * proceeding with rest of the compilation process.   *   * @return true, to continue with compilation   */  boolean precheck() {    return true;  }  public void check() {    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);    // We are currently only interested in check-passes for progress reporting    // as it is used for IDEs, that's why the maximum progress is set to 1.0.    PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker,        new PhaseOptimizer.ProgressRange(getProgress(), 1.0));    if (options.devMode == DevMode.EVERY_PASS) {      phaseOptimizer.setSanityCheck(sanityCheck);    }    phaseOptimizer.consume(getPassConfig().getChecks());    phaseOptimizer.process(externsRoot, jsRoot);    if (hasErrors()) {      return;    }    // TODO(nicksantos): clean this up. The flow here is too hard to follow.    if (options.nameAnonymousFunctionsOnly) {      return;    }    if (options.removeTryCatchFinally) {      removeTryCatchFinally();    }    if (options.getTweakProcessing().shouldStrip() ||        !options.stripTypes.isEmpty() ||        !options.stripNameSuffixes.isEmpty() ||        !options.stripTypePrefixes.isEmpty() ||        !options.stripNamePrefixes.isEmpty()) {      stripCode(options.stripTypes, options.stripNameSuffixes,          options.stripTypePrefixes, options.stripNamePrefixes);    }    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);  }  private void externExports() {    logger.fine(\"Creating extern file for exports\");    startPass(\"externExports\");    ExternExportsPass pass = new ExternExportsPass(this);    process(pass);    externExports = pass.getGeneratedExterns();    endPass();  }     void process(CompilerPass p) {    p.process(externsRoot, jsRoot);  }  private final PassFactory sanityCheck =      new PassFactory(\"sanityCheck\", false) {         protected CompilerPass createInternal(AbstractCompiler compiler) {      return new SanityCheck(compiler);    }  };  private void maybeSanityCheck() {    if (options.devMode == DevMode.EVERY_PASS) {      runSanityCheck();    }  }  private void runSanityCheck() {    sanityCheck.create(this).process(externsRoot, jsRoot);  }  /**   * Removes try/catch/finally statements for easier debugging.   */  void removeTryCatchFinally() {    logger.fine(\"Remove try/catch/finally\");    startPass(\"removeTryCatchFinally\");    RemoveTryCatch r = new RemoveTryCatch(this);    process(r);    endPass();  }  /**   * Strips code for smaller compiled code. This is useful for removing debug   * statements to prevent leaking them publicly.   */  void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,      Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {    logger.fine(\"Strip code\");    startPass(\"stripCode\");    StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,        stripTypePrefixes, stripNamePrefixes);    if (options.getTweakProcessing().shouldStrip()) {      r.enableTweakStripping();    }    process(r);    endPass();  }  /**   * Runs custom passes that are designated to run at a particular time.   */  private void runCustomPasses(CustomPassExecutionTime executionTime) {    if (options.customPasses != null) {      Tracer t = newTracer(\"runCustomPasses\");      try {        for (CompilerPass p : options.customPasses.get(executionTime)) {          process(p);        }      } finally {        stopTracer(t, \"runCustomPasses\");      }    }  }  private Tracer currentTracer = null;  private String currentPassName = null;  /**   * Marks the beginning of a pass.   */  void startPass(String passName) {    Preconditions.checkState(currentTracer == null);    currentPassName = passName;    currentTracer = newTracer(passName);  }  /**   * Marks the end of a pass.   */  void endPass() {    Preconditions.checkState(currentTracer != null,        \"Tracer should not be null at the end of a pass.\");    stopTracer(currentTracer, currentPassName);    String passToCheck = currentPassName;    currentPassName = null;    currentTracer = null;    maybeSanityCheck();  }  /**   * Returns a new tracer for the given pass name.   */  Tracer newTracer(String passName) {    String comment = passName        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");    if (options.tracer.isOn()) {      tracker.recordPassStart(passName);    }    return new Tracer(\"Compiler\", comment);  }  void stopTracer(Tracer t, String passName) {    long result = t.stop();    if (options.tracer.isOn()) {      tracker.recordPassStop(passName, result);    }  }  /**   * Returns the result of the compilation.   */  public Result getResult() {    PassConfig.State state = getPassConfig().getIntermediateState();    return new Result(getErrors(), getWarnings(), debugLog.toString(),        state.variableMap, state.propertyMap,        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,        sourceMap, externExports, state.cssNames, state.idGeneratorMap);  }  /**   * Returns an array constructed from errors + temporary warnings.   */  public JSError[] getMessages() {    return getErrors();  }  /**   * Returns the array of errors (never null).   */  public JSError[] getErrors() {    return errorManager.getErrors();  }  /**   * Returns the array of warnings (never null).   */  public JSError[] getWarnings() {    return errorManager.getWarnings();  }     public Node getRoot() {    return externAndJsRoot;  }  /**   * Creates a new id for making unique names.   */  private int nextUniqueNameId() {    return uniqueNameId++;  }  /**   * Resets the unique name id counter   */  @VisibleForTesting  void resetUniqueNameId() {    uniqueNameId = 0;  }     Supplier<String> getUniqueNameIdSupplier() {    final Compiler self = this;    return new Supplier<String>() {             public String get() {        return String.valueOf(self.nextUniqueNameId());      }    };  }     boolean areNodesEqualForInlining(Node n1, Node n2) {    if (options.ambiguateProperties ||        options.disambiguateProperties) {      // The type based optimizations require that type information is preserved      // during other optimizations.      return n1.isEquivalentToTyped(n2);    } else {      return n1.isEquivalentTo(n2);    }  }  //------------------------------------------------------------------------  // Inputs  //------------------------------------------------------------------------  // TODO(nicksantos): Decide which parts of these belong in an AbstractCompiler  // interface, and which ones should always be injected.     public CompilerInput getInput(InputId id) {    return inputsById.get(id);  }  /**   * Removes an input file from AST.   * @param id The id of the input to be removed.   */  protected void removeExternInput(InputId id) {    CompilerInput input = getInput(id);    if (input == null) {      return;    }    Preconditions.checkState(input.isExtern(), \"Not an extern input: %s\", input.getName());    inputsById.remove(id);    externs.remove(input);    Node root = input.getAstRoot(this);    if (root != null) {      root.detachFromParent();    }  }     public CompilerInput newExternInput(String name) {    SourceAst ast = new SyntheticAst(name);    if (inputsById.containsKey(ast.getInputId())) {      throw new IllegalArgumentException(\"Conflicting externs name: \" + name);    }    CompilerInput input = new CompilerInput(ast, true);    inputsById.put(input.getInputId(), input);    externsRoot.addChildToFront(ast.getAstRoot(this));    externs.add(0, input);    return input;  }  /** Add a source input dynamically. Intended for incremental compilation. */  void addIncrementalSourceAst(JsAst ast) {    InputId id = ast.getInputId();    Preconditions.checkState(getInput(id) == null, \"Duplicate input %s\", id.getIdName());    inputsById.put(id, new CompilerInput(ast));  }  /**   * Replace a source input dynamically. Intended for incremental   * re-compilation.   *   * If the new source input doesn't parse, then keep the old input   * in the AST and return false.   *   * @return Whether the new AST was attached successfully.   */  boolean replaceIncrementalSourceAst(JsAst ast) {    CompilerInput oldInput = getInput(ast.getInputId());    Preconditions.checkNotNull(oldInput, \"No input to replace: %s\", ast.getInputId().getIdName());    Node newRoot = ast.getAstRoot(this);    if (newRoot == null) {      return false;    }    Node oldRoot = oldInput.getAstRoot(this);    if (oldRoot != null) {      oldRoot.getParent().replaceChild(oldRoot, newRoot);    } else {      getRoot().getLastChild().addChildToBack(newRoot);    }    CompilerInput newInput = new CompilerInput(ast);    inputsById.put(ast.getInputId(), newInput);    JSModule module = oldInput.getModule();    if (module != null) {      module.addAfter(newInput, oldInput);      module.remove(oldInput);    }    // Verify the input id is set properly.    Preconditions.checkState(        newInput.getInputId().equals(oldInput.getInputId()));    InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();    Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));    inputs.remove(oldInput);    return true;  }  /**   * Add a new source input dynamically. Intended for incremental compilation.   * <p>   * If the new source input doesn't parse, it will not be added, and a false   * will be returned.   *   * @param ast the JS Source to add.   * @return true if the source was added successfully, false otherwise.   * @throws IllegalStateException if an input for this ast already exists.   */  boolean addNewSourceAst(JsAst ast) {    CompilerInput oldInput = getInput(ast.getInputId());    if (oldInput != null) {      throw new IllegalStateException(          \"Input already exists: \" + ast.getInputId().getIdName());    }    Node newRoot = ast.getAstRoot(this);    if (newRoot == null) {      return false;    }    getRoot().getLastChild().addChildToBack(newRoot);    CompilerInput newInput = new CompilerInput(ast);    // TODO(tylerg): handle this for multiple modules at some point.    if (moduleGraph == null && !modules.isEmpty()) {      // singleton module      modules.get(0).add(newInput);    }    inputsById.put(ast.getInputId(), newInput);    return true;  }     JSModuleGraph getModuleGraph() {    return moduleGraph;  }  /**   * Gets a module graph. This will always return a module graph, even   * in the degenerate case when there's only one module.   */  JSModuleGraph getDegenerateModuleGraph() {    return moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph;  }     public JSTypeRegistry getTypeRegistry() {    if (typeRegistry == null) {      typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);    }    return typeRegistry;  }     public MemoizedScopeCreator getTypedScopeCreator() {    return getPassConfig().getTypedScopeCreator();  }  @SuppressWarnings(\"unchecked\")  DefaultPassConfig ensureDefaultPassConfig() {    PassConfig passes = getPassConfig().getBasePassConfig();    Preconditions.checkState(passes instanceof DefaultPassConfig,        \"PassConfigs must eventually delegate to the DefaultPassConfig\");    return (DefaultPassConfig) passes;  }  public SymbolTable buildKnownSymbolTable() {    SymbolTable symbolTable = new SymbolTable(getTypeRegistry());    MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();    if (typedScopeCreator != null) {      symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());      symbolTable.addSymbolsFrom(typedScopeCreator);    } else {      symbolTable.findScopes(this, externsRoot, jsRoot);    }    GlobalNamespace globalNamespace =        ensureDefaultPassConfig().getGlobalNamespace();    if (globalNamespace != null) {      symbolTable.addSymbolsFrom(globalNamespace);    }    ReferenceCollectingCallback refCollector =        new ReferenceCollectingCallback(            this, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);    NodeTraversal.traverse(this, getRoot(), refCollector);    symbolTable.addSymbolsFrom(refCollector);    PreprocessorSymbolTable preprocessorSymbolTable =        ensureDefaultPassConfig().getPreprocessorSymbolTable();    if (preprocessorSymbolTable != null) {      symbolTable.addSymbolsFrom(preprocessorSymbolTable);    }    symbolTable.fillNamespaceReferences();    symbolTable.fillPropertyScopes();    symbolTable.fillThisReferences(this, externsRoot, jsRoot);    symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);    symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);    return symbolTable;  }     public Scope getTopScope() {    return getPassConfig().getTopScope();  }     public ReverseAbstractInterpreter getReverseAbstractInterpreter() {    if (abstractInterpreter == null) {      ChainableReverseAbstractInterpreter interpreter =          new SemanticReverseAbstractInterpreter(              getCodingConvention(), getTypeRegistry());      if (options.closurePass) {        interpreter = new ClosureReverseAbstractInterpreter(            getCodingConvention(), getTypeRegistry())            .append(interpreter).getFirst();      }      abstractInterpreter = interpreter;    }    return abstractInterpreter;  }     TypeValidator getTypeValidator() {    if (typeValidator == null) {      typeValidator = new TypeValidator(this);    }    return typeValidator;  }  //------------------------------------------------------------------------  // Parsing  //------------------------------------------------------------------------  /**   * Parses the externs and main inputs.   *   * @return A synthetic root node whose two children are the externs root   *     and the main root   */  Node parseInputs() {    boolean devMode = options.devMode != DevMode.OFF;    // If old roots exist (we are parsing a second time), detach each of the    // individual file parse trees.    if (externsRoot != null) {      externsRoot.detachChildren();    }    if (jsRoot != null) {      jsRoot.detachChildren();    }    // Parse main js sources.    jsRoot = IR.block();    jsRoot.setIsSyntheticBlock(true);    externsRoot = IR.block();    externsRoot.setIsSyntheticBlock(true);    externAndJsRoot = IR.block(externsRoot, jsRoot);    externAndJsRoot.setIsSyntheticBlock(true);    if (options.tracer.isOn()) {      tracker = new PerformanceTracker(jsRoot,          options.tracer == TracerMode.ALL);      addChangeHandler(tracker.getCodeChangeHandler());    }    Tracer tracer = newTracer(\"parseInputs\");    try {      // Parse externs sources.      for (CompilerInput input : externs) {        Node n = input.getAstRoot(this);        if (hasErrors()) {          return null;        }        externsRoot.addChildToBack(n);      }      // Modules inferred in ProcessCommonJS pass.      if (options.transformAMDToCJSModules || options.processCommonJSModules) {        processAMDAndCommonJSModules();      }      // Check if the sources need to be re-ordered.      if (options.dependencyOptions.needsManagement()) {        for (CompilerInput input : inputs) {          input.setCompiler(this);          // Forward-declare all the provided types, so that they          // are not flagged even if they are dropped from the process.          for (String provide : input.getProvides()) {            getTypeRegistry().forwardDeclareType(provide);          }        }        try {          inputs =              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)              .manageDependencies(options.dependencyOptions, inputs);        } catch (CircularDependencyException e) {          report(JSError.make(              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));          // If in IDE mode, we ignore the error and keep going.          if (hasErrors()) {            return null;          }        } catch (MissingProvideException e) {          report(JSError.make(              MISSING_ENTRY_ERROR, e.getMessage()));          // If in IDE mode, we ignore the error and keep going.          if (hasErrors()) {            return null;          }        }      }      // Check if inputs need to be rebuilt from modules.      boolean staleInputs = false;      for (CompilerInput input : inputs) {        Node n = input.getAstRoot(this);        // Inputs can have a null AST during initial parse.        if (n == null) {          continue;        }        if (n.getJSDocInfo() != null) {          JSDocInfo info = n.getJSDocInfo();          if (info.isExterns()) {            // If the input file is explicitly marked as an externs file, then            // assume the programmer made a mistake and throw it into            // the externs pile anyways.            externsRoot.addChildToBack(n);            input.setIsExtern(true);            input.getModule().remove(input);            externs.add(input);            staleInputs = true;          } else if (info.isNoCompile()) {            input.getModule().remove(input);            staleInputs = true;          }        }      }      if (staleInputs) {        fillEmptyModules(modules);        rebuildInputsFromModules();      }      // Build the AST.      for (CompilerInput input : inputs) {        Node n = input.getAstRoot(this);        if (n == null) {          continue;        }        if (devMode) {          runSanityCheck();          if (hasErrors()) {            return null;          }        }        if (options.sourceMapOutputPath != null ||            options.nameReferenceReportPath != null) {          // Annotate the nodes in the tree with information from the          // input file. This information is used to construct the SourceMap.          SourceInformationAnnotator sia =              new SourceInformationAnnotator(                  input.getName(), options.devMode != DevMode.OFF);          NodeTraversal.traverse(this, n, sia);        }        jsRoot.addChildToBack(n);      }      if (hasErrors()) {        return null;      }      return externAndJsRoot;    } finally {      stopTracer(tracer, \"parseInputs\");    }  }  /**   * Transforms AMD and CJS modules to something closure compiler can   * process and creates JSModules and the corresponding dependency tree   * on the way.   */  private void processAMDAndCommonJSModules() {    Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();    Map<CompilerInput, JSModule> modulesByInput = Maps.newLinkedHashMap();    // TODO(nicksantos): Refactor module dependency resolution to work nicely    // with multiple ways to express dependencies. Directly support JSModules    // that are equivalent to a signal file and which express their deps    // directly in the source.    for (CompilerInput input : inputs) {      input.setCompiler(this);      Node root = input.getAstRoot(this);      if (root == null) {        continue;      }      if (options.transformAMDToCJSModules) {        new TransformAMDToCJSModule(this).process(null, root);      }      if (options.processCommonJSModules) {        ProcessCommonJSModules cjs = new ProcessCommonJSModules(this,            options.commonJSModulePathPrefix);        cjs.process(null, root);        JSModule m = cjs.getModule();        if (m != null) {          modulesByName.put(m.getName(), m);          modulesByInput.put(input, m);        }      }    }    if (options.processCommonJSModules) {      List<JSModule> modules = Lists.newArrayList(modulesByName.values());      if (!modules.isEmpty()) {        this.modules = modules;        this.moduleGraph = new JSModuleGraph(this.modules);      }      for (JSModule module : modules) {        for (CompilerInput input : module.getInputs()) {          for (String require : input.getRequires()) {            module.addDependency(modulesByName.get(require));          }        }      }      try {        modules = Lists.newArrayList();        for (CompilerInput input : this.moduleGraph.manageDependencies(            options.dependencyOptions, inputs)) {          modules.add(modulesByInput.get(input));        }        this.modules = modules;        this.moduleGraph = new JSModuleGraph(modules);      } catch (Exception e) {        Throwables.propagate(e);      }    }  }  public Node parse(JSSourceFile file) {    initCompilerOptionsIfTesting();    addToDebugLog(\"Parsing: \" + file.getName());    return new JsAst(file).getAstRoot(this);  }  private int syntheticCodeId = 0;     Node parseSyntheticCode(String js) {    CompilerInput input = new CompilerInput(        JSSourceFile.fromCode(\" [synthetic:\" + (++syntheticCodeId) + \"] \", js));    inputsById.put(input.getInputId(), input);    return input.getAstRoot(this);  }  /**   * Allow subclasses to override the default CompileOptions object.   */  protected CompilerOptions newCompilerOptions() {    return new CompilerOptions();  }  void initCompilerOptionsIfTesting() {    if (options == null) {      // initialization for tests that don't initialize the compiler      // by the normal mechanisms.      initOptions(newCompilerOptions());    }  }     Node parseSyntheticCode(String fileName, String js) {    initCompilerOptionsIfTesting();    return parse(JSSourceFile.fromCode(fileName, js));  }     Node parseTestCode(String js) {    initCompilerOptionsIfTesting();    CompilerInput input = new CompilerInput(        JSSourceFile.fromCode(\" [testcode] \", js));    if (inputsById == null) {      inputsById = Maps.newHashMap();    }    inputsById.put(input.getInputId(), input);    return input.getAstRoot(this);  }     ErrorReporter getDefaultErrorReporter() {    return defaultErrorReporter;  }  //------------------------------------------------------------------------  // Convert back to source code  //------------------------------------------------------------------------  /**   * Converts the main parse tree back to js code.   */  public String toSource() {    return runInCompilerThread(new Callable<String>() {             public String call() throws Exception {        Tracer tracer = newTracer(\"toSource\");        try {          CodeBuilder cb = new CodeBuilder();          if (jsRoot != null) {            int i = 0;            for (Node scriptNode = jsRoot.getFirstChild();                 scriptNode != null;                 scriptNode = scriptNode.getNext()) {              toSource(cb, i++, scriptNode);            }          }          return cb.toString();        } finally {          stopTracer(tracer, \"toSource\");        }      }    });  }  /**   * Converts the parse tree for each input back to js code.   */  public String[] toSourceArray() {    return runInCompilerThread(new Callable<String[]>() {             public String[] call() throws Exception {        Tracer tracer = newTracer(\"toSourceArray\");        try {          int numInputs = inputs.size();          String[] sources = new String[numInputs];          CodeBuilder cb = new CodeBuilder();          for (int i = 0; i < numInputs; i++) {            Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);            cb.reset();            toSource(cb, i, scriptNode);            sources[i] = cb.toString();          }          return sources;        } finally {          stopTracer(tracer, \"toSourceArray\");        }      }    });  }  /**   * Converts the parse tree for a module back to js code.   */  public String toSource(final JSModule module) {    return runInCompilerThread(new Callable<String>() {             public String call() throws Exception {        List<CompilerInput> inputs = module.getInputs();        int numInputs = inputs.size();        if (numInputs == 0) {          return \"\";        }        CodeBuilder cb = new CodeBuilder();        for (int i = 0; i < numInputs; i++) {          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);          if (scriptNode == null) {            throw new IllegalArgumentException(                \"Bad module: \" + module.getName());          }          toSource(cb, i, scriptNode);        }        return cb.toString();      }    });  }  /**   * Converts the parse tree for each input in a module back to js code.   */  public String[] toSourceArray(final JSModule module) {    return runInCompilerThread(new Callable<String[]>() {             public String[] call() throws Exception {        List<CompilerInput> inputs = module.getInputs();        int numInputs = inputs.size();        if (numInputs == 0) {          return new String[0];        }        String[] sources = new String[numInputs];        CodeBuilder cb = new CodeBuilder();        for (int i = 0; i < numInputs; i++) {          Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);          if (scriptNode == null) {            throw new IllegalArgumentException(                \"Bad module input: \" + inputs.get(i).getName());          }          cb.reset();          toSource(cb, i, scriptNode);          sources[i] = cb.toString();        }        return sources;      }    });  }  /**   * Writes out js code from a root node. If printing input delimiters, this   * method will attach a comment to the start of the text indicating which   * input the output derived from. If there were any preserve annotations   * within the root's source, they will also be printed in a block comment   * at the beginning of the output.   */  public void toSource(final CodeBuilder cb,                       final int inputSeqNum,                       final Node root) {    runInCompilerThread(new Callable<Void>() {             public Void call() throws Exception {        if (options.printInputDelimiter) {          if ((cb.getLength() > 0) && !cb.endsWith(\"\\n\")) {            cb.append(\"\\n\");  // Make sure that the label starts on a new line          }          Preconditions.checkState(root.isScript());          String delimiter = options.inputDelimiter;          String inputName = root.getInputId().getIdName();          String sourceName = root.getSourceFileName();          Preconditions.checkState(sourceName != null);          Preconditions.checkState(!sourceName.isEmpty());          delimiter = delimiter              .replaceAll(\"%name%\", Matcher.quoteReplacement(inputName))              .replaceAll(\"%num%\", String.valueOf(inputSeqNum));          cb.append(delimiter)            .append(\"\\n\");        }        if (root.getJSDocInfo() != null &&            root.getJSDocInfo().getLicense() != null) {          cb.append(\"/*\\n\")            .append(root.getJSDocInfo().getLicense())            .append(\"*/\\n\");        }        // If there is a valid source map, then indicate to it that the current        // root node's mappings are offset by the given string builder buffer.        if (options.sourceMapOutputPath != null) {          sourceMap.setStartingPosition(              cb.getLineIndex(), cb.getColumnIndex());        }        // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'        // for the first input file        String code = toSource(root, sourceMap, inputSeqNum == 0);        if (!code.isEmpty()) {          cb.append(code);          // In order to avoid parse ambiguity when files are concatenated          // together, all files should end in a semi-colon. Do a quick          // heuristic check if there's an obvious semi-colon already there.          int length = code.length();          char lastChar = code.charAt(length - 1);          char secondLastChar = length >= 2 ?              code.charAt(length - 2) : '\\0';          boolean hasSemiColon = lastChar == ';' ||              (lastChar == '\\n' && secondLastChar == ';');          if (!hasSemiColon) {            cb.append(\";\");          }        }        return null;      }    });  }  /**   * Generates JavaScript source code for an AST, doesn't generate source   * map info.   */     String toSource(Node n) {    initCompilerOptionsIfTesting();    return toSource(n, null, true);  }  /**   * Generates JavaScript source code for an AST.   */  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {    CodePrinter.Builder builder = new CodePrinter.Builder(n);    builder.setPrettyPrint(options.prettyPrint);    builder.setLineBreak(options.lineBreak);    builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);    builder.setSourceMap(sourceMap);    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);    builder.setTagAsStrict(firstOutput &&        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);    builder.setLineLengthThreshold(options.lineLengthThreshold);    Charset charset = options.outputCharset != null ?        Charset.forName(options.outputCharset) : null;    builder.setOutputCharset(charset);    return builder.build();  }  /**   * Stores a buffer of text to which more can be appended.  This is just like a   * StringBuilder except that we also track the number of lines.   */  public static class CodeBuilder {    private final StringBuilder sb = new StringBuilder();    private int lineCount = 0;    private int colCount = 0;    /** Removes all text, but leaves the line count unchanged. */    void reset() {      sb.setLength(0);    }    /** Appends the given string to the text buffer. */    CodeBuilder append(String str) {      sb.append(str);      // Adjust the line and column information for the new text.      int index = -1;      int lastIndex = index;      while ((index = str.indexOf('\\n', index + 1)) >= 0) {        ++lineCount;        lastIndex = index;      }      if (lastIndex == -1) {        // No new lines, append the new characters added.        colCount += str.length();      } else {        colCount = str.length() - (lastIndex + 1);      }      return this;    }    /** Returns all text in the text buffer. */         public String toString() {      return sb.toString();    }    /** Returns the length of the text buffer. */    public int getLength() {      return sb.length();    }    /** Returns the (zero-based) index of the last line in the text buffer. */    int getLineIndex() {      return lineCount;    }    /** Returns the (zero-based) index of the last column in the text buffer. */    int getColumnIndex() {      return colCount;    }    /** Determines whether the text ends with the given suffix. */    boolean endsWith(String suffix) {      return (sb.length() > suffix.length())          && suffix.equals(sb.substring(sb.length() - suffix.length()));    }  }  //------------------------------------------------------------------------  // Optimizations  //------------------------------------------------------------------------  public void optimize() {    // Ideally, this pass should be the first pass run, however:    // 1) VariableReferenceCheck reports unexpected warnings if Normalize    // is done first.    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on    // unmodified local names.    normalize();    PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker, null);    if (options.devMode == DevMode.EVERY_PASS) {      phaseOptimizer.setSanityCheck(sanityCheck);    }    phaseOptimizer.consume(getPassConfig().getOptimizations());    phaseOptimizer.process(externsRoot, jsRoot);    if (hasErrors()) {      return;    }  }     void setCssRenamingMap(CssRenamingMap map) {    options.cssRenamingMap = map;  }     CssRenamingMap getCssRenamingMap() {    return options.cssRenamingMap;  }  /**   * Reprocesses the current defines over the AST.  This is used by GwtCompiler   * to generate N outputs for different targets from the same (checked) AST.   * For each target, we apply the target-specific defines by calling   * {@code processDefines} and then {@code optimize} to optimize the AST   * specifically for that target.   */  public void processDefines() {    (new DefaultPassConfig(options)).processDefines.create(this)        .process(externsRoot, jsRoot);  }  boolean isInliningForbidden() {    return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||        options.propertyRenaming ==            PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;  }  /** Control Flow Analysis. */  ControlFlowGraph<Node> computeCFG() {    logger.fine(\"Computing Control Flow Graph\");    Tracer tracer = newTracer(\"computeCFG\");    ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);    process(cfa);    stopTracer(tracer, \"computeCFG\");    return cfa.getCfg();  }  public void normalize() {    logger.fine(\"Normalizing\");    startPass(\"normalize\");    process(new Normalize(this, false));    endPass();  }     void prepareAst(Node root) {    CompilerPass pass = new PrepareAst(this);    pass.process(null, root);  }  void recordFunctionInformation() {    logger.fine(\"Recording function information\");    startPass(\"recordFunctionInformation\");    RecordFunctionInformation recordFunctionInfoPass =        new RecordFunctionInformation(            this, getPassConfig().getIntermediateState().functionNames);    process(recordFunctionInfoPass);    functionInformationMap = recordFunctionInfoPass.getMap();    endPass();  }  protected final CodeChangeHandler.RecentChange recentChange =      new CodeChangeHandler.RecentChange();  private final List<CodeChangeHandler> codeChangeHandlers =      Lists.<CodeChangeHandler>newArrayList();  /** Name of the synthetic input that holds synthesized externs. */  static final String SYNTHETIC_EXTERNS = \"{SyntheticVarsDeclar}\";  private CompilerInput synthesizedExternsInput = null;     void addChangeHandler(CodeChangeHandler handler) {    codeChangeHandlers.add(handler);  }     void removeChangeHandler(CodeChangeHandler handler) {    codeChangeHandlers.remove(handler);  }  /**   * All passes should call reportCodeChange() when they alter   * the JS tree structure. This is verified by CompilerTestCase.   * This allows us to optimize to a fixed point.   */     public void reportCodeChange() {    for (CodeChangeHandler handler : codeChangeHandlers) {      handler.reportChange();    }  }     public CodingConvention getCodingConvention() {    CodingConvention convention = options.getCodingConvention();    convention = convention != null ? convention : defaultCodingConvention;    return convention;  }     public boolean isIdeMode() {    return options.ideMode;  }     public boolean acceptEcmaScript5() {    switch (options.getLanguageIn()) {      case ECMASCRIPT5:      case ECMASCRIPT5_STRICT:        return true;    }    return false;  }  public LanguageMode languageMode() {    return options.getLanguageIn();  }     public boolean acceptConstKeyword() {    return options.acceptConstKeyword;  }     Config getParserConfig() {    if (parserConfig == null) {      Config.LanguageMode mode;      switch (options.getLanguageIn()) {        case ECMASCRIPT3:          mode = Config.LanguageMode.ECMASCRIPT3;          break;        case ECMASCRIPT5:          mode = Config.LanguageMode.ECMASCRIPT5;          break;        case ECMASCRIPT5_STRICT:          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;          break;        default:          throw new IllegalStateException(\"unexpected language mode\");      }      parserConfig = ParserRunner.createConfig(        isIdeMode(),        mode,        acceptConstKeyword(),        options.extraAnnotationNames);    }    return parserConfig;  }     public boolean isTypeCheckingEnabled() {    return options.checkTypes;  }  //------------------------------------------------------------------------  // Error reporting  //------------------------------------------------------------------------  /**   * The warning classes that are available from the command-line, and   * are suppressable by the {@code @suppress} annotation.   */  protected DiagnosticGroups getDiagnosticGroups() {    return new DiagnosticGroups();  }     public void report(JSError error) {    CheckLevel level = error.level;    if (warningsGuard != null) {      CheckLevel newLevel = warningsGuard.level(error);      if (newLevel != null) {        level = newLevel;      }    }    if (level.isOn()) {      errorManager.report(level, error);    }  }     public CheckLevel getErrorLevel(JSError error) {    Preconditions.checkNotNull(options);    return warningsGuard.level(error);  }  /**   * Report an internal error.   */     void throwInternalError(String message, Exception cause) {    String finalMessage =      \"INTERNAL COMPILER ERROR.\\n\" +      \"Please report this problem.\\n\" + message;    RuntimeException e = new RuntimeException(finalMessage, cause);    if (cause != null) {      e.setStackTrace(cause.getStackTrace());    }    throw e;  }  /**   * Gets the number of errors.   */  public int getErrorCount() {    return errorManager.getErrorCount();  }  /**   * Gets the number of warnings.   */  public int getWarningCount() {    return errorManager.getWarningCount();  }     boolean hasHaltingErrors() {    return !isIdeMode() && getErrorCount() > 0;  }  /**   * Consults the {@link ErrorManager} to see if we've encountered errors   * that should halt compilation. <p>   *   * If {@link CompilerOptions#ideMode} is {@code true}, this function   * always returns {@code false} without consulting the error manager. The   * error manager will continue to be told about new errors and warnings, but   * the compiler will complete compilation of all inputs.<p>   */  public boolean hasErrors() {    return hasHaltingErrors();  }  /** Called from the compiler passes, adds debug info */     void addToDebugLog(String str) {    debugLog.append(str);    debugLog.append('\\n');    logger.fine(str);  }  private SourceFile getSourceFileByName(String sourceName) {    // Here we assume that the source name is the input name, this    // is try of javascript parsed from source.    if (sourceName != null) {      CompilerInput input = inputsById.get(new InputId(sourceName));      if (input != null) {        return input.getSourceFile();      }    }    return null;  }     public String getSourceLine(String sourceName, int lineNumber) {    if (lineNumber < 1) {      return null;    }    SourceFile input = getSourceFileByName(sourceName);    if (input != null) {      return input.getLine(lineNumber);    }    return null;  }     public Region getSourceRegion(String sourceName, int lineNumber) {    if (lineNumber < 1) {      return null;    }    SourceFile input = getSourceFileByName(sourceName);    if (input != null) {      return input.getRegion(lineNumber);    }    return null;  }  //------------------------------------------------------------------------  // Package-private helpers  //------------------------------------------------------------------------     Node getNodeForCodeInsertion(JSModule module) {    if (module == null) {      if (inputs.isEmpty()) {        throw new IllegalStateException(\"No inputs\");      }      return inputs.get(0).getAstRoot(this);    }    List<CompilerInput> moduleInputs = module.getInputs();    if (moduleInputs.size() > 0) {      return moduleInputs.get(0).getAstRoot(this);    }    throw new IllegalStateException(\"Root module has no inputs\");  }  public SourceMap getSourceMap() {    return sourceMap;  }  VariableMap getVariableMap() {    return getPassConfig().getIntermediateState().variableMap;  }  VariableMap getPropertyMap() {    return getPassConfig().getIntermediateState().propertyMap;  }  CompilerOptions getOptions() {    return options;  }  FunctionInformationMap getFunctionalInformationMap() {    return functionInformationMap;  }  /**   * Sets the logging level for the com.google.javascript.jscomp package.   */  public static void setLoggingLevel(Level level) {    logger.setLevel(level);  }  /** Gets the DOT graph of the AST generated at the end of compilation. */  public String getAstDotGraph() throws IOException {    if (jsRoot != null) {      ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);      cfa.process(null, jsRoot);      return DotFormatter.toDot(jsRoot, cfa.getCfg());    } else {      return \"\";    }  }     public ErrorManager getErrorManager() {    if (options == null) {      initOptions(newCompilerOptions());    }    return errorManager;  }     List<CompilerInput> getInputsInOrder() {    return Collections.<CompilerInput>unmodifiableList(inputs);  }  /**   * Returns an unmodifiable view of the compiler inputs indexed by id.   */  public Map<InputId, CompilerInput> getInputsById() {    return Collections.unmodifiableMap(inputsById);  }  /**   * Gets the externs in the order in which they are being processed.   */  List<CompilerInput> getExternsInOrder() {    return Collections.<CompilerInput>unmodifiableList(externs);  }  /**   * Stores the internal compiler state just before optimization is performed.   * This can be saved and restored in order to efficiently optimize multiple   * different output targets without having to perform checking multiple times.   *   * NOTE: This does not include all parts of the compiler's internal state. In   * particular, JSSourceFiles and CompilerOptions are not recorded. In   * order to recreate a Compiler instance from scratch, you would need to   * call {@code init} with the same arguments as in the initial creation before   * restoring intermediate state.   */  public static class IntermediateState implements Serializable {    private static final long serialVersionUID = 1L;    Node externsRoot;    private Node jsRoot;    private List<CompilerInput> externs;    private List<CompilerInput> inputs;    private List<JSModule> modules;    private PassConfig.State passConfigState;    private JSTypeRegistry typeRegistry;    private AbstractCompiler.LifeCycleStage lifeCycleStage;    private IntermediateState() {}  }  /**   * Returns the current internal state, excluding the input files and modules.   */  public IntermediateState getState() {    IntermediateState state = new IntermediateState();    state.externsRoot = externsRoot;    state.jsRoot = jsRoot;    state.externs = externs;    state.inputs = inputs;    state.modules = modules;    state.passConfigState = getPassConfig().getIntermediateState();    state.typeRegistry = typeRegistry;    state.lifeCycleStage = getLifeCycleStage();    return state;  }  /**   * Sets the internal state to the capture given.  Note that this assumes that   * the input files are already set up.   */  public void setState(IntermediateState state) {    externsRoot = state.externsRoot;    jsRoot = state.jsRoot;    externs = state.externs;    inputs = state.inputs;    modules = state.modules;    passes = createPassConfigInternal();    getPassConfig().setIntermediateState(state.passConfigState);    typeRegistry = state.typeRegistry;    setLifeCycleStage(state.lifeCycleStage);  }  @VisibleForTesting  List<CompilerInput> getInputsForTesting() {    return inputs;  }  @VisibleForTesting  List<CompilerInput> getExternsForTesting() {    return externs;  }     boolean hasRegExpGlobalReferences() {    return hasRegExpGlobalReferences;  }     void setHasRegExpGlobalReferences(boolean references) {    hasRegExpGlobalReferences = references;  }     void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch,      Node collectionRoot) {    Preconditions.checkState(collectionRoot.isScript()        || collectionRoot.isBlock());    if (globalRefMap == null) {      globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(),          getExternsInOrder());    }    globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);  }     GlobalVarReferenceMap getGlobalVarReferences() {    return globalRefMap;  }     CompilerInput getSynthesizedExternsInput() {    if (synthesizedExternsInput == null) {      synthesizedExternsInput = newExternInput(SYNTHETIC_EXTERNS);    }    return synthesizedExternsInput;  }     public double getProgress() {    return progress;  }     void setProgress(double newProgress) {    if (newProgress > 1.0) {      progress = 1.0;    } else if (newProgress < 0.0) {      progress = 0.0;    } else {      progress = newProgress;    }  }  /**   * Replaces one file in a hot-swap mode. The given JsAst should be made   * from a new version of a file that already was present in the last compile   * call. If the file is new, this will silently ignored.   *   * @param ast the ast of the file that is being replaced   */  public void replaceScript(JsAst ast) {    CompilerInput input = this.getInput(ast.getInputId());    if (!replaceIncrementalSourceAst(ast)) {      return;    }    Node originalRoot = input.getAstRoot(this);    processNewScript(ast, originalRoot);  }  /**   * Adds a new Script AST to the compile state. If a script for the same file   * already exists the script will not be added, instead a call to   * #replaceScript should be used.   *   * @param ast the ast of the new file   */  public void addNewScript(JsAst ast) {    if (!addNewSourceAst(ast)) {      return;    }    Node emptyScript = new Node(Token.SCRIPT);    InputId inputId = ast.getInputId();    emptyScript.setInputId(inputId);    emptyScript.setStaticSourceFile(        JSSourceFile.fromCode(inputId.getIdName(), \"\"));    processNewScript(ast, emptyScript);  }  private void processNewScript(JsAst ast, Node originalRoot) {    Node js = ast.getAstRoot(this);    Preconditions.checkNotNull(js);    runHotSwap(originalRoot, js, this.getCleanupPassConfig());    // NOTE: If hot swap passes that use GlobalNamespace are added, we will need    // to revisit this approach to clearing GlobalNamespaces    runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);    this.getTypeRegistry().clearNamedTypes();    this.removeSyntheticVarsInput();    runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());  }  /**   * Execute the passes from a PassConfig instance over a single replaced file.   */  private void runHotSwap(      Node originalRoot, Node js, PassConfig passConfig) {    for (PassFactory passFactory : passConfig.getChecks()) {      runHotSwapPass(originalRoot, js, passFactory);    }  }  private void runHotSwapPass(      Node originalRoot, Node js, PassFactory passFactory) {    HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);    if (pass != null) {      logger.info(\"Performing HotSwap for pass \" + passFactory.getName());      pass.hotSwapScript(js, originalRoot);    }  }  private PassConfig getCleanupPassConfig() {    return new CleanupPasses(getOptions());  }  private void removeSyntheticVarsInput() {    String sourceName = Compiler.SYNTHETIC_EXTERNS;    removeExternInput(new InputId(sourceName));  }}\nCaused by: java.lang.IllegalStateException\n\t... 23 more",
                "failed_line": 1945
            }
        }
    },
    "Closure_49": {
        "function_num": 3,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
                "start_loc": 75,
                "end_loc": 104,
                "buggy_function": "   \n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() == Token.FUNCTION) {\n      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n        String name = c.getString();\n        renamer.addDeclaredName(name);\n      }\n      Node functionBody = declarationRoot.getLastChild();\n      findDeclaredNames(functionBody, null, renamer);\n    }  else \n    if (declarationRoot.getType() != Token.FUNCTION) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n",
                "fixed_function": "   \n  public void enterScope(NodeTraversal t) {\n    Node declarationRoot = t.getScopeRoot();\n    Renamer renamer;\n    if (nameStack.isEmpty()) {\n      // If the contextual renamer is being used the starting context can not\n      // be a function.\n      Preconditions.checkState(\n          declarationRoot.getType() != Token.FUNCTION ||\n          !(rootRenamer instanceof ContextualRenamer));\n      Preconditions.checkState(t.inGlobalScope());\n      renamer = rootRenamer;\n    } else {\n      renamer = nameStack.peek().forChildScope();\n    }\n\n    if (declarationRoot.getType() != Token.FUNCTION) {\n      // Add the block declarations\n      findDeclaredNames(declarationRoot, null, renamer);\n    }\n    nameStack.push(renamer);\n  }\n",
                "comment": "",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19b",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline13",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline14",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline15",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline16",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline17",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline18",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testIssue423",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9",
                    "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
                "start_loc": 113,
                "end_loc": 153,
                "buggy_function": "   \n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n\n\n          // Add the function parameters\n\n          // Add the function body declarations\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n",
                "fixed_function": "   \n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        {\n          // Add recursive function name, if needed.\n          // NOTE: \"enterScope\" is called after we need to pick up this name.\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // If needed, add the function recursive name.\n          String name = n.getFirstChild().getString();\n          if (name != null && !name.isEmpty() && parent != null\n              && !NodeUtil.isFunctionDeclaration(n)) {\n            renamer.addDeclaredName(name);\n          }\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.LP: {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          // Add the function parameters\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            String name = c.getString();\n            renamer.addDeclaredName(name);\n          }\n\n          // Add the function body declarations\n          Node functionBody = n.getNext();\n          findDeclaredNames(functionBody, null, renamer);\n\n          nameStack.push(renamer);\n        }\n        break;\n\n      case Token.CATCH:\n        {\n          Renamer renamer = nameStack.peek().forChildScope();\n\n          String name = n.getFirstChild().getString();\n          renamer.addDeclaredName(name);\n\n          nameStack.push(renamer);\n        }\n        break;\n    }\n\n    return true;\n  }\n",
                "comment": "",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19b",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline13",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline14",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline15",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline16",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline17",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline18",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testIssue423",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9",
                    "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
                "start_loc": 155,
                "end_loc": 186,
                "buggy_function": "   \n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n",
                "fixed_function": "   \n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.NAME:\n        String newName = getReplacementName(n.getString());\n        if (newName != null) {\n          Renamer renamer = nameStack.peek();\n          if (renamer.stripConstIfReplaced()) {\n            // TODO(johnlenz): Do we need to do anything about the javadoc?\n            n.removeProp(Node.IS_CONSTANT_NAME);\n          }\n          n.setString(newName);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Remove the function body scope\n        nameStack.pop();\n        // Remove function recursive name (if any).\n        nameStack.pop();\n        break;\n\n      case Token.LP:\n        // Note: The parameters and function body variables live in the\n        // same scope, we introduce the scope when in the \"shouldTraverse\"\n        // visit of LP, but remove it when when we exit the function above.\n        break;\n\n      case Token.CATCH:\n        // Remove catch except name from the stack of names.\n        nameStack.pop();\n        break;\n    }\n  }\n",
                "comment": "",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19b",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline13",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline14",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline15",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline16",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline17",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline18",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInline19",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706",
                    "com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition",
                    "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testIssue423",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23",
                    "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9",
                    "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline19b": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline19b",
                "src": "  public void testInline19b() {\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){y = a; x = b;}; \" +\n        \"function bar() {\" +\n           \"{var b$$inline_1=y;\" +\n            \"y = x;\" +\n            \"x = b$$inline_1;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_1=y;y=x;x=b$$inline_1}\nResult: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_3=y;y=x;x=b$$inline_3}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n            NUMBER 1.0 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME y 1 [source_file:  [testcode] ]\n            NUMBER 2.0 1 [source_file:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n            NAME b 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME y 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n                    NAME b 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION bar 1 [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                        NAME b$$inline_1 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    VAR 1 [source_file: code]\n        NAME x 1 [source_file: code]\n            NUMBER 1.0 1 [source_file: code]\n    VAR 1 [source_file: code]\n        NAME y 1 [source_file: code]\n            NUMBER 2.0 1 [source_file: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n            NAME b 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME y 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME x 1 [source_file: code]\n                    NAME b 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION bar 1 [source_file: code]\n        NAME bar 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                        NAME b$$inline_3 1 [source_file: code]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    NAME y 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file: code]\n    NAME y 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline19b(FunctionInjectorTest.java:945)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_1=y;y=x;x=b$$inline_1}\nResult: var x=1;var y=2;function foo(a,b){y=a;x=b}function bar(){var b$$inline_3=y;y=x;x=b$$inline_3}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n            NUMBER 1.0 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME y 1 [source_file:  [testcode] ]\n            NUMBER 2.0 1 [source_file:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n            NAME b 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME y 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n                    NAME b 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION bar 1 [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                        NAME b$$inline_1 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    VAR 1 [source_file: code]\n        NAME x 1 [source_file: code]\n            NUMBER 1.0 1 [source_file: code]\n    VAR 1 [source_file: code]\n        NAME y 1 [source_file: code]\n            NUMBER 2.0 1 [source_file: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n            NAME b 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME y 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME x 1 [source_file: code]\n                    NAME b 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION bar 1 [source_file: code]\n        NAME bar 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                        NAME b$$inline_3 1 [source_file: code]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    NAME y 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file: code]\n    NAME y 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline19b(FunctionInjectorTest.java:945)  helperInlineReferenceToFunction(        \"var x = 1; var y = 2;\" +        \"function foo(a,b){y = a; x = b;}; \" +        \"function bar() { foo(x,y); }\",        \"var x = 1; var y = 2;\" +        \"function foo(a,b){y = a; x = b;}; \" +        \"function bar() {\" +           \"{var b$$inline_1=y;\" +            \"y = x;\" +            \"x = b$$inline_1;}\" +        \"}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 945
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInlineIntoLoop",
                "src": "  public void testInlineIntoLoop() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;return a;}; \" +\n        \"for(;1;){ {\" +\n            \"var b$$inline_1=void 0;1}}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ foo(1); } while(1)\",\n        \"function foo(a){var b;return a;}; \" +\n        \"do{ {\" +\n            \"var b$$inline_1=void 0;1}}while(1)\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){for(var b in c)return a;}; \" +\n        \"for(;1;){ foo(1); }\",\n        \"function foo(a){var b;for(b in c)return a;}; \" +\n        \"for(;1;){ {JSCompiler_inline_label_foo_2:{\" +\n            \"var b$$inline_1=void 0;for(b$$inline_1 in c){\" +\n              \"1;break JSCompiler_inline_label_foo_2\" +\n            \"}}}}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function foo(a){var b;return a}for(;1;){var b$$inline_1=void 0;1}\nResult: function foo(a){var b;return a}for(;1;){var b$$inline_3=void 0;1}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME b 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FOR 1 [source_file:  [testcode] ]\n        EMPTY 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n        EMPTY 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                        VOID 1 [source_file:  [testcode] ]\n                            NUMBER 0.0 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME b 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FOR 1 [source_file: code]\n        EMPTY 1 [source_file: code]\n        NUMBER 1.0 1 [source_file: code]\n        EMPTY 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                        VOID 1 [source_file: code]\n                            NUMBER 0.0 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NUMBER 1.0 1 [source_file: code]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file: code]\n    VOID 1 [source_file: code]\n        NUMBER 0.0 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInlineIntoLoop(FunctionInjectorTest.java:960)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function foo(a){var b;return a}for(;1;){var b$$inline_1=void 0;1}\nResult: function foo(a){var b;return a}for(;1;){var b$$inline_3=void 0;1}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME b 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FOR 1 [source_file:  [testcode] ]\n        EMPTY 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n        EMPTY 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                        VOID 1 [source_file:  [testcode] ]\n                            NUMBER 0.0 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME b 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FOR 1 [source_file: code]\n        EMPTY 1 [source_file: code]\n        NUMBER 1.0 1 [source_file: code]\n        EMPTY 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                        VOID 1 [source_file: code]\n                            NUMBER 0.0 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NUMBER 1.0 1 [source_file: code]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file: code]\n    VOID 1 [source_file: code]\n        NUMBER 0.0 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInlineIntoLoop(FunctionInjectorTest.java:960)  helperInlineReferenceToFunction(        \"function foo(a){var b;return a;}; \" +        \"for(;1;){ foo(1); }\",        \"function foo(a){var b;return a;}; \" +        \"for(;1;){ {\" +            \"var b$$inline_1=void 0;1}}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 960
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline13": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline13",
                "src": "  public void testInline13() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"function foo(a){return a;}; \" +\n        \"function x() {{var a$$inline_0=x++;\" +\n            \"a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a}function x(){var a$$inline_0=x++;a$$inline_0}\nResult: function foo(a){return a}function x(){var a$$inline_1=x++;a$$inline_1}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION x 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                            NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION x 1 [source_file: code]\n        NAME x 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_1 1 [source_file: code]\n                        INC 1 [incrdecr: 1] [source_file: code]\n                            NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    INC 1 [incrdecr: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline13(FunctionInjectorTest.java:866)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a}function x(){var a$$inline_0=x++;a$$inline_0}\nResult: function foo(a){return a}function x(){var a$$inline_1=x++;a$$inline_1}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION x 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                            NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION x 1 [source_file: code]\n        NAME x 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_1 1 [source_file: code]\n                        INC 1 [incrdecr: 1] [source_file: code]\n                            NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    INC 1 [incrdecr: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline13(FunctionInjectorTest.java:866)  helperInlineReferenceToFunction(        \"function foo(a){return a;}; \" +        \"function x() { foo(x++); }\",        \"function foo(a){return a;}; \" +        \"function x() {{var a$$inline_0=x++;\" +            \"a$$inline_0}}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 866
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline14": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline14",
                "src": "  public void testInline14() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=x++;\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=x++;a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=x++;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                INC 1 [incrdecr: 1] [source_file: code]\n                    NAME x 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    INC 1 [incrdecr: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline14(FunctionInjectorTest.java:877)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=x++;a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=x++;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                INC 1 [incrdecr: 1] [source_file: code]\n                    NAME x 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    INC 1 [incrdecr: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline14(FunctionInjectorTest.java:877)  helperInlineReferenceToFunction(        \"function foo(a){return a+a;}; foo(x++);\",        \"function foo(a){return a+a;}; \" +            \"{var a$$inline_0=x++;\" +            \" a$$inline_0+\" +            \"a$$inline_0;}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 877
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline15": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline15",
                "src": "  public void testInline15() {\n    // Parameter has mutable, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(new Date());\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=new Date();\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=new Date;a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=new Date;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NEW 1 [source_file:  [testcode] ]\n                    NAME Date 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                NEW 1 [source_file: code]\n                    NAME Date 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    NEW 1 [source_file:  [testcode] ]\n        NAME Date 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    NEW 1 [source_file: code]\n        NAME Date 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline15(FunctionInjectorTest.java:888)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=new Date;a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=new Date;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NEW 1 [source_file:  [testcode] ]\n                    NAME Date 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                NEW 1 [source_file: code]\n                    NAME Date 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    NEW 1 [source_file:  [testcode] ]\n        NAME Date 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    NEW 1 [source_file: code]\n        NAME Date 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline15(FunctionInjectorTest.java:888)  helperInlineReferenceToFunction(        \"function foo(a){return a+a;}; foo(new Date());\",        \"function foo(a){return a+a;}; \" +            \"{var a$$inline_0=new Date();\" +            \" a$$inline_0+\" +            \"a$$inline_0;}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 888
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline16": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline16",
                "src": "  public void testInline16() {\n    // Parameter is large, references more than once.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return a+a;}; foo(function(){});\",\n        \"function foo(a){return a+a;}; \" +\n            \"{var a$$inline_0=function(){};\" +\n            \" a$$inline_0+\" +\n            \"a$$inline_0;}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=function(){};a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=function(){};a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                FUNCTION  1 [source_file:  [testcode] ]\n                    NAME  1 [source_file:  [testcode] ]\n                    LP 1 [source_file:  [testcode] ]\n                    BLOCK 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                FUNCTION  1 [source_file: code]\n                    NAME  1 [source_file: code]\n                    LP 1 [source_file: code]\n                    BLOCK 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    FUNCTION  1 [source_file: code]\n        NAME  1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline16(FunctionInjectorTest.java:899)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return a+a}var a$$inline_0=function(){};a$$inline_0+a$$inline_0\nResult: function foo(a){return a+a}var a$$inline_1=function(){};a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                ADD 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                FUNCTION  1 [source_file:  [testcode] ]\n                    NAME  1 [source_file:  [testcode] ]\n                    LP 1 [source_file:  [testcode] ]\n                    BLOCK 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            ADD 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n                NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                ADD 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                FUNCTION  1 [source_file: code]\n                    NAME  1 [source_file: code]\n                    LP 1 [source_file: code]\n                    BLOCK 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            ADD 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n                NAME a$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    FUNCTION  1 [source_file: code]\n        NAME  1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline16(FunctionInjectorTest.java:899)  helperInlineReferenceToFunction(        \"function foo(a){return a+a;}; foo(function(){});\",        \"function foo(a){return a+a;}; \" +            \"{var a$$inline_0=function(){};\" +            \" a$$inline_0+\" +            \"a$$inline_0;}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 899
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline17": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline17",
                "src": "  public void testInline17() {\n    // Parameter has side-effects.\n    helperInlineReferenceToFunction(\n        \"function foo(a){return true;}; foo(goo());\",\n        \"function foo(a){return true;};\" +\n            \"{var a$$inline_0=goo();true}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return true}var a$$inline_0=goo();true\nResult: function foo(a){return true}var a$$inline_1=goo();true\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                TRUE 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                    NAME goo 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            TRUE 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                TRUE 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                CALL 1 [free_call: 1] [source_file: code]\n                    NAME goo 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            TRUE 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME goo 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME goo 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline17(FunctionInjectorTest.java:910)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function foo(a){return true}var a$$inline_0=goo();true\nResult: function foo(a){return true}var a$$inline_1=goo();true\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                TRUE 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                    NAME goo 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            TRUE 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                TRUE 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                CALL 1 [free_call: 1] [source_file: code]\n                    NAME goo 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            TRUE 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME goo 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME goo 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline17(FunctionInjectorTest.java:910)  helperInlineReferenceToFunction(        \"function foo(a){return true;}; foo(goo());\",        \"function foo(a){return true;};\" +            \"{var a$$inline_0=goo();true}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 910
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline18": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline18",
                "src": "  public void testInline18() {\n    // This doesn't bring names into the global name space.\n    helperInlineReferenceToFunction(\n        \"function foo(a){var b;return a;}; \" +\n            \"function x() { foo(goo()); }\",\n            \"function foo(a){var b;return a;}; \" +\n            \"function x() {{var a$$inline_0=goo();\" +\n                \"var b$$inline_1;a$$inline_0}}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function foo(a){var b;return a}function x(){var a$$inline_0=goo();var b$$inline_1;a$$inline_0}\nResult: function foo(a){var b;return a}function x(){var a$$inline_2=goo();var b$$inline_3;a$$inline_2}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME b 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION x 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                            NAME goo 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME b 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION x 1 [source_file: code]\n        NAME x 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n                        CALL 1 [free_call: 1] [source_file: code]\n                            NAME goo 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME goo 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME goo 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline18(FunctionInjectorTest.java:919)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function foo(a){var b;return a}function x(){var a$$inline_0=goo();var b$$inline_1;a$$inline_0}\nResult: function foo(a){var b;return a}function x(){var a$$inline_2=goo();var b$$inline_3;a$$inline_2}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME b 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION x 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                            NAME goo 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME b 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION x 1 [source_file: code]\n        NAME x 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n                        CALL 1 [free_call: 1] [source_file: code]\n                            NAME goo 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME b$$inline_3 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME goo 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME goo 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline18(FunctionInjectorTest.java:919)  helperInlineReferenceToFunction(        \"function foo(a){var b;return a;}; \" +            \"function x() { foo(goo()); }\",            \"function foo(a){var b;return a;}; \" +            \"function x() {{var a$$inline_0=goo();\" +                \"var b$$inline_1;a$$inline_0}}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 919
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInline19": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInline19",
                "src": "  public void testInline19() {\n    // Properly alias.\n    helperInlineReferenceToFunction(\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() { foo(x,y); }\",\n        \"var x = 1; var y = 2;\" +\n        \"function foo(a,b){x = b; y = a;}; \" +\n        \"function bar() {\" +\n           \"{var a$$inline_0=x;\" +\n            \"x = y;\" +\n            \"y = a$$inline_0;}\" +\n        \"}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_0=x;x=y;y=a$$inline_0}\nResult: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_2=x;x=y;y=a$$inline_2}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n            NUMBER 1.0 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME y 1 [source_file:  [testcode] ]\n            NUMBER 2.0 1 [source_file:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n            NAME b 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n                    NAME b 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME y 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION bar 1 [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                        NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    VAR 1 [source_file: code]\n        NAME x 1 [source_file: code]\n            NUMBER 1.0 1 [source_file: code]\n    VAR 1 [source_file: code]\n        NAME y 1 [source_file: code]\n            NUMBER 2.0 1 [source_file: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n            NAME b 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME x 1 [source_file: code]\n                    NAME b 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME y 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION bar 1 [source_file: code]\n        NAME bar 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                        NAME a$$inline_2 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: code]\n    NAME x 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline19(FunctionInjectorTest.java:930)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_0=x;x=y;y=a$$inline_0}\nResult: var x=1;var y=2;function foo(a,b){x=b;y=a}function bar(){var a$$inline_2=x;x=y;y=a$$inline_2}\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n            NUMBER 1.0 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME y 1 [source_file:  [testcode] ]\n            NUMBER 2.0 1 [source_file:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n            NAME b 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n                    NAME b 1 [source_file:  [testcode] ]\n            EXPR_RESULT 1 [source_file:  [testcode] ]\n                ASSIGN 1 [source_file:  [testcode] ]\n                    NAME y 1 [source_file:  [testcode] ]\n                    NAME a 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    FUNCTION bar 1 [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            BLOCK 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME a$$inline_0 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME x 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                EXPR_RESULT 1 [source_file:  [testcode] ]\n                    ASSIGN 1 [source_file:  [testcode] ]\n                        NAME y 1 [source_file:  [testcode] ]\n                        NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    VAR 1 [source_file: code]\n        NAME x 1 [source_file: code]\n            NUMBER 1.0 1 [source_file: code]\n    VAR 1 [source_file: code]\n        NAME y 1 [source_file: code]\n            NUMBER 2.0 1 [source_file: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n            NAME b 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME x 1 [source_file: code]\n                    NAME b 1 [source_file: code]\n            EXPR_RESULT 1 [source_file: code]\n                ASSIGN 1 [source_file: code]\n                    NAME y 1 [source_file: code]\n                    NAME a 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    FUNCTION bar 1 [source_file: code]\n        NAME bar 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            BLOCK 1 [source_file: code]\n                VAR 1 [source_file: code]\n                    NAME a$$inline_2 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME x 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                EXPR_RESULT 1 [source_file: code]\n                    ASSIGN 1 [source_file: code]\n                        NAME y 1 [source_file: code]\n                        NAME a$$inline_2 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: code]\n    NAME x 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInline19(FunctionInjectorTest.java:930)  helperInlineReferenceToFunction(        \"var x = 1; var y = 2;\" +        \"function foo(a,b){x = b; y = a;}; \" +        \"function bar() { foo(x,y); }\",        \"var x = 1; var y = 2;\" +        \"function foo(a,b){x = b; y = a;}; \" +        \"function bar() {\" +           \"{var a$$inline_0=x;\" +            \"x = y;\" +            \"y = a$$inline_0;}\" +        \"}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 930
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testBug1897706",
                "src": "  public void testBug1897706() {\n    helperInlineReferenceToFunction(\n        \"function foo(a){}; foo(x())\",\n        \"function foo(a){}; {var a$$inline_0=x()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a){bar()}; foo(x())\",\n        \"function foo(a){bar()}; {var a$$inline_0=x();bar()}\",\n        \"foo\", INLINE_BLOCK);\n\n    helperInlineReferenceToFunction(\n        \"function foo(a,b){bar()}; foo(x(),y())\",\n        \"function foo(a,b){bar()};\" +\n        \"{var a$$inline_0=x();var b$$inline_1=y();bar()}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function foo(a){}var a$$inline_0=x()\nResult: function foo(a){}var a$$inline_1=x()\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                CALL 1 [free_call: 1] [source_file: code]\n                    NAME x 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testBug1897706(FunctionInjectorTest.java:1315)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function foo(a){}var a$$inline_0=x()\nResult: function foo(a){}var a$$inline_1=x()\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n            NAME a 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n                CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                    NAME x 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n            NAME a 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME a$$inline_1 1 [source_file: code]\n                CALL 1 [free_call: 1] [source_file: code]\n                    NAME x 1 [source_file: code]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: code]\n    CALL 1 [free_call: 1] [source_file: code]\n        NAME x 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testBug1897706(FunctionInjectorTest.java:1315)  helperInlineReferenceToFunction(        \"function foo(a){}; foo(x())\",        \"function foo(a){}; {var a$$inline_0=x()}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 1315
            },
            "com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5": {
                "path": "test/com/google/javascript/jscomp/FunctionInjectorTest.java",
                "function_name": "testInlineFunctionWithInnerFunction5",
                "src": "  public void testInlineFunctionWithInnerFunction5() {\n    // Call with inner function statement.\n    helperInlineReferenceToFunction(\n        \"function foo(){function x() {var a; return true;} return x}; foo();\",\n        \"function foo(){function x(){var a;return true}return x};\" +\n            \"{var x$$inline_0 = function(){\" +\n            \"var a$$inline_1;return true};x$$inline_0}\",\n        \"foo\", INLINE_BLOCK);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function foo(){function x(){var a;return true}return x}var x$$inline_0=function(){var a$$inline_1;return true};x$$inline_0\nResult: function foo(){function x(){var a;return true}return x}var x$$inline_1=function(){var a$$inline_2;return true};x$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FUNCTION x 1 [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    VAR 1 [source_file:  [testcode] ]\n                        NAME a 1 [source_file:  [testcode] ]\n                    RETURN 1 [source_file:  [testcode] ]\n                        TRUE 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME x$$inline_0 1 [source_file:  [testcode] ]\n                FUNCTION  1 [source_file:  [testcode] ]\n                    NAME  1 [source_file:  [testcode] ]\n                    LP 1 [source_file:  [testcode] ]\n                    BLOCK 1 [source_file:  [testcode] ]\n                        VAR 1 [source_file:  [testcode] ]\n                            NAME a$$inline_1 1 [source_file:  [testcode] ]\n                        RETURN 1 [source_file:  [testcode] ]\n                            TRUE 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            NAME x$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            FUNCTION x 1 [source_file: code]\n                NAME x 1 [source_file: code]\n                LP 1 [source_file: code]\n                BLOCK 1 [source_file: code]\n                    VAR 1 [source_file: code]\n                        NAME a 1 [source_file: code]\n                    RETURN 1 [source_file: code]\n                        TRUE 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME x 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME x$$inline_1 1 [source_file: code]\n                FUNCTION  1 [source_file: code]\n                    NAME  1 [source_file: code]\n                    LP 1 [source_file: code]\n                    BLOCK 1 [source_file: code]\n                        VAR 1 [source_file: code]\n                            NAME a$$inline_2 1 [source_file: code]\n                        RETURN 1 [source_file: code]\n                            TRUE 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            NAME x$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME a$$inline_1 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                TRUE 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: code]\n    FUNCTION  1 [source_file: code]\n        NAME  1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME a$$inline_2 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                TRUE 1 [source_file: code]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$2.call(FunctionInjectorTest.java:1479)\n\tat com.google.javascript.jscomp.FunctionInjectorTest$TestCallback.visit(FunctionInjectorTest.java:1524)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInlineFunctionWithInnerFunction5(FunctionInjectorTest.java:1025)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function foo(){function x(){var a;return true}return x}var x$$inline_0=function(){var a$$inline_1;return true};x$$inline_0\nResult: function foo(){function x(){var a;return true}return x}var x$$inline_1=function(){var a$$inline_2;return true};x$$inline_1\nNode tree inequality:\nTree1:\nSCRIPT 1 [synthetic: 1] [source_file:  [testcode] ] [input_id: InputId:  [testcode] ]\n    FUNCTION foo 1 [source_file:  [testcode] ]\n        NAME foo 1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FUNCTION x 1 [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    VAR 1 [source_file:  [testcode] ]\n                        NAME a 1 [source_file:  [testcode] ]\n                    RETURN 1 [source_file:  [testcode] ]\n                        TRUE 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EMPTY 1 [source_file:  [testcode] ]\n    BLOCK 1 [source_file:  [testcode] ]\n        VAR 1 [source_file:  [testcode] ]\n            NAME x$$inline_0 1 [source_file:  [testcode] ]\n                FUNCTION  1 [source_file:  [testcode] ]\n                    NAME  1 [source_file:  [testcode] ]\n                    LP 1 [source_file:  [testcode] ]\n                    BLOCK 1 [source_file:  [testcode] ]\n                        VAR 1 [source_file:  [testcode] ]\n                            NAME a$$inline_1 1 [source_file:  [testcode] ]\n                        RETURN 1 [source_file:  [testcode] ]\n                            TRUE 1 [source_file:  [testcode] ]\n        EXPR_RESULT 1 [source_file:  [testcode] ]\n            NAME x$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nSCRIPT 1 [synthetic: 1] [source_file: code] [input_id: InputId: code]\n    FUNCTION foo 1 [source_file: code]\n        NAME foo 1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            FUNCTION x 1 [source_file: code]\n                NAME x 1 [source_file: code]\n                LP 1 [source_file: code]\n                BLOCK 1 [source_file: code]\n                    VAR 1 [source_file: code]\n                        NAME a 1 [source_file: code]\n                    RETURN 1 [source_file: code]\n                        TRUE 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                NAME x 1 [source_file: code]\n    EMPTY 1 [source_file: code]\n    BLOCK 1 [source_file: code]\n        VAR 1 [source_file: code]\n            NAME x$$inline_1 1 [source_file: code]\n                FUNCTION  1 [source_file: code]\n                    NAME  1 [source_file: code]\n                    LP 1 [source_file: code]\n                    BLOCK 1 [source_file: code]\n                        VAR 1 [source_file: code]\n                            NAME a$$inline_2 1 [source_file: code]\n                        RETURN 1 [source_file: code]\n                            TRUE 1 [source_file: code]\n        EXPR_RESULT 1 [source_file: code]\n            NAME x$$inline_1 1 [source_file: code]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            VAR 1 [source_file:  [testcode] ]\n                NAME a$$inline_1 1 [source_file:  [testcode] ]\n            RETURN 1 [source_file:  [testcode] ]\n                TRUE 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: code]\n    FUNCTION  1 [source_file: code]\n        NAME  1 [source_file: code]\n        LP 1 [source_file: code]\n        BLOCK 1 [source_file: code]\n            VAR 1 [source_file: code]\n                NAME a$$inline_2 1 [source_file: code]\n            RETURN 1 [source_file: code]\n                TRUE 1 [source_file: code]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1488)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.helperInlineReferenceToFunction(FunctionInjectorTest.java:1393)  helperInlineReferenceToFunction(        code, expectedResult, fnName, mode, false);\n\tat com.google.javascript.jscomp.FunctionInjectorTest.testInlineFunctionWithInnerFunction5(FunctionInjectorTest.java:1025)  helperInlineReferenceToFunction(        \"function foo(){function x() {var a; return true;} return x}; foo();\",        \"function foo(){function x(){var a;return true}return x};\" +            \"{var x$$inline_0 = function(){\" +            \"var a$$inline_1;return true};x$$inline_0}\",        \"foo\", INLINE_BLOCK);",
                "failed_line": 1025
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateWithParameters3",
                "src": "  public void testMutateWithParameters3() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a;}; \" +\n        \"function x() { foo(x++); }\",\n        \"{var a$$inline_0 = x++; a$$inline_0}\",\n        \"foo\", null);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=x++;a$$inline_0\nResult: var a$$inline_1=x++;a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateWithParameters3(FunctionToBlockMutatorTest.java:112)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=x++;a$$inline_0\nResult: var a$$inline_1=x++;a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:536)  traverseBranch(body, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:483)  traverseFunction(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)  helperMutate(code, expectedResult, fnName, resultName, false, false);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateWithParameters3(FunctionToBlockMutatorTest.java:112)  helperMutate(        \"function foo(a){return a;}; \" +        \"function x() { foo(x++); }\",        \"{var a$$inline_0 = x++; a$$inline_0}\",        \"foo\", null);",
                "failed_line": 112
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateCallInLoopVars1",
                "src": "  public void testMutateCallInLoopVars1() {\n    // baseline: outside a loop, the constant remains constant.\n    boolean callInLoop = false;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1=bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n    // ... in a loop, the constant-ness is removed.\n    // TODO(johnlenz): update this test to look for the const annotation.\n    callInLoop = true;\n    helperMutate(\n        \"function foo(a){var B = bar(); a;}; foo(1);\",\n        \"{var B$$inline_1 = bar(); 1;}\",\n        \"foo\", null, false, callInLoop);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var B$$inline_1=bar();1\nResult: var B$$inline_3=bar();1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME B$$inline_1 1 [source_file:  [testcode] ]\n            CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                NAME bar 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME B$$inline_3 1 [source_file:  [testcode] ]\n            CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                NAME bar 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME B$$inline_1 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME B$$inline_3 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateCallInLoopVars1(FunctionToBlockMutatorTest.java:151)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var B$$inline_1=bar();1\nResult: var B$$inline_3=bar();1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME B$$inline_1 1 [source_file:  [testcode] ]\n            CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                NAME bar 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME B$$inline_3 1 [source_file:  [testcode] ]\n            CALL 1 [free_call: 1] [source_file:  [testcode] ]\n                NAME bar 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME B$$inline_1 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME B$$inline_3 1 [source_file:  [testcode] ]\n    CALL 1 [free_call: 1] [source_file:  [testcode] ]\n        NAME bar 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateCallInLoopVars1(FunctionToBlockMutatorTest.java:151)  helperMutate(        \"function foo(a){var B = bar(); a;}; foo(1);\",        \"{var B$$inline_1=bar(); 1;}\",        \"foo\", null, false, callInLoop);",
                "failed_line": 151
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateInitializeUninitializedVars1",
                "src": "  public void testMutateInitializeUninitializedVars1() {\n    helperMutate(\n        \"function foo(a){var b;return a;}; foo(1);\",\n        \"{var b$$inline_1=void 0;1}\",\n        \"foo\", null, false, true);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var b$$inline_1=void 0;1\nResult: var b$$inline_3=void 0;1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME b$$inline_1 1 [source_file:  [testcode] ]\n            VOID 1 [source_file:  [testcode] ]\n                NUMBER 0.0 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME b$$inline_3 1 [source_file:  [testcode] ]\n            VOID 1 [source_file:  [testcode] ]\n                NUMBER 0.0 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateInitializeUninitializedVars1(FunctionToBlockMutatorTest.java:129)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var b$$inline_1=void 0;1\nResult: var b$$inline_3=void 0;1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME b$$inline_1 1 [source_file:  [testcode] ]\n            VOID 1 [source_file:  [testcode] ]\n                NUMBER 0.0 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME b$$inline_3 1 [source_file:  [testcode] ]\n            VOID 1 [source_file:  [testcode] ]\n                NUMBER 0.0 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        NUMBER 1.0 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME b$$inline_1 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME b$$inline_3 1 [source_file:  [testcode] ]\n    VOID 1 [source_file:  [testcode] ]\n        NUMBER 0.0 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateInitializeUninitializedVars1(FunctionToBlockMutatorTest.java:129)  helperMutate(        \"function foo(a){var b;return a;}; foo(1);\",        \"{var b$$inline_1=void 0;1}\",        \"foo\", null, false, true);",
                "failed_line": 129
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateInitializeUninitializedVars2",
                "src": "  public void testMutateInitializeUninitializedVars2() {\n    helperMutate(\n        \"function foo(a){for(var b in c)return a;}; foo(1);\",\n        \"{JSCompiler_inline_label_foo_2:\" +\n          \"{\" +\n            \"for(var b$$inline_1 in c){\" +\n                \"1;break JSCompiler_inline_label_foo_2\" +\n             \"}\" +\n          \"}\" +\n        \"}\",\n        \"foo\", null);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: JSCompiler_inline_label_foo_2:for(var b$$inline_1 in c){1;break JSCompiler_inline_label_foo_2}\nResult: JSCompiler_inline_label_foo_4:for(var b$$inline_3 in c){1;break JSCompiler_inline_label_foo_4}\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    LABEL 1 [source_file:  [testcode] ]\n        LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FOR 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                NAME c 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    EXPR_RESULT 1 [source_file:  [testcode] ]\n                        NUMBER 1.0 1 [source_file:  [testcode] ]\n                    BREAK 1 [source_file:  [testcode] ]\n                        LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    LABEL 1 [source_file:  [testcode] ]\n        LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FOR 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_3 1 [source_file:  [testcode] ]\n                NAME c 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    EXPR_RESULT 1 [source_file:  [testcode] ]\n                        NUMBER 1.0 1 [source_file:  [testcode] ]\n                    BREAK 1 [source_file:  [testcode] ]\n                        LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateInitializeUninitializedVars2(FunctionToBlockMutatorTest.java:136)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: JSCompiler_inline_label_foo_2:for(var b$$inline_1 in c){1;break JSCompiler_inline_label_foo_2}\nResult: JSCompiler_inline_label_foo_4:for(var b$$inline_3 in c){1;break JSCompiler_inline_label_foo_4}\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    LABEL 1 [source_file:  [testcode] ]\n        LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FOR 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_1 1 [source_file:  [testcode] ]\n                NAME c 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    EXPR_RESULT 1 [source_file:  [testcode] ]\n                        NUMBER 1.0 1 [source_file:  [testcode] ]\n                    BREAK 1 [source_file:  [testcode] ]\n                        LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    LABEL 1 [source_file:  [testcode] ]\n        LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n            FOR 1 [source_file:  [testcode] ]\n                VAR 1 [source_file:  [testcode] ]\n                    NAME b$$inline_3 1 [source_file:  [testcode] ]\n                NAME c 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n                    EXPR_RESULT 1 [source_file:  [testcode] ]\n                        NUMBER 1.0 1 [source_file:  [testcode] ]\n                    BREAK 1 [source_file:  [testcode] ]\n                        LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_foo_2 1 [source_file:  [testcode] ]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_foo_4 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)  helperMutate(code, expectedResult, fnName, resultName, false, false);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateInitializeUninitializedVars2(FunctionToBlockMutatorTest.java:136)  helperMutate(        \"function foo(a){for(var b in c)return a;}; foo(1);\",        \"{JSCompiler_inline_label_foo_2:\" +          \"{\" +            \"for(var b$$inline_1 in c){\" +                \"1;break JSCompiler_inline_label_foo_2\" +             \"}\" +          \"}\" +        \"}\",        \"foo\", null);",
                "failed_line": 136
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutateFunctionDefinition",
                "src": "  public void testMutateFunctionDefinition() {\n     // function declarations are rewritten as function\n     // expressions\n     helperMutate(\n        \"function foo(a){function g(){}}; foo(1);\",\n        \"{var g$$inline_1=function(){};}\",\n        \"foo\", null);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var g$$inline_1=function(){}\nResult: var g$$inline_3=function(){}\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME g$$inline_1 1 [source_file:  [testcode] ]\n            FUNCTION  1 [source_file:  [testcode] ]\n                NAME  1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME g$$inline_3 1 [source_file:  [testcode] ]\n            FUNCTION  1 [source_file:  [testcode] ]\n                NAME  1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME g$$inline_1 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME g$$inline_3 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateFunctionDefinition(FunctionToBlockMutatorTest.java:167)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var g$$inline_1=function(){}\nResult: var g$$inline_3=function(){}\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME g$$inline_1 1 [source_file:  [testcode] ]\n            FUNCTION  1 [source_file:  [testcode] ]\n                NAME  1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME g$$inline_3 1 [source_file:  [testcode] ]\n            FUNCTION  1 [source_file:  [testcode] ]\n                NAME  1 [source_file:  [testcode] ]\n                LP 1 [source_file:  [testcode] ]\n                BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME g$$inline_1 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME g$$inline_3 1 [source_file:  [testcode] ]\n    FUNCTION  1 [source_file:  [testcode] ]\n        NAME  1 [source_file:  [testcode] ]\n        LP 1 [source_file:  [testcode] ]\n        BLOCK 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)  helperMutate(code, expectedResult, fnName, resultName, false, false);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutateFunctionDefinition(FunctionToBlockMutatorTest.java:167)  helperMutate(        \"function foo(a){function g(){}}; foo(1);\",        \"{var g$$inline_1=function(){};}\",        \"foo\", null);",
                "failed_line": 167
            },
            "com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8": {
                "path": "test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java",
                "function_name": "testMutate8",
                "src": "  public void testMutate8() {\n    // Parameter has side-effects.\n    helperMutate(\n        \"function foo(a){return a+a;}; foo(x++);\",\n        \"{var a$$inline_0 = x++;\" +\n            \"a$$inline_0 + a$$inline_0;}\",\n        \"foo\", null);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=x++;a$$inline_0+a$$inline_0\nResult: var a$$inline_1=x++;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        ADD 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        ADD 1 [source_file:  [testcode] ]\n            NAME a$$inline_1 1 [source_file:  [testcode] ]\n            NAME a$$inline_1 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$1.call(FunctionToBlockMutatorTest.java:240)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest$TestCallback.visit(FunctionToBlockMutatorTest.java:279)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutate8(FunctionToBlockMutatorTest.java:121)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=x++;a$$inline_0+a$$inline_0\nResult: var a$$inline_1=x++;a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_0 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        ADD 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n            NAME a$$inline_0 1 [source_file:  [testcode] ]\n\n\nTree2:\nBLOCK 1 [source_file:  [testcode] ]\n    VAR 1 [source_file:  [testcode] ]\n        NAME a$$inline_1 1 [source_file:  [testcode] ]\n            INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n                NAME x 1 [source_file:  [testcode] ]\n    EXPR_RESULT 1 [source_file:  [testcode] ]\n        ADD 1 [source_file:  [testcode] ]\n            NAME a$$inline_1 1 [source_file:  [testcode] ]\n            NAME a$$inline_1 1 [source_file:  [testcode] ]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file:  [testcode] ]\n    INC 1 [incrdecr: 1] [source_file:  [testcode] ]\n        NAME x 1 [source_file:  [testcode] ]\n\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:498)  callback.visit(this, n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:491)  traverseBranch(child, n);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:277)  traverseBranch(root, null);\n\tat com.google.javascript.jscomp.NodeTraversal.traverse(NodeTraversal.java:455)  t.traverse(root);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:249)  NodeTraversal.traverse(compiler, tree, test);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.helperMutate(FunctionToBlockMutatorTest.java:189)  helperMutate(code, expectedResult, fnName, resultName, false, false);\n\tat com.google.javascript.jscomp.FunctionToBlockMutatorTest.testMutate8(FunctionToBlockMutatorTest.java:121)  helperMutate(        \"function foo(a){return a+a;}; foo(x++);\",        \"{var a$$inline_0 = x++;\" +            \"a$$inline_0 + a$$inline_0;}\",        \"foo\", null);",
                "failed_line": 121
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testLoopWithFunctionWithFunction",
                "src": "  public void testLoopWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariableInLoop_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"    var arr = [1, 2, 3, 4, 5];\\n\" +\n        \"    for (var i = 0, l = arr.length; i < l; i++) {\\n\" +\n        \"      var j = arr[i];\\n\" +\n        // don't inline this function, because the correct behavior depends\n        // captured values.\n        \"      (function() {\\n\" +\n        \"        var k = j;\\n\" +\n        \"        setTimeout(function() { result += k; }, 5 * i);\\n\" +\n        \"      })();\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariableInLoop_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\" +\n        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +\n        \"  var i$$inline_1=0;\\n\" +\n        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +\n        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +\n        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +\n        \"    (function(){\\n\" +\n        \"       var k$$inline_4=j$$inline_3;\\n\" +\n        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +\n        \"     })()\\n\" +\n        \"  }\\n\" +\n        \"  }\\n\" +\n        \"}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function _testLocalVariableInLoop_(){var result=0;var arr$$inline_0=[1,2,3,4,5];var i$$inline_1=0;var l$$inline_2=arr$$inline_0.length;for(;i$$inline_1<l$$inline_2;i$$inline_1++){var j$$inline_3=arr$$inline_0[i$$inline_1];(function(){var k$$inline_4=j$$inline_3;setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)})()}}\nResult: function _testLocalVariableInLoop_(){var result=0;var arr$$inline_4=[1,2,3,4,5];var i$$inline_5=0;var l$$inline_6=arr$$inline_4.length;for(;i$$inline_5<l$$inline_6;i$$inline_5++){var j$$inline_7=arr$$inline_4[i$$inline_5];(function(){var k$$inline_8=j$$inline_7;setTimeout(function(){result+=k$$inline_8},5*i$$inline_5)})()}}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _testLocalVariableInLoop_ 1 [source_file: expected0]\n            NAME _testLocalVariableInLoop_ 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME result 2 [source_file: expected0]\n                        NUMBER 0.0 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 3 [source_file: expected0]\n                        NAME arr$$inline_0 3 [source_file: expected0]\n                            ARRAYLIT 3 [source_file: expected0]\n                                NUMBER 1.0 3 [source_file: expected0]\n                                NUMBER 2.0 3 [source_file: expected0]\n                                NUMBER 3.0 3 [source_file: expected0]\n                                NUMBER 4.0 3 [source_file: expected0]\n                                NUMBER 5.0 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME i$$inline_1 4 [source_file: expected0]\n                            NUMBER 0.0 4 [source_file: expected0]\n                    VAR 5 [source_file: expected0]\n                        NAME l$$inline_2 5 [source_file: expected0]\n                            GETPROP 5 [source_file: expected0]\n                                NAME arr$$inline_0 5 [source_file: expected0]\n                                STRING length 5 [source_file: expected0]\n                    FOR 6 [source_file: expected0]\n                        EMPTY 6 [source_file: expected0]\n                        LT 6 [source_file: expected0]\n                            NAME i$$inline_1 6 [source_file: expected0]\n                            NAME l$$inline_2 6 [source_file: expected0]\n                        INC 6 [incrdecr: 1] [source_file: expected0]\n                            NAME i$$inline_1 6 [source_file: expected0]\n                        BLOCK 6 [source_file: expected0]\n                            VAR 7 [source_file: expected0]\n                                NAME j$$inline_3 7 [source_file: expected0]\n                                    GETELEM 7 [source_file: expected0]\n                                        NAME arr$$inline_0 7 [source_file: expected0]\n                                        NAME i$$inline_1 7 [source_file: expected0]\n                            EXPR_RESULT 8 [source_file: expected0]\n                                CALL 11 [free_call: 1] [source_file: expected0]\n                                    FUNCTION  8 [parenthesized: true] [source_file: expected0]\n                                        NAME  8 [source_file: expected0]\n                                        LP 8 [source_file: expected0]\n                                        BLOCK 8 [source_file: expected0]\n                                            VAR 9 [source_file: expected0]\n                                                NAME k$$inline_4 9 [source_file: expected0]\n                                                    NAME j$$inline_3 9 [source_file: expected0]\n                                            EXPR_RESULT 10 [source_file: expected0]\n                                                CALL 10 [free_call: 1] [source_file: expected0]\n                                                    NAME setTimeout 10 [source_file: expected0]\n                                                    FUNCTION  10 [source_file: expected0]\n                                                        NAME  10 [source_file: expected0]\n                                                        LP 10 [source_file: expected0]\n                                                        BLOCK 10 [source_file: expected0]\n                                                            EXPR_RESULT 10 [source_file: expected0]\n                                                                ASSIGN_ADD 10 [source_file: expected0]\n                                                                    NAME result 10 [source_file: expected0]\n                                                                    NAME k$$inline_4 10 [source_file: expected0]\n                                                    MUL 10 [source_file: expected0]\n                                                        NUMBER 5.0 10 [source_file: expected0]\n                                                        NAME i$$inline_1 10 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _testLocalVariableInLoop_ 1 [source_file: testcode]\n            NAME _testLocalVariableInLoop_ 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 2 [source_file: testcode]\n                    NAME result 2 [source_file: testcode]\n                        NUMBER 0.0 2 [source_file: testcode]\n                BLOCK 3 [source_file: testcode]\n                    VAR 4 [source_file: testcode]\n                        NAME arr$$inline_4 4 [source_file: testcode]\n                            ARRAYLIT 4 [source_file: testcode]\n                                NUMBER 1.0 4 [source_file: testcode]\n                                NUMBER 2.0 4 [source_file: testcode]\n                                NUMBER 3.0 4 [source_file: testcode]\n                                NUMBER 4.0 4 [source_file: testcode]\n                                NUMBER 5.0 4 [source_file: testcode]\n                    VAR 3\n                        NAME i$$inline_5 5 [source_file: testcode]\n                            NUMBER 0.0 5 [source_file: testcode]\n                    VAR 5 [source_file: testcode]\n                        NAME l$$inline_6 5 [source_file: testcode]\n                            GETPROP 5 [source_file: testcode]\n                                NAME arr$$inline_4 5 [source_file: testcode]\n                                STRING length 5 [source_file: testcode]\n                    FOR 5 [source_file: testcode]\n                        EMPTY 5 [source_file: testcode]\n                        LT 5 [source_file: testcode]\n                            NAME i$$inline_5 5 [source_file: testcode]\n                            NAME l$$inline_6 5 [source_file: testcode]\n                        INC 5 [incrdecr: 1] [source_file: testcode]\n                            NAME i$$inline_5 5 [source_file: testcode]\n                        BLOCK 5 [source_file: testcode]\n                            VAR 6 [source_file: testcode]\n                                NAME j$$inline_7 6 [source_file: testcode]\n                                    GETELEM 6 [source_file: testcode]\n                                        NAME arr$$inline_4 6 [source_file: testcode]\n                                        NAME i$$inline_5 6 [source_file: testcode]\n                            EXPR_RESULT 7 [source_file: testcode]\n                                CALL 10 [free_call: 1] [source_file: testcode]\n                                    FUNCTION  7 [parenthesized: true] [source_file: testcode]\n                                        NAME  7 [source_file: testcode]\n                                        LP 7 [source_file: testcode]\n                                        BLOCK 7 [source_file: testcode]\n                                            VAR 8 [source_file: testcode]\n                                                NAME k$$inline_8 8 [source_file: testcode]\n                                                    NAME j$$inline_7 8 [source_file: testcode]\n                                            EXPR_RESULT 9 [source_file: testcode]\n                                                CALL 9 [free_call: 1] [source_file: testcode]\n                                                    NAME setTimeout 9 [source_file: testcode]\n                                                    FUNCTION  9 [source_file: testcode]\n                                                        NAME  9 [source_file: testcode]\n                                                        LP 9 [source_file: testcode]\n                                                        BLOCK 9 [source_file: testcode]\n                                                            EXPR_RESULT 9 [source_file: testcode]\n                                                                ASSIGN_ADD 9 [source_file: testcode]\n                                                                    NAME result 9 [source_file: testcode]\n                                                                    NAME k$$inline_8 9 [source_file: testcode]\n                                                    MUL 9 [source_file: testcode]\n                                                        NUMBER 5.0 9 [source_file: testcode]\n                                                        NAME i$$inline_5 9 [source_file: testcode]\n\n\nSubtree1: NAME arr$$inline_0 3 [source_file: expected0]\n    ARRAYLIT 3 [source_file: expected0]\n        NUMBER 1.0 3 [source_file: expected0]\n        NUMBER 2.0 3 [source_file: expected0]\n        NUMBER 3.0 3 [source_file: expected0]\n        NUMBER 4.0 3 [source_file: expected0]\n        NUMBER 5.0 3 [source_file: expected0]\n\n\nSubtree2: NAME arr$$inline_4 4 [source_file: testcode]\n    ARRAYLIT 4 [source_file: testcode]\n        NUMBER 1.0 4 [source_file: testcode]\n        NUMBER 2.0 4 [source_file: testcode]\n        NUMBER 3.0 4 [source_file: testcode]\n        NUMBER 4.0 4 [source_file: testcode]\n        NUMBER 5.0 4 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testLoopWithFunctionWithFunction(InlineFunctionsTest.java:2201)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function _testLocalVariableInLoop_(){var result=0;var arr$$inline_0=[1,2,3,4,5];var i$$inline_1=0;var l$$inline_2=arr$$inline_0.length;for(;i$$inline_1<l$$inline_2;i$$inline_1++){var j$$inline_3=arr$$inline_0[i$$inline_1];(function(){var k$$inline_4=j$$inline_3;setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)})()}}\nResult: function _testLocalVariableInLoop_(){var result=0;var arr$$inline_4=[1,2,3,4,5];var i$$inline_5=0;var l$$inline_6=arr$$inline_4.length;for(;i$$inline_5<l$$inline_6;i$$inline_5++){var j$$inline_7=arr$$inline_4[i$$inline_5];(function(){var k$$inline_8=j$$inline_7;setTimeout(function(){result+=k$$inline_8},5*i$$inline_5)})()}}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _testLocalVariableInLoop_ 1 [source_file: expected0]\n            NAME _testLocalVariableInLoop_ 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME result 2 [source_file: expected0]\n                        NUMBER 0.0 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 3 [source_file: expected0]\n                        NAME arr$$inline_0 3 [source_file: expected0]\n                            ARRAYLIT 3 [source_file: expected0]\n                                NUMBER 1.0 3 [source_file: expected0]\n                                NUMBER 2.0 3 [source_file: expected0]\n                                NUMBER 3.0 3 [source_file: expected0]\n                                NUMBER 4.0 3 [source_file: expected0]\n                                NUMBER 5.0 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME i$$inline_1 4 [source_file: expected0]\n                            NUMBER 0.0 4 [source_file: expected0]\n                    VAR 5 [source_file: expected0]\n                        NAME l$$inline_2 5 [source_file: expected0]\n                            GETPROP 5 [source_file: expected0]\n                                NAME arr$$inline_0 5 [source_file: expected0]\n                                STRING length 5 [source_file: expected0]\n                    FOR 6 [source_file: expected0]\n                        EMPTY 6 [source_file: expected0]\n                        LT 6 [source_file: expected0]\n                            NAME i$$inline_1 6 [source_file: expected0]\n                            NAME l$$inline_2 6 [source_file: expected0]\n                        INC 6 [incrdecr: 1] [source_file: expected0]\n                            NAME i$$inline_1 6 [source_file: expected0]\n                        BLOCK 6 [source_file: expected0]\n                            VAR 7 [source_file: expected0]\n                                NAME j$$inline_3 7 [source_file: expected0]\n                                    GETELEM 7 [source_file: expected0]\n                                        NAME arr$$inline_0 7 [source_file: expected0]\n                                        NAME i$$inline_1 7 [source_file: expected0]\n                            EXPR_RESULT 8 [source_file: expected0]\n                                CALL 11 [free_call: 1] [source_file: expected0]\n                                    FUNCTION  8 [parenthesized: true] [source_file: expected0]\n                                        NAME  8 [source_file: expected0]\n                                        LP 8 [source_file: expected0]\n                                        BLOCK 8 [source_file: expected0]\n                                            VAR 9 [source_file: expected0]\n                                                NAME k$$inline_4 9 [source_file: expected0]\n                                                    NAME j$$inline_3 9 [source_file: expected0]\n                                            EXPR_RESULT 10 [source_file: expected0]\n                                                CALL 10 [free_call: 1] [source_file: expected0]\n                                                    NAME setTimeout 10 [source_file: expected0]\n                                                    FUNCTION  10 [source_file: expected0]\n                                                        NAME  10 [source_file: expected0]\n                                                        LP 10 [source_file: expected0]\n                                                        BLOCK 10 [source_file: expected0]\n                                                            EXPR_RESULT 10 [source_file: expected0]\n                                                                ASSIGN_ADD 10 [source_file: expected0]\n                                                                    NAME result 10 [source_file: expected0]\n                                                                    NAME k$$inline_4 10 [source_file: expected0]\n                                                    MUL 10 [source_file: expected0]\n                                                        NUMBER 5.0 10 [source_file: expected0]\n                                                        NAME i$$inline_1 10 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _testLocalVariableInLoop_ 1 [source_file: testcode]\n            NAME _testLocalVariableInLoop_ 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 2 [source_file: testcode]\n                    NAME result 2 [source_file: testcode]\n                        NUMBER 0.0 2 [source_file: testcode]\n                BLOCK 3 [source_file: testcode]\n                    VAR 4 [source_file: testcode]\n                        NAME arr$$inline_4 4 [source_file: testcode]\n                            ARRAYLIT 4 [source_file: testcode]\n                                NUMBER 1.0 4 [source_file: testcode]\n                                NUMBER 2.0 4 [source_file: testcode]\n                                NUMBER 3.0 4 [source_file: testcode]\n                                NUMBER 4.0 4 [source_file: testcode]\n                                NUMBER 5.0 4 [source_file: testcode]\n                    VAR 3\n                        NAME i$$inline_5 5 [source_file: testcode]\n                            NUMBER 0.0 5 [source_file: testcode]\n                    VAR 5 [source_file: testcode]\n                        NAME l$$inline_6 5 [source_file: testcode]\n                            GETPROP 5 [source_file: testcode]\n                                NAME arr$$inline_4 5 [source_file: testcode]\n                                STRING length 5 [source_file: testcode]\n                    FOR 5 [source_file: testcode]\n                        EMPTY 5 [source_file: testcode]\n                        LT 5 [source_file: testcode]\n                            NAME i$$inline_5 5 [source_file: testcode]\n                            NAME l$$inline_6 5 [source_file: testcode]\n                        INC 5 [incrdecr: 1] [source_file: testcode]\n                            NAME i$$inline_5 5 [source_file: testcode]\n                        BLOCK 5 [source_file: testcode]\n                            VAR 6 [source_file: testcode]\n                                NAME j$$inline_7 6 [source_file: testcode]\n                                    GETELEM 6 [source_file: testcode]\n                                        NAME arr$$inline_4 6 [source_file: testcode]\n                                        NAME i$$inline_5 6 [source_file: testcode]\n                            EXPR_RESULT 7 [source_file: testcode]\n                                CALL 10 [free_call: 1] [source_file: testcode]\n                                    FUNCTION  7 [parenthesized: true] [source_file: testcode]\n                                        NAME  7 [source_file: testcode]\n                                        LP 7 [source_file: testcode]\n                                        BLOCK 7 [source_file: testcode]\n                                            VAR 8 [source_file: testcode]\n                                                NAME k$$inline_8 8 [source_file: testcode]\n                                                    NAME j$$inline_7 8 [source_file: testcode]\n                                            EXPR_RESULT 9 [source_file: testcode]\n                                                CALL 9 [free_call: 1] [source_file: testcode]\n                                                    NAME setTimeout 9 [source_file: testcode]\n                                                    FUNCTION  9 [source_file: testcode]\n                                                        NAME  9 [source_file: testcode]\n                                                        LP 9 [source_file: testcode]\n                                                        BLOCK 9 [source_file: testcode]\n                                                            EXPR_RESULT 9 [source_file: testcode]\n                                                                ASSIGN_ADD 9 [source_file: testcode]\n                                                                    NAME result 9 [source_file: testcode]\n                                                                    NAME k$$inline_8 9 [source_file: testcode]\n                                                    MUL 9 [source_file: testcode]\n                                                        NUMBER 5.0 9 [source_file: testcode]\n                                                        NAME i$$inline_5 9 [source_file: testcode]\n\n\nSubtree1: NAME arr$$inline_0 3 [source_file: expected0]\n    ARRAYLIT 3 [source_file: expected0]\n        NUMBER 1.0 3 [source_file: expected0]\n        NUMBER 2.0 3 [source_file: expected0]\n        NUMBER 3.0 3 [source_file: expected0]\n        NUMBER 4.0 3 [source_file: expected0]\n        NUMBER 5.0 3 [source_file: expected0]\n\n\nSubtree2: NAME arr$$inline_4 4 [source_file: testcode]\n    ARRAYLIT 4 [source_file: testcode]\n        NUMBER 1.0 4 [source_file: testcode]\n        NUMBER 2.0 4 [source_file: testcode]\n        NUMBER 3.0 4 [source_file: testcode]\n        NUMBER 4.0 4 [source_file: testcode]\n        NUMBER 5.0 4 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testLoopWithFunctionWithFunction(InlineFunctionsTest.java:2201)  test(\"function _testLocalVariableInLoop_() {\\n\" +        \"  var result = 0;\\n\" +        \"  function foo() {\\n\" +        \"    var arr = [1, 2, 3, 4, 5];\\n\" +        \"    for (var i = 0, l = arr.length; i < l; i++) {\\n\" +        \"      var j = arr[i];\\n\" +        // don't inline this function, because the correct behavior depends        // captured values.        \"      (function() {\\n\" +        \"        var k = j;\\n\" +        \"        setTimeout(function() { result += k; }, 5 * i);\\n\" +        \"      })();\\n\" +        \"    }\\n\" +        \"  }\\n\" +        \"  foo();\\n\" +        \"}\",        \"function _testLocalVariableInLoop_(){\\n\" +        \"  var result=0;\\n\" +        \"  {\" +        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +        \"  var i$$inline_1=0;\\n\" +        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +        \"    (function(){\\n\" +        \"       var k$$inline_4=j$$inline_3;\\n\" +        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +        \"     })()\\n\" +        \"  }\\n\" +        \"  }\\n\" +        \"}\");",
                "failed_line": 2201
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables16",
                "src": "  public void testShadowVariables16() {\n    assumeMinimumCapture = false;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    // Inline functions defined as a child of the CALL node.\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a=3;var a$$inline_0=5;a\nResult: var a=3;var a$$inline_1=5;a\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 3.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 5.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 3.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 5.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 5.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 5.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables16(InlineFunctionsTest.java:845)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a=3;var a$$inline_0=5;a\nResult: var a=3;var a$$inline_1=5;a\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 3.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 5.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 3.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 5.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 5.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 5.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables16(InlineFunctionsTest.java:845)  test(\"var a=3;\" +         \"function foo(){return a}\" +         \"(function(){var a=5;(function(){foo()})()})()\",         \"var a=3;\" +         \"{var a$$inline_0=5;{a}}\"         );",
                "failed_line": 845
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables18",
                "src": "  public void testShadowVariables18() {\n    test(\"var a=0;\" +\n        \"function bar(){return a+a}\" +\n        \"function foo(){var a=3;return bar()}\" +\n        \"function _goo(){var a=2;var x=foo();}\",\n\n        \"var a=0;\" +\n        \"function _goo(){var a$$2=2;var x;\" +\n        \"{var a$$inline_0=3;x=a+a}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_0=3;x=a+a}\nResult: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_1=3;x=a+a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _goo 1 [source_file: expected0]\n            NAME _goo 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$2 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME x 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 3.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME x 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NAME a 1 [source_file: expected0]\n                                NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _goo 1 [source_file: testcode]\n            NAME _goo 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$2 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME x 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 3.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME x 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NAME a 1 [source_file: testcode]\n                                NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 3.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 3.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables18(InlineFunctionsTest.java:874)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_0=3;x=a+a}\nResult: var a=0;function _goo(){var a$$2=2;var x;var a$$inline_1=3;x=a+a}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _goo 1 [source_file: expected0]\n            NAME _goo 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$2 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME x 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 3.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME x 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NAME a 1 [source_file: expected0]\n                                NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _goo 1 [source_file: testcode]\n            NAME _goo 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$2 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME x 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 3.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME x 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NAME a 1 [source_file: testcode]\n                                NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 3.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 3.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables18(InlineFunctionsTest.java:874)  test(\"var a=0;\" +        \"function bar(){return a+a}\" +        \"function foo(){var a=3;return bar()}\" +        \"function _goo(){var a=2;var x=foo();}\",        \"var a=0;\" +        \"function _goo(){var a$$2=2;var x;\" +        \"{var a$$inline_0=3;x=a+a}}\");",
                "failed_line": 874
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testCostBasedInlining11",
                "src": "  public void testCostBasedInlining11() {\n    // With block inlining\n    test(\"function f(a){return a + a;}\" +\n         \"var a = f(f(1))\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1;\" +\n         \"a=a$$inline_0+a$$inline_0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a;var a$$inline_0=1+1;a=a$$inline_0+a$$inline_0\nResult: var a;var a$$inline_1=1+1;a=a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining11(InlineFunctionsTest.java:996)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a;var a$$inline_0=1+1;a=a$$inline_0+a$$inline_0\nResult: var a;var a$$inline_1=1+1;a=a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining11(InlineFunctionsTest.java:996)  test(\"function f(a){return a + a;}\" +         \"var a = f(f(1))\",         \"var a;\" +         \"{var a$$inline_0=1+1;\" +         \"a=a$$inline_0+a$$inline_0}\");",
                "failed_line": 996
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testMixedModeInliningCosting3",
                "src": "  public void testMixedModeInliningCosting3() {\n    // Do inline here because the function definition can be eliminated.\n    test(\n        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}\" +\n        \"foo(1,2);\" +\n        \"foo(2,3,x())\",\n\n        \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +\n        \"{var JSCompiler_inline_anon_param_2=x();\" +\n        \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: 1+2+1+2+4+5+6+7+8+9+1+2+3+10;var JSCompiler_inline_anon_param_2=x();2+3+2+3+4+5+6+7+8+9+1+2+3+10\nResult: 1+2+1+2+4+5+6+7+8+9+1+2+3+10;var JSCompiler_inline_anon_param_4=x();2+3+2+3+4+5+6+7+8+9+1+2+3+10\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ADD 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    ADD 1 [source_file: expected0]\n                                        ADD 1 [source_file: expected0]\n                                            ADD 1 [source_file: expected0]\n                                                ADD 1 [source_file: expected0]\n                                                    ADD 1 [source_file: expected0]\n                                                        ADD 1 [source_file: expected0]\n                                                            ADD 1 [source_file: expected0]\n                                                                NUMBER 1.0 1 [source_file: expected0]\n                                                                NUMBER 2.0 1 [source_file: expected0]\n                                                            NUMBER 1.0 1 [source_file: expected0]\n                                                        NUMBER 2.0 1 [source_file: expected0]\n                                                    NUMBER 4.0 1 [source_file: expected0]\n                                                NUMBER 5.0 1 [source_file: expected0]\n                                            NUMBER 6.0 1 [source_file: expected0]\n                                        NUMBER 7.0 1 [source_file: expected0]\n                                    NUMBER 8.0 1 [source_file: expected0]\n                                NUMBER 9.0 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 3.0 1 [source_file: expected0]\n                NUMBER 10.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_anon_param_2 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME x 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    ADD 1 [source_file: expected0]\n                                        ADD 1 [source_file: expected0]\n                                            ADD 1 [source_file: expected0]\n                                                ADD 1 [source_file: expected0]\n                                                    ADD 1 [source_file: expected0]\n                                                        ADD 1 [source_file: expected0]\n                                                            ADD 1 [source_file: expected0]\n                                                                ADD 1 [source_file: expected0]\n                                                                    NUMBER 2.0 1 [source_file: expected0]\n                                                                    NUMBER 3.0 1 [source_file: expected0]\n                                                                NUMBER 2.0 1 [source_file: expected0]\n                                                            NUMBER 3.0 1 [source_file: expected0]\n                                                        NUMBER 4.0 1 [source_file: expected0]\n                                                    NUMBER 5.0 1 [source_file: expected0]\n                                                NUMBER 6.0 1 [source_file: expected0]\n                                            NUMBER 7.0 1 [source_file: expected0]\n                                        NUMBER 8.0 1 [source_file: expected0]\n                                    NUMBER 9.0 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        NUMBER 3.0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        EXPR_RESULT 1 [source_file: testcode]\n            ADD 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    ADD 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            ADD 1 [source_file: testcode]\n                                                ADD 1 [source_file: testcode]\n                                                    ADD 1 [source_file: testcode]\n                                                        ADD 1 [source_file: testcode]\n                                                            ADD 1 [source_file: testcode]\n                                                                NUMBER 1.0 1 [source_file: testcode]\n                                                                NUMBER 2.0 1 [source_file: testcode]\n                                                            NUMBER 1.0 1 [source_file: testcode]\n                                                        NUMBER 2.0 1 [source_file: testcode]\n                                                    NUMBER 4.0 1 [source_file: testcode]\n                                                NUMBER 5.0 1 [source_file: testcode]\n                                            NUMBER 6.0 1 [source_file: testcode]\n                                        NUMBER 7.0 1 [source_file: testcode]\n                                    NUMBER 8.0 1 [source_file: testcode]\n                                NUMBER 9.0 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 3.0 1 [source_file: testcode]\n                NUMBER 10.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_anon_param_4 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME x 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    ADD 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            ADD 1 [source_file: testcode]\n                                                ADD 1 [source_file: testcode]\n                                                    ADD 1 [source_file: testcode]\n                                                        ADD 1 [source_file: testcode]\n                                                            ADD 1 [source_file: testcode]\n                                                                ADD 1 [source_file: testcode]\n                                                                    NUMBER 2.0 1 [source_file: testcode]\n                                                                    NUMBER 3.0 1 [source_file: testcode]\n                                                                NUMBER 2.0 1 [source_file: testcode]\n                                                            NUMBER 3.0 1 [source_file: testcode]\n                                                        NUMBER 4.0 1 [source_file: testcode]\n                                                    NUMBER 5.0 1 [source_file: testcode]\n                                                NUMBER 6.0 1 [source_file: testcode]\n                                            NUMBER 7.0 1 [source_file: testcode]\n                                        NUMBER 8.0 1 [source_file: testcode]\n                                    NUMBER 9.0 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        NUMBER 3.0 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n\n\nSubtree1: NAME JSCompiler_inline_anon_param_2 1 [source_file: expected0]\n    CALL 1 [free_call: 1] [source_file: expected0]\n        NAME x 1 [source_file: expected0]\n\n\nSubtree2: NAME JSCompiler_inline_anon_param_4 1 [source_file: testcode]\n    CALL 1 [free_call: 1] [source_file: testcode]\n        NAME x 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting3(InlineFunctionsTest.java:529)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: 1+2+1+2+4+5+6+7+8+9+1+2+3+10;var JSCompiler_inline_anon_param_2=x();2+3+2+3+4+5+6+7+8+9+1+2+3+10\nResult: 1+2+1+2+4+5+6+7+8+9+1+2+3+10;var JSCompiler_inline_anon_param_4=x();2+3+2+3+4+5+6+7+8+9+1+2+3+10\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ADD 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    ADD 1 [source_file: expected0]\n                                        ADD 1 [source_file: expected0]\n                                            ADD 1 [source_file: expected0]\n                                                ADD 1 [source_file: expected0]\n                                                    ADD 1 [source_file: expected0]\n                                                        ADD 1 [source_file: expected0]\n                                                            ADD 1 [source_file: expected0]\n                                                                NUMBER 1.0 1 [source_file: expected0]\n                                                                NUMBER 2.0 1 [source_file: expected0]\n                                                            NUMBER 1.0 1 [source_file: expected0]\n                                                        NUMBER 2.0 1 [source_file: expected0]\n                                                    NUMBER 4.0 1 [source_file: expected0]\n                                                NUMBER 5.0 1 [source_file: expected0]\n                                            NUMBER 6.0 1 [source_file: expected0]\n                                        NUMBER 7.0 1 [source_file: expected0]\n                                    NUMBER 8.0 1 [source_file: expected0]\n                                NUMBER 9.0 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 3.0 1 [source_file: expected0]\n                NUMBER 10.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_anon_param_2 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME x 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                ADD 1 [source_file: expected0]\n                                    ADD 1 [source_file: expected0]\n                                        ADD 1 [source_file: expected0]\n                                            ADD 1 [source_file: expected0]\n                                                ADD 1 [source_file: expected0]\n                                                    ADD 1 [source_file: expected0]\n                                                        ADD 1 [source_file: expected0]\n                                                            ADD 1 [source_file: expected0]\n                                                                ADD 1 [source_file: expected0]\n                                                                    NUMBER 2.0 1 [source_file: expected0]\n                                                                    NUMBER 3.0 1 [source_file: expected0]\n                                                                NUMBER 2.0 1 [source_file: expected0]\n                                                            NUMBER 3.0 1 [source_file: expected0]\n                                                        NUMBER 4.0 1 [source_file: expected0]\n                                                    NUMBER 5.0 1 [source_file: expected0]\n                                                NUMBER 6.0 1 [source_file: expected0]\n                                            NUMBER 7.0 1 [source_file: expected0]\n                                        NUMBER 8.0 1 [source_file: expected0]\n                                    NUMBER 9.0 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        NUMBER 3.0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        EXPR_RESULT 1 [source_file: testcode]\n            ADD 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    ADD 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            ADD 1 [source_file: testcode]\n                                                ADD 1 [source_file: testcode]\n                                                    ADD 1 [source_file: testcode]\n                                                        ADD 1 [source_file: testcode]\n                                                            ADD 1 [source_file: testcode]\n                                                                NUMBER 1.0 1 [source_file: testcode]\n                                                                NUMBER 2.0 1 [source_file: testcode]\n                                                            NUMBER 1.0 1 [source_file: testcode]\n                                                        NUMBER 2.0 1 [source_file: testcode]\n                                                    NUMBER 4.0 1 [source_file: testcode]\n                                                NUMBER 5.0 1 [source_file: testcode]\n                                            NUMBER 6.0 1 [source_file: testcode]\n                                        NUMBER 7.0 1 [source_file: testcode]\n                                    NUMBER 8.0 1 [source_file: testcode]\n                                NUMBER 9.0 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 3.0 1 [source_file: testcode]\n                NUMBER 10.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_anon_param_4 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME x 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    ADD 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            ADD 1 [source_file: testcode]\n                                                ADD 1 [source_file: testcode]\n                                                    ADD 1 [source_file: testcode]\n                                                        ADD 1 [source_file: testcode]\n                                                            ADD 1 [source_file: testcode]\n                                                                ADD 1 [source_file: testcode]\n                                                                    NUMBER 2.0 1 [source_file: testcode]\n                                                                    NUMBER 3.0 1 [source_file: testcode]\n                                                                NUMBER 2.0 1 [source_file: testcode]\n                                                            NUMBER 3.0 1 [source_file: testcode]\n                                                        NUMBER 4.0 1 [source_file: testcode]\n                                                    NUMBER 5.0 1 [source_file: testcode]\n                                                NUMBER 6.0 1 [source_file: testcode]\n                                            NUMBER 7.0 1 [source_file: testcode]\n                                        NUMBER 8.0 1 [source_file: testcode]\n                                    NUMBER 9.0 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        NUMBER 3.0 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n\n\nSubtree1: NAME JSCompiler_inline_anon_param_2 1 [source_file: expected0]\n    CALL 1 [free_call: 1] [source_file: expected0]\n        NAME x 1 [source_file: expected0]\n\n\nSubtree2: NAME JSCompiler_inline_anon_param_4 1 [source_file: testcode]\n    CALL 1 [free_call: 1] [source_file: testcode]\n        NAME x 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testMixedModeInliningCosting3(InlineFunctionsTest.java:529)  test(        \"function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}\" +        \"foo(1,2);\" +        \"foo(2,3,x())\",        \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +        \"{var JSCompiler_inline_anon_param_2=x();\" +        \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");",
                "failed_line": 529
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineNeverMutateConstants",
                "src": "  public void testInlineNeverMutateConstants() {\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=undefined;x$$inline_0=1\nResult: var x$$inline_1=undefined;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverMutateConstants(InlineFunctionsTest.java:617)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=undefined;x$$inline_0=1\nResult: var x$$inline_1=undefined;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverMutateConstants(InlineFunctionsTest.java:617)  test(\"function f(x){return x=1}f(undefined)\",         \"{var x$$inline_0=undefined;\" +         \"x$$inline_0=1}\");",
                "failed_line": 617
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineWithThis7",
                "src": "  public void testInlineWithThis7() {\n    assumeStrictThis = true;\n    // In strict mode, \"this\" is never coerced so we can use the provided value.\n    test(\"function f(a){a=1;this} f.call();\",\n         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");\n    test(\"function f(a){a=1;this} f.call(x, x);\",\n         \"{var a$$inline_0=x; a$$inline_0=1; x;}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;a$$inline_0=1;void 0\nResult: var a$$inline_1=void 0;a$$inline_1=1;void 0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    VOID 1 [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                VOID 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    VOID 1 [source_file: testcode]\n                        NUMBER 0.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                VOID 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis7(InlineFunctionsTest.java:1895)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;a$$inline_0=1;void 0\nResult: var a$$inline_1=void 0;a$$inline_1=1;void 0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    VOID 1 [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                VOID 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    VOID 1 [source_file: testcode]\n                        NUMBER 0.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                VOID 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineWithThis7(InlineFunctionsTest.java:1895)  test(\"function f(a){a=1;this} f.call();\",         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");",
                "failed_line": 1895
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testAnonymous1",
                "src": "  public void testAnonymous1() {\n    assumeMinimumCapture = false;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n         \"{var a$$inline_0=10;\" +\n         \"{var b$$inline_1=a$$inline_0;\" +\n         \"a$$inline_0++;alert(b$$inline_1)}}\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n        \"{var a$$inline_2=10;\" +\n        \"{var b$$inline_0=a$$inline_2;\" +\n        \"a$$inline_2++;alert(b$$inline_0)}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=10;var b$$inline_1=a$$inline_0;a$$inline_0++;alert(b$$inline_1)\nResult: var a$$inline_2=10;var b$$inline_3=a$$inline_2;a$$inline_2++;alert(b$$inline_3)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME b$$inline_1 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME alert 1 [source_file: expected0]\n                        NAME b$$inline_1 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_2 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME b$$inline_3 1 [source_file: testcode]\n                        NAME a$$inline_2 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME a$$inline_2 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME alert 1 [source_file: testcode]\n                        NAME b$$inline_3 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 10.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: testcode]\n    NUMBER 10.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous1(InlineFunctionsTest.java:2169)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=10;var b$$inline_1=a$$inline_0;a$$inline_0++;alert(b$$inline_1)\nResult: var a$$inline_2=10;var b$$inline_3=a$$inline_2;a$$inline_2++;alert(b$$inline_3)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME b$$inline_1 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME alert 1 [source_file: expected0]\n                        NAME b$$inline_1 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_2 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME b$$inline_3 1 [source_file: testcode]\n                        NAME a$$inline_2 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME a$$inline_2 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME alert 1 [source_file: testcode]\n                        NAME b$$inline_3 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 10.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: testcode]\n    NUMBER 10.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous1(InlineFunctionsTest.java:2169)  test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",         \"{var a$$inline_0=10;\" +         \"{var b$$inline_1=a$$inline_0;\" +         \"a$$inline_0++;alert(b$$inline_1)}}\");",
                "failed_line": 2169
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testAnonymous3",
                "src": "  public void testAnonymous3() {\n    // Introducing a new value into is tricky\n    assumeMinimumCapture = false;\n    testSame(\"(function(){var a=10;(function(){arguments;})()})();\");\n\n    assumeMinimumCapture = true;\n    test(\"(function(){var a=10;(function(){arguments;})()})();\",\n         \"{var a$$inline_0=10;(function(){arguments;})();}\");\n\n    test(\"(function(){(function(){arguments;})()})();\",\n        \"{(function(){arguments;})()}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=10;(function(){arguments})()\nResult: var a$$inline_1=10;(function(){arguments})()\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                NAME arguments 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    FUNCTION  1 [parenthesized: true] [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                NAME arguments 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 10.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 10.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous3(InlineFunctionsTest.java:2191)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=10;(function(){arguments})()\nResult: var a$$inline_1=10;(function(){arguments})()\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 10.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    FUNCTION  1 [parenthesized: true] [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                NAME arguments 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 10.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    FUNCTION  1 [parenthesized: true] [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                NAME arguments 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 10.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 10.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testAnonymous3(InlineFunctionsTest.java:2191)  test(\"(function(){var a=10;(function(){arguments;})()})();\",         \"{var a$$inline_0=10;(function(){arguments;})();}\");",
                "failed_line": 2191
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables1",
                "src": "  public void testShadowVariables1() {\n    // The Normalize pass now guarantees that that globals are never shadowed\n    // by locals.\n\n    // \"foo\" is inlined here as its parameter \"a\" doesn't conflict.\n    // \"bar\" is assigned a new name.\n    test(\"var a=0;\" +\n         \"function foo(a){return 3+a}\" +\n         \"function bar(){var a=foo(4)}\" +\n         \"bar();\",\n\n         \"var a=0;\" +\n         \"{var a$$inline_0=3+4}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a=0;var a$$inline_0=3+4\nResult: var a=0;var a$$inline_1=3+4\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NUMBER 3.0 1 [source_file: expected0]\n                        NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NUMBER 3.0 1 [source_file: testcode]\n                        NUMBER 4.0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 3.0 1 [source_file: expected0]\n        NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 3.0 1 [source_file: testcode]\n        NUMBER 4.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables1(InlineFunctionsTest.java:682)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a=0;var a$$inline_0=3+4\nResult: var a=0;var a$$inline_1=3+4\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        NUMBER 3.0 1 [source_file: expected0]\n                        NUMBER 4.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        NUMBER 3.0 1 [source_file: testcode]\n                        NUMBER 4.0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 3.0 1 [source_file: expected0]\n        NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 3.0 1 [source_file: testcode]\n        NUMBER 4.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables1(InlineFunctionsTest.java:682)  test(\"var a=0;\" +         \"function foo(a){return 3+a}\" +         \"function bar(){var a=foo(4)}\" +         \"bar();\",         \"var a=0;\" +         \"{var a$$inline_0=3+4}\");",
                "failed_line": 682
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables3",
                "src": "  public void testShadowVariables3() {\n    // \"foo\" is inlined into exported \"_bar\", aliasing foo's \"a\".\n    test(\"var a=0;\" +\n        \"function foo(){var a=2;return 3+a}\" +\n        \"function _bar(){a=foo()}\",\n\n        \"var a=0;\" +\n        \"function _bar(){{var a$$inline_0=2;\" +\n        \"a=3+a$$inline_0}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _bar(){var a$$inline_0=2;a=3+a$$inline_0}\nResult: var a=0;function _bar(){var a$$inline_1=2;a=3+a$$inline_1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _bar 1 [source_file: expected0]\n            NAME _bar 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 3.0 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _bar 1 [source_file: testcode]\n            NAME _bar 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME a 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 3.0 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables3(InlineFunctionsTest.java:706)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _bar(){var a$$inline_0=2;a=3+a$$inline_0}\nResult: var a=0;function _bar(){var a$$inline_1=2;a=3+a$$inline_1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _bar 1 [source_file: expected0]\n            NAME _bar 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 3.0 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _bar 1 [source_file: testcode]\n            NAME _bar 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME a 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 3.0 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables3(InlineFunctionsTest.java:706)  test(\"var a=0;\" +        \"function foo(){var a=2;return 3+a}\" +        \"function _bar(){a=foo()}\",        \"var a=0;\" +        \"function _bar(){{var a$$inline_0=2;\" +        \"a=3+a$$inline_0}}\");",
                "failed_line": 706
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables6",
                "src": "  public void testShadowVariables6() {\n    test(\"var a=0;\" +\n        \"function foo(){var a=4;return 3+a}\" +\n        \"function _bar(a){a=foo(4)}\",\n\n        \"var a=0;function _bar(a$$2){{\" +\n        \"var a$$inline_0=4;\" +\n        \"a$$2=3+a$$inline_0}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _bar(a$$2){var a$$inline_0=4;a$$2=3+a$$inline_0}\nResult: var a=0;function _bar(a$$2){var a$$inline_1=4;a$$2=3+a$$inline_1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _bar 1 [source_file: expected0]\n            NAME _bar 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n                NAME a$$2 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME a$$2 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 3.0 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _bar 1 [source_file: testcode]\n            NAME _bar 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n                NAME a$$2 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 4.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME a$$2 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 3.0 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 4.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables6(InlineFunctionsTest.java:737)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a=0;function _bar(a$$2){var a$$inline_0=4;a$$2=3+a$$inline_0}\nResult: var a=0;function _bar(a$$2){var a$$inline_1=4;a$$2=3+a$$inline_1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 0.0 1 [source_file: expected0]\n        FUNCTION _bar 1 [source_file: expected0]\n            NAME _bar 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n                NAME a$$2 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                            NUMBER 4.0 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME a$$2 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 3.0 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 0.0 1 [source_file: testcode]\n        FUNCTION _bar 1 [source_file: testcode]\n            NAME _bar 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n                NAME a$$2 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                            NUMBER 4.0 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME a$$2 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 3.0 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 4.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 4.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables6(InlineFunctionsTest.java:737)  test(\"var a=0;\" +        \"function foo(){var a=4;return 3+a}\" +        \"function _bar(a){a=foo(4)}\",        \"var a=0;function _bar(a$$2){{\" +        \"var a$$inline_0=4;\" +        \"a$$2=3+a$$inline_0}}\");",
                "failed_line": 737
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testShadowVariables7",
                "src": "  public void testShadowVariables7() {\n    assumeMinimumCapture = false;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_0=5;{a}}\"\n         );\n\n    assumeMinimumCapture = true;\n    test(\"var a=3;\" +\n         \"function foo(){return a}\" +\n         \"(function(){var a=5;(function(){foo()})()})()\",\n         \"var a=3;\" +\n         \"{var a$$inline_1=5;{a}}\"\n         );\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a=3;var a$$inline_0=5;a\nResult: var a=3;var a$$inline_1=5;a\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 3.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 5.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 3.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 5.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 5.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 5.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables7(InlineFunctionsTest.java:748)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a=3;var a$$inline_0=5;a\nResult: var a=3;var a$$inline_1=5;a\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n                NUMBER 3.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 5.0 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n                NUMBER 3.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 5.0 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 5.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 5.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testShadowVariables7(InlineFunctionsTest.java:748)  test(\"var a=3;\" +         \"function foo(){return a}\" +         \"(function(){var a=5;(function(){foo()})()})()\",         \"var a=3;\" +         \"{var a$$inline_0=5;{a}}\"         );",
                "failed_line": 748
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testFunctionExpressionCallInlining11b",
                "src": "  public void testFunctionExpressionCallInlining11b() {\n    assumeMinimumCapture = false;\n    // Can't inline functions that return inner functions and have local names.\n    testSame(\"((function(){var a; return function(){foo()}})())();\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"((function(){var a; return function(){foo()}})())();\",\n\n        \"{var JSCompiler_inline_result$$0;\" +\n        \"var a$$inline_1;\" +\n        \"JSCompiler_inline_result$$0=function(){foo()};}\" +\n        \"JSCompiler_inline_result$$0()\");\n\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_inline_result$$0;var a$$inline_1;JSCompiler_inline_result$$0=function(){foo()};JSCompiler_inline_result$$0()\nResult: var JSCompiler_inline_result$$0;var a$$inline_2;JSCompiler_inline_result$$0=function(){foo()};JSCompiler_inline_result$$0()\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_1 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                CALL 1 [free_call: 1] [source_file: expected0]\n                                    NAME foo 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_2 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                CALL 1 [free_call: 1] [source_file: testcode]\n                                    NAME foo 1 [source_file: testcode]\n        EXPR_RESULT 1 [source_file: testcode]\n            CALL 1 [free_call: 1] [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_1 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11b(InlineFunctionsTest.java:1682)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_inline_result$$0;var a$$inline_1;JSCompiler_inline_result$$0=function(){foo()};JSCompiler_inline_result$$0()\nResult: var JSCompiler_inline_result$$0;var a$$inline_2;JSCompiler_inline_result$$0=function(){foo()};JSCompiler_inline_result$$0()\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_1 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                CALL 1 [free_call: 1] [source_file: expected0]\n                                    NAME foo 1 [source_file: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            CALL 1 [free_call: 1] [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_2 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                CALL 1 [free_call: 1] [source_file: testcode]\n                                    NAME foo 1 [source_file: testcode]\n        EXPR_RESULT 1 [source_file: testcode]\n            CALL 1 [free_call: 1] [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_1 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_2 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionCallInlining11b(InlineFunctionsTest.java:1682)  test(        \"((function(){var a; return function(){foo()}})())();\",        \"{var JSCompiler_inline_result$$0;\" +        \"var a$$inline_1;\" +        \"JSCompiler_inline_result$$0=function(){foo()};}\" +        \"JSCompiler_inline_result$$0()\");",
                "failed_line": 1682
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexInlineNoResultNoParamCall3",
                "src": "  public void testComplexInlineNoResultNoParamCall3() {\n    // We now allow vars in the global space.\n    //   Don't inline into vars into global scope.\n    //   testSame(\"function f(){a();b();var z=1+1}f()\");\n\n    // But do inline into functions\n    test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",\n         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");\n\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function _foo(){a();b();var z$$inline_0=1+1}\nResult: function _foo(){a();b();var z$$inline_1=1+1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _foo 1 [source_file: expected0]\n            NAME _foo 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME b 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME z$$inline_0 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _foo 1 [source_file: testcode]\n            NAME _foo 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME a 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME b 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME z$$inline_1 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME z$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME z$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall3(InlineFunctionsTest.java:1212)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function _foo(){a();b();var z$$inline_0=1+1}\nResult: function _foo(){a();b();var z$$inline_1=1+1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _foo 1 [source_file: expected0]\n            NAME _foo 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME b 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME z$$inline_0 1 [source_file: expected0]\n                            ADD 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _foo 1 [source_file: testcode]\n            NAME _foo 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME a 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME b 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME z$$inline_1 1 [source_file: testcode]\n                            ADD 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME z$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME z$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineNoResultNoParamCall3(InlineFunctionsTest.java:1212)  test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");",
                "failed_line": 1212
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testCostBasedInlining9",
                "src": "  public void testCostBasedInlining9() {\n    // Here both direct and block inlining is used.  The call to f as a\n    // parameter is inlined directly, which the call to f with f as a parameter\n    // is inlined using block inlining.\n    test(\"function f(a){return 1 + a + a;}\" +\n         \"var a = f(f(1));\",\n         \"var a;\" +\n         \"{var a$$inline_0=1+1+1;\" +\n         \"a=1+a$$inline_0+a$$inline_0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a;var a$$inline_0=1+1+1;a=1+a$$inline_0+a$$inline_0\nResult: var a;var a$$inline_1=1+1+1;a=1+a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NAME a$$inline_0 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NAME a$$inline_1 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        ADD 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        ADD 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining9(InlineFunctionsTest.java:977)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a;var a$$inline_0=1+1+1;a=1+a$$inline_0+a$$inline_0\nResult: var a;var a$$inline_1=1+1+1;a=1+a$$inline_1+a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME a 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME a 1 [source_file: expected0]\n                    ADD 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NAME a$$inline_0 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME a 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME a 1 [source_file: testcode]\n                    ADD 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NAME a$$inline_1 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    ADD 1 [source_file: expected0]\n        ADD 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n            NUMBER 1.0 1 [source_file: expected0]\n        NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    ADD 1 [source_file: testcode]\n        ADD 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n            NUMBER 1.0 1 [source_file: testcode]\n        NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testCostBasedInlining9(InlineFunctionsTest.java:977)  test(\"function f(a){return 1 + a + a;}\" +         \"var a = f(f(1));\",         \"var a;\" +         \"{var a$$inline_0=1+1+1;\" +         \"a=1+a$$inline_0+a$$inline_0}\");",
                "failed_line": 977
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testMethodWithFunctionWithFunction",
                "src": "  public void testMethodWithFunctionWithFunction() {\n    assumeMinimumCapture = true;\n    test(\"function _testLocalVariable_() {\\n\" +\n        \"  var result = 0;\\n\" +\n        \"  function foo() {\\n\" +\n        \"      var j = [i];\\n\" +\n        \"      (function(j) {\\n\" +\n        \"        setTimeout(function() { result += j; }, 5 * i);\\n\" +\n        \"      })(j);\\n\" +\n        \"      j = null;\" +\n        \"  }\\n\" +\n        \"  foo();\\n\" +\n        \"}\",\n        \"function _testLocalVariable_(){\\n\" +\n        \"  var result=0;\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_2=[i];\\n\" +\n        \"  {\\n\" +\n        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.\n        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +\n        \"  }\\n\" +\n        \"  j$$inline_2=null\\n\" + // because this value can be modified later.\n        \"  }\\n\" +\n        \"}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function _testLocalVariable_(){var result=0;var j$$inline_2=[i];var j$$inline_0=j$$inline_2;setTimeout(function(){result+=j$$inline_0},5*i);j$$inline_2=null}\nResult: function _testLocalVariable_(){var result=0;var j$$inline_4=[i];var j$$inline_1=j$$inline_4;setTimeout(function(){result+=j$$inline_1},5*i);j$$inline_4=null}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _testLocalVariable_ 1 [source_file: expected0]\n            NAME _testLocalVariable_ 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME result 2 [source_file: expected0]\n                        NUMBER 0.0 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME j$$inline_2 4 [source_file: expected0]\n                            ARRAYLIT 4 [source_file: expected0]\n                                NAME i 4 [source_file: expected0]\n                    BLOCK 5 [source_file: expected0]\n                        VAR 6 [source_file: expected0]\n                            NAME j$$inline_0 6 [source_file: expected0]\n                                NAME j$$inline_2 6 [source_file: expected0]\n                        EXPR_RESULT 7 [source_file: expected0]\n                            CALL 7 [free_call: 1] [source_file: expected0]\n                                NAME setTimeout 7 [source_file: expected0]\n                                FUNCTION  7 [source_file: expected0]\n                                    NAME  7 [source_file: expected0]\n                                    LP 7 [source_file: expected0]\n                                    BLOCK 7 [source_file: expected0]\n                                        EXPR_RESULT 7 [source_file: expected0]\n                                            ASSIGN_ADD 7 [source_file: expected0]\n                                                NAME result 7 [source_file: expected0]\n                                                NAME j$$inline_0 7 [source_file: expected0]\n                                MUL 7 [source_file: expected0]\n                                    NUMBER 5.0 7 [source_file: expected0]\n                                    NAME i 7 [source_file: expected0]\n                    EXPR_RESULT 9 [source_file: expected0]\n                        ASSIGN 9 [source_file: expected0]\n                            NAME j$$inline_2 9 [source_file: expected0]\n                            NULL 9 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _testLocalVariable_ 1 [source_file: testcode]\n            NAME _testLocalVariable_ 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 2 [source_file: testcode]\n                    NAME result 2 [source_file: testcode]\n                        NUMBER 0.0 2 [source_file: testcode]\n                BLOCK 3 [source_file: testcode]\n                    VAR 4 [source_file: testcode]\n                        NAME j$$inline_4 4 [source_file: testcode]\n                            ARRAYLIT 4 [source_file: testcode]\n                                NAME i 4 [source_file: testcode]\n                    BLOCK 5 [source_file: testcode]\n                        VAR 7 [source_file: testcode]\n                            NAME j$$inline_1 7 [source_file: testcode]\n                                NAME j$$inline_4 7 [source_file: testcode]\n                        EXPR_RESULT 6 [source_file: testcode]\n                            CALL 6 [free_call: 1] [source_file: testcode]\n                                NAME setTimeout 6 [source_file: testcode]\n                                FUNCTION  6 [source_file: testcode]\n                                    NAME  6 [source_file: testcode]\n                                    LP 6 [source_file: testcode]\n                                    BLOCK 6 [source_file: testcode]\n                                        EXPR_RESULT 6 [source_file: testcode]\n                                            ASSIGN_ADD 6 [source_file: testcode]\n                                                NAME result 6 [source_file: testcode]\n                                                NAME j$$inline_1 6 [source_file: testcode]\n                                MUL 6 [source_file: testcode]\n                                    NUMBER 5.0 6 [source_file: testcode]\n                                    NAME i 6 [source_file: testcode]\n                    EXPR_RESULT 8 [source_file: testcode]\n                        ASSIGN 8 [source_file: testcode]\n                            NAME j$$inline_4 8 [source_file: testcode]\n                            NULL 8 [source_file: testcode]\n\n\nSubtree1: NAME j$$inline_2 4 [source_file: expected0]\n    ARRAYLIT 4 [source_file: expected0]\n        NAME i 4 [source_file: expected0]\n\n\nSubtree2: NAME j$$inline_4 4 [source_file: testcode]\n    ARRAYLIT 4 [source_file: testcode]\n        NAME i 4 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testMethodWithFunctionWithFunction(InlineFunctionsTest.java:2236)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function _testLocalVariable_(){var result=0;var j$$inline_2=[i];var j$$inline_0=j$$inline_2;setTimeout(function(){result+=j$$inline_0},5*i);j$$inline_2=null}\nResult: function _testLocalVariable_(){var result=0;var j$$inline_4=[i];var j$$inline_1=j$$inline_4;setTimeout(function(){result+=j$$inline_1},5*i);j$$inline_4=null}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _testLocalVariable_ 1 [source_file: expected0]\n            NAME _testLocalVariable_ 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME result 2 [source_file: expected0]\n                        NUMBER 0.0 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME j$$inline_2 4 [source_file: expected0]\n                            ARRAYLIT 4 [source_file: expected0]\n                                NAME i 4 [source_file: expected0]\n                    BLOCK 5 [source_file: expected0]\n                        VAR 6 [source_file: expected0]\n                            NAME j$$inline_0 6 [source_file: expected0]\n                                NAME j$$inline_2 6 [source_file: expected0]\n                        EXPR_RESULT 7 [source_file: expected0]\n                            CALL 7 [free_call: 1] [source_file: expected0]\n                                NAME setTimeout 7 [source_file: expected0]\n                                FUNCTION  7 [source_file: expected0]\n                                    NAME  7 [source_file: expected0]\n                                    LP 7 [source_file: expected0]\n                                    BLOCK 7 [source_file: expected0]\n                                        EXPR_RESULT 7 [source_file: expected0]\n                                            ASSIGN_ADD 7 [source_file: expected0]\n                                                NAME result 7 [source_file: expected0]\n                                                NAME j$$inline_0 7 [source_file: expected0]\n                                MUL 7 [source_file: expected0]\n                                    NUMBER 5.0 7 [source_file: expected0]\n                                    NAME i 7 [source_file: expected0]\n                    EXPR_RESULT 9 [source_file: expected0]\n                        ASSIGN 9 [source_file: expected0]\n                            NAME j$$inline_2 9 [source_file: expected0]\n                            NULL 9 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _testLocalVariable_ 1 [source_file: testcode]\n            NAME _testLocalVariable_ 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 2 [source_file: testcode]\n                    NAME result 2 [source_file: testcode]\n                        NUMBER 0.0 2 [source_file: testcode]\n                BLOCK 3 [source_file: testcode]\n                    VAR 4 [source_file: testcode]\n                        NAME j$$inline_4 4 [source_file: testcode]\n                            ARRAYLIT 4 [source_file: testcode]\n                                NAME i 4 [source_file: testcode]\n                    BLOCK 5 [source_file: testcode]\n                        VAR 7 [source_file: testcode]\n                            NAME j$$inline_1 7 [source_file: testcode]\n                                NAME j$$inline_4 7 [source_file: testcode]\n                        EXPR_RESULT 6 [source_file: testcode]\n                            CALL 6 [free_call: 1] [source_file: testcode]\n                                NAME setTimeout 6 [source_file: testcode]\n                                FUNCTION  6 [source_file: testcode]\n                                    NAME  6 [source_file: testcode]\n                                    LP 6 [source_file: testcode]\n                                    BLOCK 6 [source_file: testcode]\n                                        EXPR_RESULT 6 [source_file: testcode]\n                                            ASSIGN_ADD 6 [source_file: testcode]\n                                                NAME result 6 [source_file: testcode]\n                                                NAME j$$inline_1 6 [source_file: testcode]\n                                MUL 6 [source_file: testcode]\n                                    NUMBER 5.0 6 [source_file: testcode]\n                                    NAME i 6 [source_file: testcode]\n                    EXPR_RESULT 8 [source_file: testcode]\n                        ASSIGN 8 [source_file: testcode]\n                            NAME j$$inline_4 8 [source_file: testcode]\n                            NULL 8 [source_file: testcode]\n\n\nSubtree1: NAME j$$inline_2 4 [source_file: expected0]\n    ARRAYLIT 4 [source_file: expected0]\n        NAME i 4 [source_file: expected0]\n\n\nSubtree2: NAME j$$inline_4 4 [source_file: testcode]\n    ARRAYLIT 4 [source_file: testcode]\n        NAME i 4 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testMethodWithFunctionWithFunction(InlineFunctionsTest.java:2236)  test(\"function _testLocalVariable_() {\\n\" +        \"  var result = 0;\\n\" +        \"  function foo() {\\n\" +        \"      var j = [i];\\n\" +        \"      (function(j) {\\n\" +        \"        setTimeout(function() { result += j; }, 5 * i);\\n\" +        \"      })(j);\\n\" +        \"      j = null;\" +        \"  }\\n\" +        \"  foo();\\n\" +        \"}\",        \"function _testLocalVariable_(){\\n\" +        \"  var result=0;\\n\" +        \"  {\\n\" +        \"  var j$$inline_2=[i];\\n\" +        \"  {\\n\" +        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +        \"  }\\n\" +        \"  j$$inline_2=null\\n\" + // because this value can be modified later.        \"  }\\n\" +        \"}\");",
                "failed_line": 2236
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testFunctionExpressionYCombinator",
                "src": "  public void testFunctionExpressionYCombinator() {\n    assumeMinimumCapture = false;\n    testSame(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"var factorial = ((function(M) {\\n\" +\n        \"      return ((function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                            })\\n\" +\n        \"               })\\n\" +\n        \"              (function(f) {\\n\" +\n        \"                 return M(function(arg) {\\n\" +\n        \"                            return (f(f))(arg);\\n\" +\n        \"                           })\\n\" +\n        \"                 }));\\n\" +\n        \"     })\\n\" +\n        \"    (function(f) {\\n\" +\n        \"       return function(n) {\\n\" +\n        \"        if (n === 0)\\n\" +\n        \"          return 1;\\n\" +\n        \"        else\\n\" +\n        \"          return n * f(n - 1);\\n\" +\n        \"       };\\n\" +\n        \"     }));\\n\" +\n        \"\\n\" +\n        \"factorial(5)\\n\",\n        \"var factorial;\\n\" +\n        \"{\\n\" +\n        \"var M$$inline_4 = function(f$$2) {\\n\" +\n        \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +\n        \"};\\n\" +\n        \"{\\n\" +\n        \"var f$$inline_0=function(f$$inline_7){\\n\" +\n        \"  return M$$inline_4(\\n\" +\n        \"    function(arg$$inline_8){\\n\" +\n        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +\n        \"     })\\n\" +\n        \"};\\n\" +\n        \"factorial=M$$inline_4(\\n\" +\n        \"  function(arg$$inline_1){\\n\" +\n        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +\n        \"});\\n\" +\n        \"}\\n\" +\n        \"}\" +\n        \"factorial(5)\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var factorial;var M$$inline_4=function(f$$2){return function(n){if(n===0)return 1;else return n*f$$2(n-1)}};var f$$inline_0=function(f$$inline_7){return M$$inline_4(function(arg$$inline_8){return f$$inline_7(f$$inline_7)(arg$$inline_8)})};factorial=M$$inline_4(function(arg$$inline_1){return f$$inline_0(f$$inline_0)(arg$$inline_1)});factorial(5)\nResult: var factorial;var M$$inline_6=function(f$$2){return function(n){if(n===0)return 1;else return n*f$$2(n-1)}};var f$$inline_1=function(f$$inline_9){return M$$inline_6(function(arg$$inline_10){return f$$inline_9(f$$inline_9)(arg$$inline_10)})};factorial=M$$inline_6(function(arg$$inline_2){return f$$inline_1(f$$inline_1)(arg$$inline_2)});factorial(5)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME factorial 1 [source_file: expected0]\n        BLOCK 2 [source_file: expected0]\n            VAR 3 [source_file: expected0]\n                NAME M$$inline_4 3 [source_file: expected0]\n                    FUNCTION  3 [source_file: expected0]\n                        NAME  3 [source_file: expected0]\n                        LP 3 [source_file: expected0]\n                            NAME f$$2 3 [source_file: expected0]\n                        BLOCK 3 [source_file: expected0]\n                            RETURN 4 [source_file: expected0]\n                                FUNCTION  4 [source_file: expected0]\n                                    NAME  4 [source_file: expected0]\n                                    LP 4 [source_file: expected0]\n                                        NAME n 4 [source_file: expected0]\n                                    BLOCK 4 [source_file: expected0]\n                                        IF 4 [source_file: expected0]\n                                            SHEQ 4 [source_file: expected0]\n                                                NAME n 4 [source_file: expected0]\n                                                NUMBER 0.0 4 [source_file: expected0]\n                                            BLOCK 4 [source_file: expected0]\n                                                RETURN 4 [source_file: expected0]\n                                                    NUMBER 1.0 4 [source_file: expected0]\n                                            BLOCK 4 [source_file: expected0]\n                                                RETURN 4 [source_file: expected0]\n                                                    MUL 4 [source_file: expected0]\n                                                        NAME n 4 [source_file: expected0]\n                                                        CALL 4 [free_call: 1] [source_file: expected0]\n                                                            NAME f$$2 4 [source_file: expected0]\n                                                            SUB 4 [source_file: expected0]\n                                                                NAME n 4 [source_file: expected0]\n                                                                NUMBER 1.0 4 [source_file: expected0]\n            BLOCK 6 [source_file: expected0]\n                VAR 7 [source_file: expected0]\n                    NAME f$$inline_0 7 [source_file: expected0]\n                        FUNCTION  7 [source_file: expected0]\n                            NAME  7 [source_file: expected0]\n                            LP 7 [source_file: expected0]\n                                NAME f$$inline_7 7 [source_file: expected0]\n                            BLOCK 7 [source_file: expected0]\n                                RETURN 8 [source_file: expected0]\n                                    CALL 8 [free_call: 1] [source_file: expected0]\n                                        NAME M$$inline_4 8 [source_file: expected0]\n                                        FUNCTION  9 [source_file: expected0]\n                                            NAME  9 [source_file: expected0]\n                                            LP 9 [source_file: expected0]\n                                                NAME arg$$inline_8 9 [source_file: expected0]\n                                            BLOCK 9 [source_file: expected0]\n                                                RETURN 10 [source_file: expected0]\n                                                    CALL 10 [free_call: 1] [source_file: expected0]\n                                                        CALL 10 [free_call: 1] [source_file: expected0]\n                                                            NAME f$$inline_7 10 [source_file: expected0]\n                                                            NAME f$$inline_7 10 [source_file: expected0]\n                                                        NAME arg$$inline_8 10 [source_file: expected0]\n                EXPR_RESULT 13 [source_file: expected0]\n                    ASSIGN 13 [source_file: expected0]\n                        NAME factorial 13 [source_file: expected0]\n                        CALL 13 [free_call: 1] [source_file: expected0]\n                            NAME M$$inline_4 13 [source_file: expected0]\n                            FUNCTION  14 [source_file: expected0]\n                                NAME  14 [source_file: expected0]\n                                LP 14 [source_file: expected0]\n                                    NAME arg$$inline_1 14 [source_file: expected0]\n                                BLOCK 14 [source_file: expected0]\n                                    RETURN 15 [source_file: expected0]\n                                        CALL 15 [free_call: 1] [source_file: expected0]\n                                            CALL 15 [free_call: 1] [source_file: expected0]\n                                                NAME f$$inline_0 15 [source_file: expected0]\n                                                NAME f$$inline_0 15 [source_file: expected0]\n                                            NAME arg$$inline_1 15 [source_file: expected0]\n        EXPR_RESULT 18 [source_file: expected0]\n            CALL 18 [free_call: 1] [source_file: expected0]\n                NAME factorial 18 [source_file: expected0]\n                NUMBER 5.0 18 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME factorial 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 13 [source_file: testcode]\n                NAME M$$inline_6 13 [source_file: testcode]\n                    FUNCTION  13 [source_file: testcode]\n                        NAME  13 [source_file: testcode]\n                        LP 13 [source_file: testcode]\n                            NAME f$$2 13 [source_file: testcode]\n                        BLOCK 13 [source_file: testcode]\n                            RETURN 14 [source_file: testcode]\n                                FUNCTION  14 [source_file: testcode]\n                                    NAME  14 [source_file: testcode]\n                                    LP 14 [source_file: testcode]\n                                        NAME n 14 [source_file: testcode]\n                                    BLOCK 14 [source_file: testcode]\n                                        IF 15 [source_file: testcode]\n                                            SHEQ 15 [source_file: testcode]\n                                                NAME n 15 [source_file: testcode]\n                                                NUMBER 0.0 15 [source_file: testcode]\n                                            BLOCK 16 [source_file: testcode]\n                                                RETURN 16 [source_file: testcode]\n                                                    NUMBER 1.0 16 [source_file: testcode]\n                                            BLOCK 18 [source_file: testcode]\n                                                RETURN 18 [source_file: testcode]\n                                                    MUL 18 [source_file: testcode]\n                                                        NAME n 18 [source_file: testcode]\n                                                        CALL 18 [free_call: 1] [source_file: testcode]\n                                                            NAME f$$2 18 [source_file: testcode]\n                                                            SUB 18 [source_file: testcode]\n                                                                NAME n 18 [source_file: testcode]\n                                                                NUMBER 1.0 18 [source_file: testcode]\n            BLOCK 2 [source_file: testcode]\n                VAR 7 [source_file: testcode]\n                    NAME f$$inline_1 7 [source_file: testcode]\n                        FUNCTION  7 [source_file: testcode]\n                            NAME  7 [source_file: testcode]\n                            LP 7 [source_file: testcode]\n                                NAME f$$inline_9 7 [source_file: testcode]\n                            BLOCK 7 [source_file: testcode]\n                                RETURN 8 [source_file: testcode]\n                                    CALL 8 [free_call: 1] [source_file: testcode]\n                                        NAME M$$inline_6 8 [source_file: testcode]\n                                        FUNCTION  8 [source_file: testcode]\n                                            NAME  8 [source_file: testcode]\n                                            LP 8 [source_file: testcode]\n                                                NAME arg$$inline_10 8 [source_file: testcode]\n                                            BLOCK 8 [source_file: testcode]\n                                                RETURN 9 [source_file: testcode]\n                                                    CALL 9 [free_call: 1] [source_file: testcode]\n                                                        CALL 9 [parenthesized: true] [free_call: 1] [source_file: testcode]\n                                                            NAME f$$inline_9 9 [source_file: testcode]\n                                                            NAME f$$inline_9 9 [source_file: testcode]\n                                                        NAME arg$$inline_10 9 [source_file: testcode]\n                EXPR_RESULT 3 [source_file: testcode]\n                    ASSIGN 3 [source_file: testcode]\n                        NAME factorial 3 [source_file: testcode]\n                        CALL 3 [free_call: 1] [source_file: testcode]\n                            NAME M$$inline_6 3 [source_file: testcode]\n                            FUNCTION  3 [source_file: testcode]\n                                NAME  3 [source_file: testcode]\n                                LP 3 [source_file: testcode]\n                                    NAME arg$$inline_2 3 [source_file: testcode]\n                                BLOCK 3 [source_file: testcode]\n                                    RETURN 4 [source_file: testcode]\n                                        CALL 4 [free_call: 1] [source_file: testcode]\n                                            CALL 4 [parenthesized: true] [free_call: 1] [source_file: testcode]\n                                                NAME f$$inline_1 4 [source_file: testcode]\n                                                NAME f$$inline_1 4 [source_file: testcode]\n                                            NAME arg$$inline_2 4 [source_file: testcode]\n        EXPR_RESULT 22 [source_file: testcode]\n            CALL 22 [free_call: 1] [source_file: testcode]\n                NAME factorial 22 [source_file: testcode]\n                NUMBER 5.0 22 [source_file: testcode]\n\n\nSubtree1: NAME M$$inline_4 3 [source_file: expected0]\n    FUNCTION  3 [source_file: expected0]\n        NAME  3 [source_file: expected0]\n        LP 3 [source_file: expected0]\n            NAME f$$2 3 [source_file: expected0]\n        BLOCK 3 [source_file: expected0]\n            RETURN 4 [source_file: expected0]\n                FUNCTION  4 [source_file: expected0]\n                    NAME  4 [source_file: expected0]\n                    LP 4 [source_file: expected0]\n                        NAME n 4 [source_file: expected0]\n                    BLOCK 4 [source_file: expected0]\n                        IF 4 [source_file: expected0]\n                            SHEQ 4 [source_file: expected0]\n                                NAME n 4 [source_file: expected0]\n                                NUMBER 0.0 4 [source_file: expected0]\n                            BLOCK 4 [source_file: expected0]\n                                RETURN 4 [source_file: expected0]\n                                    NUMBER 1.0 4 [source_file: expected0]\n                            BLOCK 4 [source_file: expected0]\n                                RETURN 4 [source_file: expected0]\n                                    MUL 4 [source_file: expected0]\n                                        NAME n 4 [source_file: expected0]\n                                        CALL 4 [free_call: 1] [source_file: expected0]\n                                            NAME f$$2 4 [source_file: expected0]\n                                            SUB 4 [source_file: expected0]\n                                                NAME n 4 [source_file: expected0]\n                                                NUMBER 1.0 4 [source_file: expected0]\n\n\nSubtree2: NAME M$$inline_6 13 [source_file: testcode]\n    FUNCTION  13 [source_file: testcode]\n        NAME  13 [source_file: testcode]\n        LP 13 [source_file: testcode]\n            NAME f$$2 13 [source_file: testcode]\n        BLOCK 13 [source_file: testcode]\n            RETURN 14 [source_file: testcode]\n                FUNCTION  14 [source_file: testcode]\n                    NAME  14 [source_file: testcode]\n                    LP 14 [source_file: testcode]\n                        NAME n 14 [source_file: testcode]\n                    BLOCK 14 [source_file: testcode]\n                        IF 15 [source_file: testcode]\n                            SHEQ 15 [source_file: testcode]\n                                NAME n 15 [source_file: testcode]\n                                NUMBER 0.0 15 [source_file: testcode]\n                            BLOCK 16 [source_file: testcode]\n                                RETURN 16 [source_file: testcode]\n                                    NUMBER 1.0 16 [source_file: testcode]\n                            BLOCK 18 [source_file: testcode]\n                                RETURN 18 [source_file: testcode]\n                                    MUL 18 [source_file: testcode]\n                                        NAME n 18 [source_file: testcode]\n                                        CALL 18 [free_call: 1] [source_file: testcode]\n                                            NAME f$$2 18 [source_file: testcode]\n                                            SUB 18 [source_file: testcode]\n                                                NAME n 18 [source_file: testcode]\n                                                NUMBER 1.0 18 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionYCombinator(InlineFunctionsTest.java:1929)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var factorial;var M$$inline_4=function(f$$2){return function(n){if(n===0)return 1;else return n*f$$2(n-1)}};var f$$inline_0=function(f$$inline_7){return M$$inline_4(function(arg$$inline_8){return f$$inline_7(f$$inline_7)(arg$$inline_8)})};factorial=M$$inline_4(function(arg$$inline_1){return f$$inline_0(f$$inline_0)(arg$$inline_1)});factorial(5)\nResult: var factorial;var M$$inline_6=function(f$$2){return function(n){if(n===0)return 1;else return n*f$$2(n-1)}};var f$$inline_1=function(f$$inline_9){return M$$inline_6(function(arg$$inline_10){return f$$inline_9(f$$inline_9)(arg$$inline_10)})};factorial=M$$inline_6(function(arg$$inline_2){return f$$inline_1(f$$inline_1)(arg$$inline_2)});factorial(5)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME factorial 1 [source_file: expected0]\n        BLOCK 2 [source_file: expected0]\n            VAR 3 [source_file: expected0]\n                NAME M$$inline_4 3 [source_file: expected0]\n                    FUNCTION  3 [source_file: expected0]\n                        NAME  3 [source_file: expected0]\n                        LP 3 [source_file: expected0]\n                            NAME f$$2 3 [source_file: expected0]\n                        BLOCK 3 [source_file: expected0]\n                            RETURN 4 [source_file: expected0]\n                                FUNCTION  4 [source_file: expected0]\n                                    NAME  4 [source_file: expected0]\n                                    LP 4 [source_file: expected0]\n                                        NAME n 4 [source_file: expected0]\n                                    BLOCK 4 [source_file: expected0]\n                                        IF 4 [source_file: expected0]\n                                            SHEQ 4 [source_file: expected0]\n                                                NAME n 4 [source_file: expected0]\n                                                NUMBER 0.0 4 [source_file: expected0]\n                                            BLOCK 4 [source_file: expected0]\n                                                RETURN 4 [source_file: expected0]\n                                                    NUMBER 1.0 4 [source_file: expected0]\n                                            BLOCK 4 [source_file: expected0]\n                                                RETURN 4 [source_file: expected0]\n                                                    MUL 4 [source_file: expected0]\n                                                        NAME n 4 [source_file: expected0]\n                                                        CALL 4 [free_call: 1] [source_file: expected0]\n                                                            NAME f$$2 4 [source_file: expected0]\n                                                            SUB 4 [source_file: expected0]\n                                                                NAME n 4 [source_file: expected0]\n                                                                NUMBER 1.0 4 [source_file: expected0]\n            BLOCK 6 [source_file: expected0]\n                VAR 7 [source_file: expected0]\n                    NAME f$$inline_0 7 [source_file: expected0]\n                        FUNCTION  7 [source_file: expected0]\n                            NAME  7 [source_file: expected0]\n                            LP 7 [source_file: expected0]\n                                NAME f$$inline_7 7 [source_file: expected0]\n                            BLOCK 7 [source_file: expected0]\n                                RETURN 8 [source_file: expected0]\n                                    CALL 8 [free_call: 1] [source_file: expected0]\n                                        NAME M$$inline_4 8 [source_file: expected0]\n                                        FUNCTION  9 [source_file: expected0]\n                                            NAME  9 [source_file: expected0]\n                                            LP 9 [source_file: expected0]\n                                                NAME arg$$inline_8 9 [source_file: expected0]\n                                            BLOCK 9 [source_file: expected0]\n                                                RETURN 10 [source_file: expected0]\n                                                    CALL 10 [free_call: 1] [source_file: expected0]\n                                                        CALL 10 [free_call: 1] [source_file: expected0]\n                                                            NAME f$$inline_7 10 [source_file: expected0]\n                                                            NAME f$$inline_7 10 [source_file: expected0]\n                                                        NAME arg$$inline_8 10 [source_file: expected0]\n                EXPR_RESULT 13 [source_file: expected0]\n                    ASSIGN 13 [source_file: expected0]\n                        NAME factorial 13 [source_file: expected0]\n                        CALL 13 [free_call: 1] [source_file: expected0]\n                            NAME M$$inline_4 13 [source_file: expected0]\n                            FUNCTION  14 [source_file: expected0]\n                                NAME  14 [source_file: expected0]\n                                LP 14 [source_file: expected0]\n                                    NAME arg$$inline_1 14 [source_file: expected0]\n                                BLOCK 14 [source_file: expected0]\n                                    RETURN 15 [source_file: expected0]\n                                        CALL 15 [free_call: 1] [source_file: expected0]\n                                            CALL 15 [free_call: 1] [source_file: expected0]\n                                                NAME f$$inline_0 15 [source_file: expected0]\n                                                NAME f$$inline_0 15 [source_file: expected0]\n                                            NAME arg$$inline_1 15 [source_file: expected0]\n        EXPR_RESULT 18 [source_file: expected0]\n            CALL 18 [free_call: 1] [source_file: expected0]\n                NAME factorial 18 [source_file: expected0]\n                NUMBER 5.0 18 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME factorial 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 13 [source_file: testcode]\n                NAME M$$inline_6 13 [source_file: testcode]\n                    FUNCTION  13 [source_file: testcode]\n                        NAME  13 [source_file: testcode]\n                        LP 13 [source_file: testcode]\n                            NAME f$$2 13 [source_file: testcode]\n                        BLOCK 13 [source_file: testcode]\n                            RETURN 14 [source_file: testcode]\n                                FUNCTION  14 [source_file: testcode]\n                                    NAME  14 [source_file: testcode]\n                                    LP 14 [source_file: testcode]\n                                        NAME n 14 [source_file: testcode]\n                                    BLOCK 14 [source_file: testcode]\n                                        IF 15 [source_file: testcode]\n                                            SHEQ 15 [source_file: testcode]\n                                                NAME n 15 [source_file: testcode]\n                                                NUMBER 0.0 15 [source_file: testcode]\n                                            BLOCK 16 [source_file: testcode]\n                                                RETURN 16 [source_file: testcode]\n                                                    NUMBER 1.0 16 [source_file: testcode]\n                                            BLOCK 18 [source_file: testcode]\n                                                RETURN 18 [source_file: testcode]\n                                                    MUL 18 [source_file: testcode]\n                                                        NAME n 18 [source_file: testcode]\n                                                        CALL 18 [free_call: 1] [source_file: testcode]\n                                                            NAME f$$2 18 [source_file: testcode]\n                                                            SUB 18 [source_file: testcode]\n                                                                NAME n 18 [source_file: testcode]\n                                                                NUMBER 1.0 18 [source_file: testcode]\n            BLOCK 2 [source_file: testcode]\n                VAR 7 [source_file: testcode]\n                    NAME f$$inline_1 7 [source_file: testcode]\n                        FUNCTION  7 [source_file: testcode]\n                            NAME  7 [source_file: testcode]\n                            LP 7 [source_file: testcode]\n                                NAME f$$inline_9 7 [source_file: testcode]\n                            BLOCK 7 [source_file: testcode]\n                                RETURN 8 [source_file: testcode]\n                                    CALL 8 [free_call: 1] [source_file: testcode]\n                                        NAME M$$inline_6 8 [source_file: testcode]\n                                        FUNCTION  8 [source_file: testcode]\n                                            NAME  8 [source_file: testcode]\n                                            LP 8 [source_file: testcode]\n                                                NAME arg$$inline_10 8 [source_file: testcode]\n                                            BLOCK 8 [source_file: testcode]\n                                                RETURN 9 [source_file: testcode]\n                                                    CALL 9 [free_call: 1] [source_file: testcode]\n                                                        CALL 9 [parenthesized: true] [free_call: 1] [source_file: testcode]\n                                                            NAME f$$inline_9 9 [source_file: testcode]\n                                                            NAME f$$inline_9 9 [source_file: testcode]\n                                                        NAME arg$$inline_10 9 [source_file: testcode]\n                EXPR_RESULT 3 [source_file: testcode]\n                    ASSIGN 3 [source_file: testcode]\n                        NAME factorial 3 [source_file: testcode]\n                        CALL 3 [free_call: 1] [source_file: testcode]\n                            NAME M$$inline_6 3 [source_file: testcode]\n                            FUNCTION  3 [source_file: testcode]\n                                NAME  3 [source_file: testcode]\n                                LP 3 [source_file: testcode]\n                                    NAME arg$$inline_2 3 [source_file: testcode]\n                                BLOCK 3 [source_file: testcode]\n                                    RETURN 4 [source_file: testcode]\n                                        CALL 4 [free_call: 1] [source_file: testcode]\n                                            CALL 4 [parenthesized: true] [free_call: 1] [source_file: testcode]\n                                                NAME f$$inline_1 4 [source_file: testcode]\n                                                NAME f$$inline_1 4 [source_file: testcode]\n                                            NAME arg$$inline_2 4 [source_file: testcode]\n        EXPR_RESULT 22 [source_file: testcode]\n            CALL 22 [free_call: 1] [source_file: testcode]\n                NAME factorial 22 [source_file: testcode]\n                NUMBER 5.0 22 [source_file: testcode]\n\n\nSubtree1: NAME M$$inline_4 3 [source_file: expected0]\n    FUNCTION  3 [source_file: expected0]\n        NAME  3 [source_file: expected0]\n        LP 3 [source_file: expected0]\n            NAME f$$2 3 [source_file: expected0]\n        BLOCK 3 [source_file: expected0]\n            RETURN 4 [source_file: expected0]\n                FUNCTION  4 [source_file: expected0]\n                    NAME  4 [source_file: expected0]\n                    LP 4 [source_file: expected0]\n                        NAME n 4 [source_file: expected0]\n                    BLOCK 4 [source_file: expected0]\n                        IF 4 [source_file: expected0]\n                            SHEQ 4 [source_file: expected0]\n                                NAME n 4 [source_file: expected0]\n                                NUMBER 0.0 4 [source_file: expected0]\n                            BLOCK 4 [source_file: expected0]\n                                RETURN 4 [source_file: expected0]\n                                    NUMBER 1.0 4 [source_file: expected0]\n                            BLOCK 4 [source_file: expected0]\n                                RETURN 4 [source_file: expected0]\n                                    MUL 4 [source_file: expected0]\n                                        NAME n 4 [source_file: expected0]\n                                        CALL 4 [free_call: 1] [source_file: expected0]\n                                            NAME f$$2 4 [source_file: expected0]\n                                            SUB 4 [source_file: expected0]\n                                                NAME n 4 [source_file: expected0]\n                                                NUMBER 1.0 4 [source_file: expected0]\n\n\nSubtree2: NAME M$$inline_6 13 [source_file: testcode]\n    FUNCTION  13 [source_file: testcode]\n        NAME  13 [source_file: testcode]\n        LP 13 [source_file: testcode]\n            NAME f$$2 13 [source_file: testcode]\n        BLOCK 13 [source_file: testcode]\n            RETURN 14 [source_file: testcode]\n                FUNCTION  14 [source_file: testcode]\n                    NAME  14 [source_file: testcode]\n                    LP 14 [source_file: testcode]\n                        NAME n 14 [source_file: testcode]\n                    BLOCK 14 [source_file: testcode]\n                        IF 15 [source_file: testcode]\n                            SHEQ 15 [source_file: testcode]\n                                NAME n 15 [source_file: testcode]\n                                NUMBER 0.0 15 [source_file: testcode]\n                            BLOCK 16 [source_file: testcode]\n                                RETURN 16 [source_file: testcode]\n                                    NUMBER 1.0 16 [source_file: testcode]\n                            BLOCK 18 [source_file: testcode]\n                                RETURN 18 [source_file: testcode]\n                                    MUL 18 [source_file: testcode]\n                                        NAME n 18 [source_file: testcode]\n                                        CALL 18 [free_call: 1] [source_file: testcode]\n                                            NAME f$$2 18 [source_file: testcode]\n                                            SUB 18 [source_file: testcode]\n                                                NAME n 18 [source_file: testcode]\n                                                NUMBER 1.0 18 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionYCombinator(InlineFunctionsTest.java:1929)  test(        \"var factorial = ((function(M) {\\n\" +        \"      return ((function(f) {\\n\" +        \"                 return M(function(arg) {\\n\" +        \"                            return (f(f))(arg);\\n\" +        \"                            })\\n\" +        \"               })\\n\" +        \"              (function(f) {\\n\" +        \"                 return M(function(arg) {\\n\" +        \"                            return (f(f))(arg);\\n\" +        \"                           })\\n\" +        \"                 }));\\n\" +        \"     })\\n\" +        \"    (function(f) {\\n\" +        \"       return function(n) {\\n\" +        \"        if (n === 0)\\n\" +        \"          return 1;\\n\" +        \"        else\\n\" +        \"          return n * f(n - 1);\\n\" +        \"       };\\n\" +        \"     }));\\n\" +        \"\\n\" +        \"factorial(5)\\n\",        \"var factorial;\\n\" +        \"{\\n\" +        \"var M$$inline_4 = function(f$$2) {\\n\" +        \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +        \"};\\n\" +        \"{\\n\" +        \"var f$$inline_0=function(f$$inline_7){\\n\" +        \"  return M$$inline_4(\\n\" +        \"    function(arg$$inline_8){\\n\" +        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +        \"     })\\n\" +        \"};\\n\" +        \"factorial=M$$inline_4(\\n\" +        \"  function(arg$$inline_1){\\n\" +        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +        \"});\\n\" +        \"}\\n\" +        \"}\" +        \"factorial(5)\");",
                "failed_line": 1929
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexInlineVars7",
                "src": "  public void testComplexInlineVars7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;var z=f(1,b)\",\n         \"var b=1;var z;\" +\n         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2\" +\n         \"}else{\" +\n         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var b=1;var z;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}\nResult: var b=1;var z;JSCompiler_inline_label_f_4:{if(1){z=b();break JSCompiler_inline_label_f_4}else{z=true;break JSCompiler_inline_label_f_4}z=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME b 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME z 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME b 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    TRUE 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME z 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME b 1 [source_file: testcode]\n                NUMBER 1.0 1 [source_file: testcode]\n        VAR 1 [source_file: testcode]\n            NAME z 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME b 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    TRUE 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME z 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars7(InlineFunctionsTest.java:1319)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var b=1;var z;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}\nResult: var b=1;var z;JSCompiler_inline_label_f_4:{if(1){z=b();break JSCompiler_inline_label_f_4}else{z=true;break JSCompiler_inline_label_f_4}z=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME b 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n        VAR 1 [source_file: expected0]\n            NAME z 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME b 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    TRUE 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME z 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME b 1 [source_file: testcode]\n                NUMBER 1.0 1 [source_file: testcode]\n        VAR 1 [source_file: testcode]\n            NAME z 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME b 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    TRUE 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME z 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInlineVars7(InlineFunctionsTest.java:1319)  test(\"function f(x,y){if (x) return y(); else return true;}\" +         \"var b=1;var z=f(1,b)\",         \"var b=1;var z;\" +         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +         \"break JSCompiler_inline_label_f_2\" +         \"}else{\" +         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");",
                "failed_line": 1319
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexFunctionWithFunctionDefinition2a",
                "src": "  public void testComplexFunctionWithFunctionDefinition2a() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"(function(){\" +\n        \"var f = function(a){call(function(){return a})};f()})()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;call(function(){return a$$inline_0})\nResult: var a$$inline_1=void 0;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                        VOID 1 [source_file: expected0]\n                            NUMBER 0.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME call 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                RETURN 1 [source_file: expected0]\n                                    NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                        VOID 1 [source_file: testcode]\n                            NUMBER 0.0 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME call 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                RETURN 1 [source_file: testcode]\n                                    NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2a(InlineFunctionsTest.java:1525)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;call(function(){return a$$inline_0})\nResult: var a$$inline_1=void 0;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                        VOID 1 [source_file: expected0]\n                            NUMBER 0.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME call 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                RETURN 1 [source_file: expected0]\n                                    NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                        VOID 1 [source_file: testcode]\n                            NUMBER 0.0 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME call 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                RETURN 1 [source_file: testcode]\n                                    NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2a(InlineFunctionsTest.java:1525)  test(\"(function(){\" +         \"var f = function(a){call(function(){return a})};f()})()\",         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");",
                "failed_line": 1525
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexInline7",
                "src": "  public void testComplexInline7() {\n    test(\"function f(x,y){if (x) return y(); else return true;}\" +\n         \"var b=1;z=f(1,b)\",\n         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n         \"break JSCompiler_inline_label_f_2}else{z=true;\" +\n         \"break JSCompiler_inline_label_f_2}z=void 0}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var b=1;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}\nResult: var b=1;JSCompiler_inline_label_f_4:{if(1){z=b();break JSCompiler_inline_label_f_4}else{z=true;break JSCompiler_inline_label_f_4}z=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME b 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME b 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    TRUE 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME z 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME b 1 [source_file: testcode]\n                NUMBER 1.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME b 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    TRUE 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME z 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline7(InlineFunctionsTest.java:1269)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var b=1;JSCompiler_inline_label_f_2:{if(1){z=b();break JSCompiler_inline_label_f_2}else{z=true;break JSCompiler_inline_label_f_2}z=void 0}\nResult: var b=1;JSCompiler_inline_label_f_4:{if(1){z=b();break JSCompiler_inline_label_f_4}else{z=true;break JSCompiler_inline_label_f_4}z=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME b 1 [source_file: expected0]\n                NUMBER 1.0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NUMBER 1.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME b 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME z 1 [source_file: expected0]\n                                    TRUE 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME z 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME b 1 [source_file: testcode]\n                NUMBER 1.0 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        NUMBER 1.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME b 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME z 1 [source_file: testcode]\n                                    TRUE 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME z 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_f_2 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_f_4 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexInline7(InlineFunctionsTest.java:1269)  test(\"function f(x,y){if (x) return y(); else return true;}\" +         \"var b=1;z=f(1,b)\",         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +         \"break JSCompiler_inline_label_f_2}else{z=true;\" +         \"break JSCompiler_inline_label_f_2}z=void 0}}\");",
                "failed_line": 1269
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testFunctionExpressionOmega",
                "src": "  public void testFunctionExpressionOmega() {\n    // ... with unused recursive name.\n    test(\"(function (f){f(f)})(function(f){f(f)})\",\n         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +\n          \"{{f$$inline_0(f$$inline_0)}}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var f$$inline_0=function(f$$1){f$$1(f$$1)};f$$inline_0(f$$inline_0)\nResult: var f$$inline_1=function(f$$1){f$$1(f$$1)};f$$inline_1(f$$inline_1)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME f$$inline_0 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                            NAME f$$1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                CALL 1 [free_call: 1] [source_file: expected0]\n                                    NAME f$$1 1 [source_file: expected0]\n                                    NAME f$$1 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME f$$inline_0 1 [source_file: expected0]\n                            NAME f$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME f$$inline_1 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                            NAME f$$1 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                CALL 1 [free_call: 1] [source_file: testcode]\n                                    NAME f$$1 1 [source_file: testcode]\n                                    NAME f$$1 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME f$$inline_1 1 [source_file: testcode]\n                            NAME f$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME f$$inline_0 1 [source_file: expected0]\n    FUNCTION  1 [source_file: expected0]\n        NAME  1 [source_file: expected0]\n        LP 1 [source_file: expected0]\n            NAME f$$1 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    NAME f$$1 1 [source_file: expected0]\n                    NAME f$$1 1 [source_file: expected0]\n\n\nSubtree2: NAME f$$inline_1 1 [source_file: testcode]\n    FUNCTION  1 [source_file: testcode]\n        NAME  1 [source_file: testcode]\n        LP 1 [source_file: testcode]\n            NAME f$$1 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionOmega(InlineFunctionsTest.java:1758)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var f$$inline_0=function(f$$1){f$$1(f$$1)};f$$inline_0(f$$inline_0)\nResult: var f$$inline_1=function(f$$1){f$$1(f$$1)};f$$inline_1(f$$inline_1)\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME f$$inline_0 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                            NAME f$$1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                CALL 1 [free_call: 1] [source_file: expected0]\n                                    NAME f$$1 1 [source_file: expected0]\n                                    NAME f$$1 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        CALL 1 [free_call: 1] [source_file: expected0]\n                            NAME f$$inline_0 1 [source_file: expected0]\n                            NAME f$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME f$$inline_1 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                            NAME f$$1 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                CALL 1 [free_call: 1] [source_file: testcode]\n                                    NAME f$$1 1 [source_file: testcode]\n                                    NAME f$$1 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        CALL 1 [free_call: 1] [source_file: testcode]\n                            NAME f$$inline_1 1 [source_file: testcode]\n                            NAME f$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME f$$inline_0 1 [source_file: expected0]\n    FUNCTION  1 [source_file: expected0]\n        NAME  1 [source_file: expected0]\n        LP 1 [source_file: expected0]\n            NAME f$$1 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    NAME f$$1 1 [source_file: expected0]\n                    NAME f$$1 1 [source_file: expected0]\n\n\nSubtree2: NAME f$$inline_1 1 [source_file: testcode]\n    FUNCTION  1 [source_file: testcode]\n        NAME  1 [source_file: testcode]\n        LP 1 [source_file: testcode]\n            NAME f$$1 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testFunctionExpressionOmega(InlineFunctionsTest.java:1758)  test(\"(function (f){f(f)})(function(f){f(f)})\",         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +          \"{{f$$inline_0(f$$inline_0)}}}\");",
                "failed_line": 1758
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions15b",
                "src": "  public void testInlineFunctions15b() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline closure with locals into global scope.\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"function foo(){var x;return function(a){return a+1}}\" +\n         \"var d=c+foo()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function foo(){var x;return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"var d=b()+foo()\",\n\n         \"var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"{\\n\" +\n         \"var JSCompiler_inline_result$$1;\\n\" +\n         \"var x$$inline_2;\\n\" +\n         \"JSCompiler_inline_result$$1 = \" +\n         \"    function(a$$inline_3){ return a$$inline_3+1 };\\n\" +\n         \"}\" +\n         \"var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_2;JSCompiler_inline_result$$1=function(a$$inline_3){return a$$inline_3+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\nResult: var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_3;JSCompiler_inline_result$$1=function(a$$inline_4){return a$$inline_4+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                NAME c 1 [source_file: expected0]\n        BLOCK 2 [source_file: expected0]\n            VAR 3 [source_file: expected0]\n                NAME JSCompiler_inline_result$$1 3 [source_file: expected0]\n            VAR 4 [source_file: expected0]\n                NAME x$$inline_2 4 [source_file: expected0]\n            EXPR_RESULT 5 [source_file: expected0]\n                ASSIGN 5 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$1 5 [source_file: expected0]\n                    FUNCTION  5 [source_file: expected0]\n                        NAME  5 [source_file: expected0]\n                        LP 5 [source_file: expected0]\n                            NAME a$$inline_3 5 [source_file: expected0]\n                        BLOCK 5 [source_file: expected0]\n                            RETURN 5 [source_file: expected0]\n                                ADD 5 [source_file: expected0]\n                                    NAME a$$inline_3 5 [source_file: expected0]\n                                    NUMBER 1.0 5 [source_file: expected0]\n        VAR 6 [source_file: expected0]\n            NAME d 6 [source_file: expected0]\n                ADD 6 [source_file: expected0]\n                    NAME JSCompiler_temp_const$$0 6 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$1 6 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                NAME c 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_3 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                            NAME a$$inline_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            RETURN 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    NAME a$$inline_4 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_2 4 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_3 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15b(InlineFunctionsTest.java:246)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_2;JSCompiler_inline_result$$1=function(a$$inline_3){return a$$inline_3+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\nResult: var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_3;JSCompiler_inline_result$$1=function(a$$inline_4){return a$$inline_4+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                NAME c 1 [source_file: expected0]\n        BLOCK 2 [source_file: expected0]\n            VAR 3 [source_file: expected0]\n                NAME JSCompiler_inline_result$$1 3 [source_file: expected0]\n            VAR 4 [source_file: expected0]\n                NAME x$$inline_2 4 [source_file: expected0]\n            EXPR_RESULT 5 [source_file: expected0]\n                ASSIGN 5 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$1 5 [source_file: expected0]\n                    FUNCTION  5 [source_file: expected0]\n                        NAME  5 [source_file: expected0]\n                        LP 5 [source_file: expected0]\n                            NAME a$$inline_3 5 [source_file: expected0]\n                        BLOCK 5 [source_file: expected0]\n                            RETURN 5 [source_file: expected0]\n                                ADD 5 [source_file: expected0]\n                                    NAME a$$inline_3 5 [source_file: expected0]\n                                    NUMBER 1.0 5 [source_file: expected0]\n        VAR 6 [source_file: expected0]\n            NAME d 6 [source_file: expected0]\n                ADD 6 [source_file: expected0]\n                    NAME JSCompiler_temp_const$$0 6 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$1 6 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                NAME c 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_3 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                            NAME a$$inline_4 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            RETURN 1 [source_file: testcode]\n                                ADD 1 [source_file: testcode]\n                                    NAME a$$inline_4 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_2 4 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_3 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15b(InlineFunctionsTest.java:246)  test(\"function foo(){var x;return function(a){return a+1}}\" +         \"var b=function(){return c};\" +         \"var d=b()+foo()\",         \"var JSCompiler_temp_const$$0 = c;\\n\" +         \"{\\n\" +         \"var JSCompiler_inline_result$$1;\\n\" +         \"var x$$inline_2;\\n\" +         \"JSCompiler_inline_result$$1 = \" +         \"    function(a$$inline_3){ return a$$inline_3+1 };\\n\" +         \"}\" +         \"var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1\");",
                "failed_line": 246
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions15d",
                "src": "  public void testInlineFunctions15d() {\n    assumeMinimumCapture = false;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function foo(){var x; return function(a){return a+1}}\" +\n         \"function _x(){ var d=c+foo() }\");\n\n    assumeMinimumCapture = true;\n\n    // closure factories: don't inline functions with vars.\n    test(\"function foo(){var x; return function(a){return a+1}}\" +\n         \"var b=function(){return c};\" +\n         \"function _x(){ var d=b()+foo() }\",\n\n         \"function _x() { \\n\" +\n         \"  var JSCompiler_temp_const$$0 = c;\\n\" +\n         \"  {\\n\" +\n         \"  var JSCompiler_inline_result$$1;\\n\" +\n         \"  var x$$inline_2;\\n\" +\n         \"  JSCompiler_inline_result$$1 = \" +\n         \"      function(a$$inline_3) {return a$$inline_3+1};\\n\" +\n         \"  }\\n\" +\n         \"  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\\n\" +\n         \"}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: function _x(){var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_2;JSCompiler_inline_result$$1=function(a$$inline_3){return a$$inline_3+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1}\nResult: function _x(){var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_3;JSCompiler_inline_result$$1=function(a$$inline_4){return a$$inline_4+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _x 1 [source_file: expected0]\n            NAME _x 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME JSCompiler_temp_const$$0 2 [source_file: expected0]\n                        NAME c 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME JSCompiler_inline_result$$1 4 [source_file: expected0]\n                    VAR 5 [source_file: expected0]\n                        NAME x$$inline_2 5 [source_file: expected0]\n                    EXPR_RESULT 6 [source_file: expected0]\n                        ASSIGN 6 [source_file: expected0]\n                            NAME JSCompiler_inline_result$$1 6 [source_file: expected0]\n                            FUNCTION  6 [source_file: expected0]\n                                NAME  6 [source_file: expected0]\n                                LP 6 [source_file: expected0]\n                                    NAME a$$inline_3 6 [source_file: expected0]\n                                BLOCK 6 [source_file: expected0]\n                                    RETURN 6 [source_file: expected0]\n                                        ADD 6 [source_file: expected0]\n                                            NAME a$$inline_3 6 [source_file: expected0]\n                                            NUMBER 1.0 6 [source_file: expected0]\n                VAR 8 [source_file: expected0]\n                    NAME d 8 [source_file: expected0]\n                        ADD 8 [source_file: expected0]\n                            NAME JSCompiler_temp_const$$0 8 [source_file: expected0]\n                            NAME JSCompiler_inline_result$$1 8 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _x 1 [source_file: testcode]\n            NAME _x 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                        NAME c 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME x$$inline_3 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                            FUNCTION  1 [source_file: testcode]\n                                NAME  1 [source_file: testcode]\n                                LP 1 [source_file: testcode]\n                                    NAME a$$inline_4 1 [source_file: testcode]\n                                BLOCK 1 [source_file: testcode]\n                                    RETURN 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            NAME a$$inline_4 1 [source_file: testcode]\n                                            NUMBER 1.0 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME d 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                            NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_2 5 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_3 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15d(InlineFunctionsTest.java:296)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: function _x(){var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_2;JSCompiler_inline_result$$1=function(a$$inline_3){return a$$inline_3+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1}\nResult: function _x(){var JSCompiler_temp_const$$0=c;var JSCompiler_inline_result$$1;var x$$inline_3;JSCompiler_inline_result$$1=function(a$$inline_4){return a$$inline_4+1};var d=JSCompiler_temp_const$$0+JSCompiler_inline_result$$1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        FUNCTION _x 1 [source_file: expected0]\n            NAME _x 1 [source_file: expected0]\n            LP 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 2 [source_file: expected0]\n                    NAME JSCompiler_temp_const$$0 2 [source_file: expected0]\n                        NAME c 2 [source_file: expected0]\n                BLOCK 3 [source_file: expected0]\n                    VAR 4 [source_file: expected0]\n                        NAME JSCompiler_inline_result$$1 4 [source_file: expected0]\n                    VAR 5 [source_file: expected0]\n                        NAME x$$inline_2 5 [source_file: expected0]\n                    EXPR_RESULT 6 [source_file: expected0]\n                        ASSIGN 6 [source_file: expected0]\n                            NAME JSCompiler_inline_result$$1 6 [source_file: expected0]\n                            FUNCTION  6 [source_file: expected0]\n                                NAME  6 [source_file: expected0]\n                                LP 6 [source_file: expected0]\n                                    NAME a$$inline_3 6 [source_file: expected0]\n                                BLOCK 6 [source_file: expected0]\n                                    RETURN 6 [source_file: expected0]\n                                        ADD 6 [source_file: expected0]\n                                            NAME a$$inline_3 6 [source_file: expected0]\n                                            NUMBER 1.0 6 [source_file: expected0]\n                VAR 8 [source_file: expected0]\n                    NAME d 8 [source_file: expected0]\n                        ADD 8 [source_file: expected0]\n                            NAME JSCompiler_temp_const$$0 8 [source_file: expected0]\n                            NAME JSCompiler_inline_result$$1 8 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        FUNCTION _x 1 [source_file: testcode]\n            NAME _x 1 [source_file: testcode]\n            LP 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                        NAME c 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME x$$inline_3 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n                            FUNCTION  1 [source_file: testcode]\n                                NAME  1 [source_file: testcode]\n                                LP 1 [source_file: testcode]\n                                    NAME a$$inline_4 1 [source_file: testcode]\n                                BLOCK 1 [source_file: testcode]\n                                    RETURN 1 [source_file: testcode]\n                                        ADD 1 [source_file: testcode]\n                                            NAME a$$inline_4 1 [source_file: testcode]\n                                            NUMBER 1.0 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME d 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NAME JSCompiler_temp_const$$0 1 [source_file: testcode]\n                            NAME JSCompiler_inline_result$$1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_2 5 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_3 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions15d(InlineFunctionsTest.java:296)  test(\"function foo(){var x; return function(a){return a+1}}\" +         \"var b=function(){return c};\" +         \"function _x(){ var d=b()+foo() }\",         \"function _x() { \\n\" +         \"  var JSCompiler_temp_const$$0 = c;\\n\" +         \"  {\\n\" +         \"  var JSCompiler_inline_result$$1;\\n\" +         \"  var x$$inline_2;\\n\" +         \"  JSCompiler_inline_result$$1 = \" +         \"      function(a$$inline_3) {return a$$inline_3+1};\\n\" +         \"  }\\n\" +         \"  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\\n\" +         \"}\");",
                "failed_line": 296
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions16a",
                "src": "  public void testInlineFunctions16a() {\n    assumeMinimumCapture = false;\n\n    testSame(\"function foo(b){return window.bar(function(){c(b)})}\" +\n         \"var d=foo(e)\");\n\n    assumeMinimumCapture = true;\n\n    test(\n        \"function foo(b){return window.bar(function(){c(b)})}\" +\n        \"var d=foo(e)\",\n        \"var d;{var b$$inline_0=e;\" +\n        \"d=window.bar(function(){c(b$$inline_0)})}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var d;var b$$inline_0=e;d=window.bar(function(){c(b$$inline_0)})\nResult: var d;var b$$inline_1=e;d=window.bar(function(){c(b$$inline_1)})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME b$$inline_0 1 [source_file: expected0]\n                    NAME e 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME d 1 [source_file: expected0]\n                    CALL 1 [source_file: expected0]\n                        GETPROP 1 [source_file: expected0]\n                            NAME window 1 [source_file: expected0]\n                            STRING bar 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                EXPR_RESULT 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME c 1 [source_file: expected0]\n                                        NAME b$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME b$$inline_1 1 [source_file: testcode]\n                    NAME e 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME d 1 [source_file: testcode]\n                    CALL 1 [source_file: testcode]\n                        GETPROP 1 [source_file: testcode]\n                            NAME window 1 [source_file: testcode]\n                            STRING bar 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                EXPR_RESULT 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME c 1 [source_file: testcode]\n                                        NAME b$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME b$$inline_0 1 [source_file: expected0]\n    NAME e 1 [source_file: expected0]\n\n\nSubtree2: NAME b$$inline_1 1 [source_file: testcode]\n    NAME e 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions16a(InlineFunctionsTest.java:320)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var d;var b$$inline_0=e;d=window.bar(function(){c(b$$inline_0)})\nResult: var d;var b$$inline_1=e;d=window.bar(function(){c(b$$inline_1)})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME b$$inline_0 1 [source_file: expected0]\n                    NAME e 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME d 1 [source_file: expected0]\n                    CALL 1 [source_file: expected0]\n                        GETPROP 1 [source_file: expected0]\n                            NAME window 1 [source_file: expected0]\n                            STRING bar 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                EXPR_RESULT 1 [source_file: expected0]\n                                    CALL 1 [free_call: 1] [source_file: expected0]\n                                        NAME c 1 [source_file: expected0]\n                                        NAME b$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME b$$inline_1 1 [source_file: testcode]\n                    NAME e 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME d 1 [source_file: testcode]\n                    CALL 1 [source_file: testcode]\n                        GETPROP 1 [source_file: testcode]\n                            NAME window 1 [source_file: testcode]\n                            STRING bar 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                EXPR_RESULT 1 [source_file: testcode]\n                                    CALL 1 [free_call: 1] [source_file: testcode]\n                                        NAME c 1 [source_file: testcode]\n                                        NAME b$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME b$$inline_0 1 [source_file: expected0]\n    NAME e 1 [source_file: expected0]\n\n\nSubtree2: NAME b$$inline_1 1 [source_file: testcode]\n    NAME e 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions16a(InlineFunctionsTest.java:320)  test(        \"function foo(b){return window.bar(function(){c(b)})}\" +        \"var d=foo(e)\",        \"var d;{var b$$inline_0=e;\" +        \"d=window.bar(function(){c(b$$inline_0)})}\");",
                "failed_line": 320
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testBug4944818",
                "src": "  public void testBug4944818() {\n    test(\n        \"var getDomServices_ = function(self) {\\n\" +\n        \"  if (!self.domServices_) {\\n\" +\n        \"    self.domServices_ = goog$component$DomServices.get(\" +\n        \"        self.appContext_);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  return self.domServices_;\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"var getOwnerWin_ = function(self) {\\n\" +\n        \"  return getDomServices_(self).getDomHelper().getWindow();\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"HangoutStarter.prototype.launchHangout = function() {\\n\" +\n        \"  var self = a.b;\\n\" +\n        \"  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\\n\" +\n        \"};\",\n        \"HangoutStarter.prototype.launchHangout = function() { \" +\n        \"  var self$$2 = a.b;\" +\n        \"  var JSCompiler_temp_const$$0 = goog.Uri;\" +\n        \"  {\" +\n        \"  var JSCompiler_inline_result$$1;\" +\n        \"  var self$$inline_2 = self$$2;\" +\n        \"  if (!self$$inline_2.domServices_) {\" +\n        \"    self$$inline_2.domServices_ = goog$component$DomServices.get(\" +\n        \"        self$$inline_2.appContext_);\" +\n        \"  }\" +\n        \"  JSCompiler_inline_result$$1=self$$inline_2.domServices_;\" +\n        \"  }\" +\n        \"  var myUrl = new JSCompiler_temp_const$$0(\" +\n        \"      JSCompiler_inline_result$$1.getDomHelper().\" +\n        \"          getWindow().location.href)\" +\n        \"}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: HangoutStarter.prototype.launchHangout=function(){var self$$2=a.b;var JSCompiler_temp_const$$0=goog.Uri;var JSCompiler_inline_result$$1;var self$$inline_2=self$$2;if(!self$$inline_2.domServices_)self$$inline_2.domServices_=goog$component$DomServices.get(self$$inline_2.appContext_);JSCompiler_inline_result$$1=self$$inline_2.domServices_;var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.getDomHelper().getWindow().location.href)}\nResult: HangoutStarter.prototype.launchHangout=function(){var self$$2=a.b;var JSCompiler_temp_const$$0=goog.Uri;var JSCompiler_inline_result$$1;var self$$inline_3=self$$2;if(!self$$inline_3.domServices_)self$$inline_3.domServices_=goog$component$DomServices.get(self$$inline_3.appContext_);JSCompiler_inline_result$$1=self$$inline_3.domServices_;var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.getDomHelper().getWindow().location.href)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    GETPROP 1 [source_file: expected0]\n                        NAME HangoutStarter 1 [source_file: expected0]\n                        STRING prototype 1 [source_file: expected0]\n                    STRING launchHangout 1 [source_file: expected0]\n                FUNCTION  1 [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    LP 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME self$$2 1 [source_file: expected0]\n                                GETPROP 1 [source_file: expected0]\n                                    NAME a 1 [source_file: expected0]\n                                    STRING b 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                                GETPROP 1 [source_file: expected0]\n                                    NAME goog 1 [source_file: expected0]\n                                    STRING Uri 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME self$$inline_2 1 [source_file: expected0]\n                                    NAME self$$2 1 [source_file: expected0]\n                            IF 1 [source_file: expected0]\n                                NOT 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME self$$inline_2 1 [source_file: expected0]\n                                        STRING domServices_ 1 [source_file: expected0]\n                                BLOCK 1 [source_file: expected0]\n                                    EXPR_RESULT 1 [source_file: expected0]\n                                        ASSIGN 1 [source_file: expected0]\n                                            GETPROP 1 [source_file: expected0]\n                                                NAME self$$inline_2 1 [source_file: expected0]\n                                                STRING domServices_ 1 [source_file: expected0]\n                                            CALL 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    NAME goog$component$DomServices 1 [source_file: expected0]\n                                                    STRING get 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    NAME self$$inline_2 1 [source_file: expected0]\n                                                    STRING appContext_ 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME self$$inline_2 1 [source_file: expected0]\n                                        STRING domServices_ 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME myUrl 1 [source_file: expected0]\n                                NEW 1 [source_file: expected0]\n                                    NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        GETPROP 1 [source_file: expected0]\n                                            CALL 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    CALL 1 [source_file: expected0]\n                                                        GETPROP 1 [source_file: expected0]\n                                                            NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                                                            STRING getDomHelper 1 [source_file: expected0]\n                                                    STRING getWindow 1 [source_file: expected0]\n                                            STRING location 1 [source_file: expected0]\n                                        STRING href 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        EXPR_RESULT 13 [source_file: testcode]\n            ASSIGN 13 [source_file: testcode]\n                GETPROP 13 [source_file: testcode]\n                    GETPROP 13 [source_file: testcode]\n                        NAME HangoutStarter 13 [source_file: testcode]\n                        STRING prototype 13 [source_file: testcode]\n                    STRING launchHangout 13 [source_file: testcode]\n                FUNCTION  13 [source_file: testcode]\n                    NAME  13 [source_file: testcode]\n                    LP 13 [source_file: testcode]\n                    BLOCK 13 [source_file: testcode]\n                        VAR 14 [source_file: testcode]\n                            NAME self$$2 14 [source_file: testcode]\n                                GETPROP 14 [source_file: testcode]\n                                    NAME a 14 [source_file: testcode]\n                                    STRING b 14 [source_file: testcode]\n                        VAR 15 [source_file: testcode]\n                            NAME JSCompiler_temp_const$$0 15 [source_file: testcode]\n                                GETPROP 15 [source_file: testcode]\n                                    NAME goog 15 [source_file: testcode]\n                                    STRING Uri 15 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            VAR 10 [source_file: testcode]\n                                NAME JSCompiler_inline_result$$1 10 [source_file: testcode]\n                            VAR 15 [source_file: testcode]\n                                NAME self$$inline_3 15 [source_file: testcode]\n                                    NAME self$$2 15 [source_file: testcode]\n                            IF 2 [source_file: testcode]\n                                NOT 2 [source_file: testcode]\n                                    GETPROP 2 [source_file: testcode]\n                                        NAME self$$inline_3 2 [source_file: testcode]\n                                        STRING domServices_ 2 [source_file: testcode]\n                                BLOCK 2 [source_file: testcode]\n                                    EXPR_RESULT 3 [source_file: testcode]\n                                        ASSIGN 3 [source_file: testcode]\n                                            GETPROP 3 [source_file: testcode]\n                                                NAME self$$inline_3 3 [source_file: testcode]\n                                                STRING domServices_ 3 [source_file: testcode]\n                                            CALL 3 [source_file: testcode]\n                                                GETPROP 3 [source_file: testcode]\n                                                    NAME goog$component$DomServices 3 [source_file: testcode]\n                                                    STRING get 3 [source_file: testcode]\n                                                GETPROP 3 [source_file: testcode]\n                                                    NAME self$$inline_3 3 [source_file: testcode]\n                                                    STRING appContext_ 3 [source_file: testcode]\n                            EXPR_RESULT 6 [source_file: testcode]\n                                ASSIGN 6 [source_file: testcode]\n                                    NAME JSCompiler_inline_result$$1 6 [source_file: testcode]\n                                    GETPROP 6 [source_file: testcode]\n                                        NAME self$$inline_3 6 [source_file: testcode]\n                                        STRING domServices_ 6 [source_file: testcode]\n                        VAR 15 [source_file: testcode]\n                            NAME myUrl 15 [source_file: testcode]\n                                NEW 15 [source_file: testcode]\n                                    NAME JSCompiler_temp_const$$0 15 [source_file: testcode]\n                                    GETPROP 15 [source_file: testcode]\n                                        GETPROP 15 [source_file: testcode]\n                                            CALL 10 [source_file: testcode]\n                                                GETPROP 10 [source_file: testcode]\n                                                    CALL 10 [source_file: testcode]\n                                                        GETPROP 10 [source_file: testcode]\n                                                            NAME JSCompiler_inline_result$$1 10 [source_file: testcode]\n                                                            STRING getDomHelper 10 [source_file: testcode]\n                                                    STRING getWindow 10 [source_file: testcode]\n                                            STRING location 15 [source_file: testcode]\n                                        STRING href 15 [source_file: testcode]\n\n\nSubtree1: NAME self$$inline_2 1 [source_file: expected0]\n    NAME self$$2 1 [source_file: expected0]\n\n\nSubtree2: NAME self$$inline_3 15 [source_file: testcode]\n    NAME self$$2 15 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testBug4944818(InlineFunctionsTest.java:2077)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: HangoutStarter.prototype.launchHangout=function(){var self$$2=a.b;var JSCompiler_temp_const$$0=goog.Uri;var JSCompiler_inline_result$$1;var self$$inline_2=self$$2;if(!self$$inline_2.domServices_)self$$inline_2.domServices_=goog$component$DomServices.get(self$$inline_2.appContext_);JSCompiler_inline_result$$1=self$$inline_2.domServices_;var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.getDomHelper().getWindow().location.href)}\nResult: HangoutStarter.prototype.launchHangout=function(){var self$$2=a.b;var JSCompiler_temp_const$$0=goog.Uri;var JSCompiler_inline_result$$1;var self$$inline_3=self$$2;if(!self$$inline_3.domServices_)self$$inline_3.domServices_=goog$component$DomServices.get(self$$inline_3.appContext_);JSCompiler_inline_result$$1=self$$inline_3.domServices_;var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.getDomHelper().getWindow().location.href)}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        EXPR_RESULT 1 [source_file: expected0]\n            ASSIGN 1 [source_file: expected0]\n                GETPROP 1 [source_file: expected0]\n                    GETPROP 1 [source_file: expected0]\n                        NAME HangoutStarter 1 [source_file: expected0]\n                        STRING prototype 1 [source_file: expected0]\n                    STRING launchHangout 1 [source_file: expected0]\n                FUNCTION  1 [source_file: expected0]\n                    NAME  1 [source_file: expected0]\n                    LP 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME self$$2 1 [source_file: expected0]\n                                GETPROP 1 [source_file: expected0]\n                                    NAME a 1 [source_file: expected0]\n                                    STRING b 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                                GETPROP 1 [source_file: expected0]\n                                    NAME goog 1 [source_file: expected0]\n                                    STRING Uri 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME self$$inline_2 1 [source_file: expected0]\n                                    NAME self$$2 1 [source_file: expected0]\n                            IF 1 [source_file: expected0]\n                                NOT 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME self$$inline_2 1 [source_file: expected0]\n                                        STRING domServices_ 1 [source_file: expected0]\n                                BLOCK 1 [source_file: expected0]\n                                    EXPR_RESULT 1 [source_file: expected0]\n                                        ASSIGN 1 [source_file: expected0]\n                                            GETPROP 1 [source_file: expected0]\n                                                NAME self$$inline_2 1 [source_file: expected0]\n                                                STRING domServices_ 1 [source_file: expected0]\n                                            CALL 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    NAME goog$component$DomServices 1 [source_file: expected0]\n                                                    STRING get 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    NAME self$$inline_2 1 [source_file: expected0]\n                                                    STRING appContext_ 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME self$$inline_2 1 [source_file: expected0]\n                                        STRING domServices_ 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME myUrl 1 [source_file: expected0]\n                                NEW 1 [source_file: expected0]\n                                    NAME JSCompiler_temp_const$$0 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        GETPROP 1 [source_file: expected0]\n                                            CALL 1 [source_file: expected0]\n                                                GETPROP 1 [source_file: expected0]\n                                                    CALL 1 [source_file: expected0]\n                                                        GETPROP 1 [source_file: expected0]\n                                                            NAME JSCompiler_inline_result$$1 1 [source_file: expected0]\n                                                            STRING getDomHelper 1 [source_file: expected0]\n                                                    STRING getWindow 1 [source_file: expected0]\n                                            STRING location 1 [source_file: expected0]\n                                        STRING href 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        EXPR_RESULT 13 [source_file: testcode]\n            ASSIGN 13 [source_file: testcode]\n                GETPROP 13 [source_file: testcode]\n                    GETPROP 13 [source_file: testcode]\n                        NAME HangoutStarter 13 [source_file: testcode]\n                        STRING prototype 13 [source_file: testcode]\n                    STRING launchHangout 13 [source_file: testcode]\n                FUNCTION  13 [source_file: testcode]\n                    NAME  13 [source_file: testcode]\n                    LP 13 [source_file: testcode]\n                    BLOCK 13 [source_file: testcode]\n                        VAR 14 [source_file: testcode]\n                            NAME self$$2 14 [source_file: testcode]\n                                GETPROP 14 [source_file: testcode]\n                                    NAME a 14 [source_file: testcode]\n                                    STRING b 14 [source_file: testcode]\n                        VAR 15 [source_file: testcode]\n                            NAME JSCompiler_temp_const$$0 15 [source_file: testcode]\n                                GETPROP 15 [source_file: testcode]\n                                    NAME goog 15 [source_file: testcode]\n                                    STRING Uri 15 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            VAR 10 [source_file: testcode]\n                                NAME JSCompiler_inline_result$$1 10 [source_file: testcode]\n                            VAR 15 [source_file: testcode]\n                                NAME self$$inline_3 15 [source_file: testcode]\n                                    NAME self$$2 15 [source_file: testcode]\n                            IF 2 [source_file: testcode]\n                                NOT 2 [source_file: testcode]\n                                    GETPROP 2 [source_file: testcode]\n                                        NAME self$$inline_3 2 [source_file: testcode]\n                                        STRING domServices_ 2 [source_file: testcode]\n                                BLOCK 2 [source_file: testcode]\n                                    EXPR_RESULT 3 [source_file: testcode]\n                                        ASSIGN 3 [source_file: testcode]\n                                            GETPROP 3 [source_file: testcode]\n                                                NAME self$$inline_3 3 [source_file: testcode]\n                                                STRING domServices_ 3 [source_file: testcode]\n                                            CALL 3 [source_file: testcode]\n                                                GETPROP 3 [source_file: testcode]\n                                                    NAME goog$component$DomServices 3 [source_file: testcode]\n                                                    STRING get 3 [source_file: testcode]\n                                                GETPROP 3 [source_file: testcode]\n                                                    NAME self$$inline_3 3 [source_file: testcode]\n                                                    STRING appContext_ 3 [source_file: testcode]\n                            EXPR_RESULT 6 [source_file: testcode]\n                                ASSIGN 6 [source_file: testcode]\n                                    NAME JSCompiler_inline_result$$1 6 [source_file: testcode]\n                                    GETPROP 6 [source_file: testcode]\n                                        NAME self$$inline_3 6 [source_file: testcode]\n                                        STRING domServices_ 6 [source_file: testcode]\n                        VAR 15 [source_file: testcode]\n                            NAME myUrl 15 [source_file: testcode]\n                                NEW 15 [source_file: testcode]\n                                    NAME JSCompiler_temp_const$$0 15 [source_file: testcode]\n                                    GETPROP 15 [source_file: testcode]\n                                        GETPROP 15 [source_file: testcode]\n                                            CALL 10 [source_file: testcode]\n                                                GETPROP 10 [source_file: testcode]\n                                                    CALL 10 [source_file: testcode]\n                                                        GETPROP 10 [source_file: testcode]\n                                                            NAME JSCompiler_inline_result$$1 10 [source_file: testcode]\n                                                            STRING getDomHelper 10 [source_file: testcode]\n                                                    STRING getWindow 10 [source_file: testcode]\n                                            STRING location 15 [source_file: testcode]\n                                        STRING href 15 [source_file: testcode]\n\n\nSubtree1: NAME self$$inline_2 1 [source_file: expected0]\n    NAME self$$2 1 [source_file: expected0]\n\n\nSubtree2: NAME self$$inline_3 15 [source_file: testcode]\n    NAME self$$2 15 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testBug4944818(InlineFunctionsTest.java:2077)  test(        \"var getDomServices_ = function(self) {\\n\" +        \"  if (!self.domServices_) {\\n\" +        \"    self.domServices_ = goog$component$DomServices.get(\" +        \"        self.appContext_);\\n\" +        \"  }\\n\" +        \"\\n\" +        \"  return self.domServices_;\\n\" +        \"};\\n\" +        \"\\n\" +        \"var getOwnerWin_ = function(self) {\\n\" +        \"  return getDomServices_(self).getDomHelper().getWindow();\\n\" +        \"};\\n\" +        \"\\n\" +        \"HangoutStarter.prototype.launchHangout = function() {\\n\" +        \"  var self = a.b;\\n\" +        \"  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\\n\" +        \"};\",        \"HangoutStarter.prototype.launchHangout = function() { \" +        \"  var self$$2 = a.b;\" +        \"  var JSCompiler_temp_const$$0 = goog.Uri;\" +        \"  {\" +        \"  var JSCompiler_inline_result$$1;\" +        \"  var self$$inline_2 = self$$2;\" +        \"  if (!self$$inline_2.domServices_) {\" +        \"    self$$inline_2.domServices_ = goog$component$DomServices.get(\" +        \"        self$$inline_2.appContext_);\" +        \"  }\" +        \"  JSCompiler_inline_result$$1=self$$inline_2.domServices_;\" +        \"  }\" +        \"  var myUrl = new JSCompiler_temp_const$$0(\" +        \"      JSCompiler_inline_result$$1.getDomHelper().\" +        \"          getWindow().location.href)\" +        \"}\");",
                "failed_line": 2077
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexSample",
                "src": "  public void testComplexSample() {\n    String result = \"\" +\n      \"{{\" +\n      \"var styleSheet$$inline_2=null;\" +\n      \"if(goog$userAgent$IE)\" +\n        \"styleSheet$$inline_2=0;\" +\n      \"else \" +\n        \"var head$$inline_3=0;\" +\n      \"{\" +\n        \"var element$$inline_4=\" +\n            \"styleSheet$$inline_2;\" +\n        \"var stylesString$$inline_5=a;\" +\n        \"if(goog$userAgent$IE)\" +\n          \"element$$inline_4.cssText=\" +\n              \"stylesString$$inline_5;\" +\n        \"else \" +\n        \"{\" +\n          \"var propToSet$$inline_6=\" +\n              \"\\\"innerText\\\";\" +\n          \"element$$inline_4[\" +\n              \"propToSet$$inline_6]=\" +\n                  \"stylesString$$inline_5\" +\n        \"}\" +\n      \"}\" +\n      \"styleSheet$$inline_2\" +\n      \"}}\";\n\n    test(\"var foo = function(stylesString, opt_element) { \" +\n        \"var styleSheet = null;\" +\n        \"if (goog$userAgent$IE)\" +\n          \"styleSheet = 0;\" +\n        \"else \" +\n          \"var head = 0;\" +\n        \"\" +\n        \"goo$zoo(styleSheet, stylesString);\" +\n        \"return styleSheet;\" +\n     \" };\\n \" +\n\n     \"var goo$zoo = function(element, stylesString) {\" +\n        \"if (goog$userAgent$IE)\" +\n          \"element.cssText = stylesString;\" +\n        \"else {\" +\n          \"var propToSet = 'innerText';\" +\n          \"element[propToSet] = stylesString;\" +\n        \"}\" +\n      \"};\" +\n      \"(function(){foo(a,b);})();\",\n     result);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var styleSheet$$inline_2=null;if(goog$userAgent$IE)styleSheet$$inline_2=0;else var head$$inline_3=0;var element$$inline_4=styleSheet$$inline_2;var stylesString$$inline_5=a;if(goog$userAgent$IE)element$$inline_4.cssText=stylesString$$inline_5;else{var propToSet$$inline_6=\"innerText\";element$$inline_4[propToSet$$inline_6]=stylesString$$inline_5}styleSheet$$inline_2\nResult: var styleSheet$$inline_9=null;if(goog$userAgent$IE)styleSheet$$inline_9=0;else var head$$inline_10=0;var element$$inline_11=styleSheet$$inline_9;var stylesString$$inline_12=a;if(goog$userAgent$IE)element$$inline_11.cssText=stylesString$$inline_12;else{var propToSet$$inline_13=\"innerText\";element$$inline_11[propToSet$$inline_13]=stylesString$$inline_12}styleSheet$$inline_9\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME styleSheet$$inline_2 1 [source_file: expected0]\n                        NULL 1 [source_file: expected0]\n                IF 1 [source_file: expected0]\n                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME styleSheet$$inline_2 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME head$$inline_3 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME element$$inline_4 1 [source_file: expected0]\n                            NAME styleSheet$$inline_2 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME stylesString$$inline_5 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME element$$inline_4 1 [source_file: expected0]\n                                        STRING cssText 1 [source_file: expected0]\n                                    NAME stylesString$$inline_5 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME propToSet$$inline_6 1 [source_file: expected0]\n                                    STRING innerText 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    GETELEM 1 [source_file: expected0]\n                                        NAME element$$inline_4 1 [source_file: expected0]\n                                        NAME propToSet$$inline_6 1 [source_file: expected0]\n                                    NAME stylesString$$inline_5 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME styleSheet$$inline_2 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 2 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME styleSheet$$inline_9 1 [source_file: testcode]\n                        NULL 1 [source_file: testcode]\n                IF 1 [source_file: testcode]\n                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME styleSheet$$inline_9 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        VAR 1 [source_file: testcode]\n                            NAME head$$inline_10 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n                BLOCK 2 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME element$$inline_11 1 [source_file: testcode]\n                            NAME styleSheet$$inline_9 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME stylesString$$inline_12 1 [source_file: testcode]\n                            NAME a 2 [source_file: testcode]\n                    IF 2 [source_file: testcode]\n                        NAME goog$userAgent$IE 2 [is_constant_name: 1] [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            EXPR_RESULT 2 [source_file: testcode]\n                                ASSIGN 2 [source_file: testcode]\n                                    GETPROP 2 [source_file: testcode]\n                                        NAME element$$inline_11 2 [source_file: testcode]\n                                        STRING cssText 2 [source_file: testcode]\n                                    NAME stylesString$$inline_12 2 [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            VAR 2 [source_file: testcode]\n                                NAME propToSet$$inline_13 2 [source_file: testcode]\n                                    STRING innerText 2 [source_file: testcode]\n                            EXPR_RESULT 2 [source_file: testcode]\n                                ASSIGN 2 [source_file: testcode]\n                                    GETELEM 2 [source_file: testcode]\n                                        NAME element$$inline_11 2 [source_file: testcode]\n                                        NAME propToSet$$inline_13 2 [source_file: testcode]\n                                    NAME stylesString$$inline_12 2 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME styleSheet$$inline_9 1 [source_file: testcode]\n\n\nSubtree1: NAME styleSheet$$inline_2 1 [source_file: expected0]\n    NULL 1 [source_file: expected0]\n\n\nSubtree2: NAME styleSheet$$inline_9 1 [source_file: testcode]\n    NULL 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexSample(InlineFunctionsTest.java:1418)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var styleSheet$$inline_2=null;if(goog$userAgent$IE)styleSheet$$inline_2=0;else var head$$inline_3=0;var element$$inline_4=styleSheet$$inline_2;var stylesString$$inline_5=a;if(goog$userAgent$IE)element$$inline_4.cssText=stylesString$$inline_5;else{var propToSet$$inline_6=\"innerText\";element$$inline_4[propToSet$$inline_6]=stylesString$$inline_5}styleSheet$$inline_2\nResult: var styleSheet$$inline_9=null;if(goog$userAgent$IE)styleSheet$$inline_9=0;else var head$$inline_10=0;var element$$inline_11=styleSheet$$inline_9;var stylesString$$inline_12=a;if(goog$userAgent$IE)element$$inline_11.cssText=stylesString$$inline_12;else{var propToSet$$inline_13=\"innerText\";element$$inline_11[propToSet$$inline_13]=stylesString$$inline_12}styleSheet$$inline_9\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME styleSheet$$inline_2 1 [source_file: expected0]\n                        NULL 1 [source_file: expected0]\n                IF 1 [source_file: expected0]\n                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME styleSheet$$inline_2 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME head$$inline_3 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME element$$inline_4 1 [source_file: expected0]\n                            NAME styleSheet$$inline_2 1 [source_file: expected0]\n                    VAR 1 [source_file: expected0]\n                        NAME stylesString$$inline_5 1 [source_file: expected0]\n                            NAME a 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    GETPROP 1 [source_file: expected0]\n                                        NAME element$$inline_4 1 [source_file: expected0]\n                                        STRING cssText 1 [source_file: expected0]\n                                    NAME stylesString$$inline_5 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            VAR 1 [source_file: expected0]\n                                NAME propToSet$$inline_6 1 [source_file: expected0]\n                                    STRING innerText 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    GETELEM 1 [source_file: expected0]\n                                        NAME element$$inline_4 1 [source_file: expected0]\n                                        NAME propToSet$$inline_6 1 [source_file: expected0]\n                                    NAME stylesString$$inline_5 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    NAME styleSheet$$inline_2 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 2 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME styleSheet$$inline_9 1 [source_file: testcode]\n                        NULL 1 [source_file: testcode]\n                IF 1 [source_file: testcode]\n                    NAME goog$userAgent$IE 1 [is_constant_name: 1] [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME styleSheet$$inline_9 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        VAR 1 [source_file: testcode]\n                            NAME head$$inline_10 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n                BLOCK 2 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME element$$inline_11 1 [source_file: testcode]\n                            NAME styleSheet$$inline_9 1 [source_file: testcode]\n                    VAR 1 [source_file: testcode]\n                        NAME stylesString$$inline_12 1 [source_file: testcode]\n                            NAME a 2 [source_file: testcode]\n                    IF 2 [source_file: testcode]\n                        NAME goog$userAgent$IE 2 [is_constant_name: 1] [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            EXPR_RESULT 2 [source_file: testcode]\n                                ASSIGN 2 [source_file: testcode]\n                                    GETPROP 2 [source_file: testcode]\n                                        NAME element$$inline_11 2 [source_file: testcode]\n                                        STRING cssText 2 [source_file: testcode]\n                                    NAME stylesString$$inline_12 2 [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            VAR 2 [source_file: testcode]\n                                NAME propToSet$$inline_13 2 [source_file: testcode]\n                                    STRING innerText 2 [source_file: testcode]\n                            EXPR_RESULT 2 [source_file: testcode]\n                                ASSIGN 2 [source_file: testcode]\n                                    GETELEM 2 [source_file: testcode]\n                                        NAME element$$inline_11 2 [source_file: testcode]\n                                        NAME propToSet$$inline_13 2 [source_file: testcode]\n                                    NAME stylesString$$inline_12 2 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    NAME styleSheet$$inline_9 1 [source_file: testcode]\n\n\nSubtree1: NAME styleSheet$$inline_2 1 [source_file: expected0]\n    NULL 1 [source_file: expected0]\n\n\nSubtree2: NAME styleSheet$$inline_9 1 [source_file: testcode]\n    NULL 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexSample(InlineFunctionsTest.java:1418)  test(\"var foo = function(stylesString, opt_element) { \" +        \"var styleSheet = null;\" +        \"if (goog$userAgent$IE)\" +          \"styleSheet = 0;\" +        \"else \" +          \"var head = 0;\" +        \"\" +        \"goo$zoo(styleSheet, stylesString);\" +        \"return styleSheet;\" +     \" };\\n \" +     \"var goo$zoo = function(element, stylesString) {\" +        \"if (goog$userAgent$IE)\" +          \"element.cssText = stylesString;\" +        \"else {\" +          \"var propToSet = 'innerText';\" +          \"element[propToSet] = stylesString;\" +        \"}\" +      \"};\" +      \"(function(){foo(a,b);})();\",     result);",
                "failed_line": 1418
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified1",
                "src": "  public void testNoInlineIfParametersModified1() {\n    // Assignment\n    test(\"function f(x){return x=1}f(undefined)\",\n         \"{var x$$inline_0=undefined;\" +\n         \"x$$inline_0=1}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=undefined;x$$inline_0=1\nResult: var x$$inline_1=undefined;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified1(InlineFunctionsTest.java:549)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=undefined;x$$inline_0=1\nResult: var x$$inline_1=undefined;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified1(InlineFunctionsTest.java:549)  test(\"function f(x){return x=1}f(undefined)\",         \"{var x$$inline_0=undefined;\" +         \"x$$inline_0=1}\");",
                "failed_line": 549
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified2",
                "src": "  public void testNoInlineIfParametersModified2() {\n    test(\"function f(x){return (x)=1;}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0=1}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0=1\nResult: var x$$inline_1=2;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [parenthesized: true] [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified2(InlineFunctionsTest.java:555)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0=1\nResult: var x$$inline_1=2;x$$inline_1=1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [parenthesized: true] [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified2(InlineFunctionsTest.java:555)  test(\"function f(x){return (x)=1;}f(2)\",         \"{var x$$inline_0=2;\" +         \"x$$inline_0=1}\");",
                "failed_line": 555
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified3",
                "src": "  public void testNoInlineIfParametersModified3() {\n    // Assignment variant.\n    test(\"function f(x){return x*=2}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0*=2}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0*=2\nResult: var x$$inline_1=2;x$$inline_1*=2\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN_MUL 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN_MUL 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified3(InlineFunctionsTest.java:562)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0*=2\nResult: var x$$inline_1=2;x$$inline_1*=2\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN_MUL 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN_MUL 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified3(InlineFunctionsTest.java:562)  test(\"function f(x){return x*=2}f(2)\",         \"{var x$$inline_0=2;\" +         \"x$$inline_0*=2}\");",
                "failed_line": 562
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified4",
                "src": "  public void testNoInlineIfParametersModified4() {\n    // Assignment in if.\n    test(\"function f(x){return x?(x=2):0}f(2)\",\n         \"{var x$$inline_0=2;\" +\n         \"x$$inline_0?(\" +\n         \"x$$inline_0=2):0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0?x$$inline_0=2:0\nResult: var x$$inline_1=2;x$$inline_1?x$$inline_1=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified4(InlineFunctionsTest.java:569)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=2;x$$inline_0?x$$inline_0=2:0\nResult: var x$$inline_1=2;x$$inline_1?x$$inline_1=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NUMBER 2.0 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NUMBER 2.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified4(InlineFunctionsTest.java:569)  test(\"function f(x){return x?(x=2):0}f(2)\",         \"{var x$$inline_0=2;\" +         \"x$$inline_0?(\" +         \"x$$inline_0=2):0}\");",
                "failed_line": 569
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified5",
                "src": "  public void testNoInlineIfParametersModified5() {\n    // Assignment in if, multiple params\n    test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",\n         \"{var y$$inline_1=undefined;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var y$$inline_1=undefined;2?y$$inline_1=2:0\nResult: var y$$inline_3=undefined;2?y$$inline_3=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME y$$inline_1 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME y$$inline_1 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME y$$inline_3 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME y$$inline_3 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME y$$inline_1 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME y$$inline_3 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified5(InlineFunctionsTest.java:577)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var y$$inline_1=undefined;2?y$$inline_1=2:0\nResult: var y$$inline_3=undefined;2?y$$inline_3=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME y$$inline_1 1 [source_file: expected0]\n                    NAME undefined 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME y$$inline_1 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME y$$inline_3 1 [source_file: testcode]\n                    NAME undefined 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME y$$inline_3 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME y$$inline_1 1 [source_file: expected0]\n    NAME undefined 1 [source_file: expected0]\n\n\nSubtree2: NAME y$$inline_3 1 [source_file: testcode]\n    NAME undefined 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified5(InlineFunctionsTest.java:577)  test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",         \"{var y$$inline_1=undefined;2?(\" +         \"y$$inline_1=2):0}\");",
                "failed_line": 577
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified6",
                "src": "  public void testNoInlineIfParametersModified6() {\n    test(\"function f(x,y){return x?(y=2):0}f(2)\",\n         \"{var y$$inline_1=void 0;2?(\" +\n         \"y$$inline_1=2):0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var y$$inline_1=void 0;2?y$$inline_1=2:0\nResult: var y$$inline_3=void 0;2?y$$inline_3=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME y$$inline_1 1 [source_file: expected0]\n                    VOID 1 [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME y$$inline_1 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME y$$inline_3 1 [source_file: testcode]\n                    VOID 1 [source_file: testcode]\n                        NUMBER 0.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME y$$inline_3 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME y$$inline_1 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME y$$inline_3 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified6(InlineFunctionsTest.java:583)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var y$$inline_1=void 0;2?y$$inline_1=2:0\nResult: var y$$inline_3=void 0;2?y$$inline_3=2:0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME y$$inline_1 1 [source_file: expected0]\n                    VOID 1 [source_file: expected0]\n                        NUMBER 0.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                HOOK 1 [source_file: expected0]\n                    NUMBER 2.0 1 [source_file: expected0]\n                    ASSIGN 1 [parenthesized: true] [source_file: expected0]\n                        NAME y$$inline_1 1 [source_file: expected0]\n                        NUMBER 2.0 1 [source_file: expected0]\n                    NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME y$$inline_3 1 [source_file: testcode]\n                    VOID 1 [source_file: testcode]\n                        NUMBER 0.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                HOOK 1 [source_file: testcode]\n                    NUMBER 2.0 1 [source_file: testcode]\n                    ASSIGN 1 [parenthesized: true] [source_file: testcode]\n                        NAME y$$inline_3 1 [source_file: testcode]\n                        NUMBER 2.0 1 [source_file: testcode]\n                    NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: NAME y$$inline_1 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME y$$inline_3 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified6(InlineFunctionsTest.java:583)  test(\"function f(x,y){return x?(y=2):0}f(2)\",         \"{var y$$inline_1=void 0;2?(\" +         \"y$$inline_1=2):0}\");",
                "failed_line": 583
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testNoInlineIfParametersModified7",
                "src": "  public void testNoInlineIfParametersModified7() {\n    // Increment\n    test(\"function f(a){return++a<++a}f(1)\",\n         \"{var a$$inline_0=1;\" +\n         \"++a$$inline_0<\" +\n         \"++a$$inline_0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=1;++a$$inline_0<++a$$inline_0\nResult: var a$$inline_1=1;++a$$inline_1<++a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                LT 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                LT 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified7(InlineFunctionsTest.java:590)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=1;++a$$inline_0<++a$$inline_0\nResult: var a$$inline_1=1;++a$$inline_1<++a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                LT 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                LT 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testNoInlineIfParametersModified7(InlineFunctionsTest.java:590)  test(\"function f(a){return++a<++a}f(1)\",         \"{var a$$inline_0=1;\" +         \"++a$$inline_0<\" +         \"++a$$inline_0}\");",
                "failed_line": 590
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testIssue423": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testIssue423",
                "src": "  public void testIssue423() {\n    assumeMinimumCapture = false;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"(function($){\" +\n        \"  $.fn.multicheck=function(options$$1){\" +\n        \"    {\" +\n        \"     options$$1.checkboxes=$(this).siblings(\\\":checkbox\\\");\" +\n        \"     {\" +\n        \"       $(this).data(\\\"checkboxes\\\")\" +\n        \"     }\" +\n        \"    }\" +\n        \"  }\" +\n        \"})(jQuery)\");\n\n    assumeMinimumCapture = true;\n    test(\n        \"(function($) {\\n\" +\n        \"  $.fn.multicheck = function(options) {\\n\" +\n        \"    initialize.call(this, options);\\n\" +\n        \"  };\\n\" +\n        \"\\n\" +\n        \"  function initialize(options) {\\n\" +\n        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +\n        \"    preload_check_all.call(this);\\n\" +\n        \"  }\\n\" +\n        \"\\n\" +\n        \"  function preload_check_all() {\\n\" +\n        \"    $(this).data('checkboxes');\\n\" +\n        \"  }\\n\" +\n        \"})(jQuery)\",\n        \"{var $$$inline_0=jQuery;\\n\" +\n        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +\n        \"  {options$$inline_4.checkboxes=\" +\n            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +\n        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +\n        \"  }\\n\" +\n        \"}\\n\" +\n        \"}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var $$$inline_0=jQuery;$$$inline_0.fn.multicheck=function(options$$inline_4){options$$inline_4.checkboxes=$$$inline_0(this).siblings(\":checkbox\");$$$inline_0(this).data(\"checkboxes\")}\nResult: var $$$inline_3=jQuery;$$$inline_3.fn.multicheck=function(options$$inline_7){options$$inline_7.checkboxes=$$$inline_3(this).siblings(\":checkbox\");$$$inline_3(this).data(\"checkboxes\")}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME $$$inline_0 1 [source_file: expected0]\n                    NAME jQuery 1 [source_file: expected0]\n            EXPR_RESULT 2 [source_file: expected0]\n                ASSIGN 2 [source_file: expected0]\n                    GETPROP 2 [source_file: expected0]\n                        GETPROP 2 [source_file: expected0]\n                            NAME $$$inline_0 2 [source_file: expected0]\n                            STRING fn 2 [source_file: expected0]\n                        STRING multicheck 2 [source_file: expected0]\n                    FUNCTION  2 [source_file: expected0]\n                        NAME  2 [source_file: expected0]\n                        LP 2 [source_file: expected0]\n                            NAME options$$inline_4 2 [source_file: expected0]\n                        BLOCK 2 [source_file: expected0]\n                            BLOCK 3 [source_file: expected0]\n                                EXPR_RESULT 3 [source_file: expected0]\n                                    ASSIGN 3 [source_file: expected0]\n                                        GETPROP 3 [source_file: expected0]\n                                            NAME options$$inline_4 3 [source_file: expected0]\n                                            STRING checkboxes 3 [source_file: expected0]\n                                        CALL 3 [source_file: expected0]\n                                            GETPROP 3 [source_file: expected0]\n                                                CALL 3 [free_call: 1] [source_file: expected0]\n                                                    NAME $$$inline_0 3 [source_file: expected0]\n                                                    THIS 3 [source_file: expected0]\n                                                STRING siblings 3 [source_file: expected0]\n                                            STRING :checkbox 3 [source_file: expected0]\n                                BLOCK 4 [source_file: expected0]\n                                    EXPR_RESULT 4 [source_file: expected0]\n                                        CALL 4 [source_file: expected0]\n                                            GETPROP 4 [source_file: expected0]\n                                                CALL 4 [free_call: 1] [source_file: expected0]\n                                                    NAME $$$inline_0 4 [source_file: expected0]\n                                                    THIS 4 [source_file: expected0]\n                                                STRING data 4 [source_file: expected0]\n                                            STRING checkboxes 4 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 14 [source_file: testcode]\n                NAME $$$inline_3 14 [source_file: testcode]\n                    NAME jQuery 14 [source_file: testcode]\n            EXPR_RESULT 2 [source_file: testcode]\n                ASSIGN 2 [source_file: testcode]\n                    GETPROP 2 [source_file: testcode]\n                        GETPROP 2 [source_file: testcode]\n                            NAME $$$inline_3 2 [source_file: testcode]\n                            STRING fn 2 [source_file: testcode]\n                        STRING multicheck 2 [source_file: testcode]\n                    FUNCTION  2 [source_file: testcode]\n                        NAME  2 [source_file: testcode]\n                        LP 2 [source_file: testcode]\n                            NAME options$$inline_7 2 [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            BLOCK 6 [source_file: testcode]\n                                EXPR_RESULT 7 [source_file: testcode]\n                                    ASSIGN 7 [source_file: testcode]\n                                        GETPROP 7 [source_file: testcode]\n                                            NAME options$$inline_7 3 [source_file: testcode]\n                                            STRING checkboxes 7 [source_file: testcode]\n                                        CALL 7 [source_file: testcode]\n                                            GETPROP 7 [source_file: testcode]\n                                                CALL 7 [free_call: 1] [source_file: testcode]\n                                                    NAME $$$inline_3 7 [source_file: testcode]\n                                                    THIS 7 [source_file: testcode]\n                                                STRING siblings 7 [source_file: testcode]\n                                            STRING :checkbox 7 [source_file: testcode]\n                                BLOCK 11 [source_file: testcode]\n                                    EXPR_RESULT 12 [source_file: testcode]\n                                        CALL 12 [source_file: testcode]\n                                            GETPROP 12 [source_file: testcode]\n                                                CALL 12 [free_call: 1] [source_file: testcode]\n                                                    NAME $$$inline_3 12 [source_file: testcode]\n                                                    THIS 12 [source_file: testcode]\n                                                STRING data 12 [source_file: testcode]\n                                            STRING checkboxes 12 [source_file: testcode]\n\n\nSubtree1: NAME $$$inline_0 1 [source_file: expected0]\n    NAME jQuery 1 [source_file: expected0]\n\n\nSubtree2: NAME $$$inline_3 14 [source_file: testcode]\n    NAME jQuery 14 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testIssue423(InlineFunctionsTest.java:2142)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var $$$inline_0=jQuery;$$$inline_0.fn.multicheck=function(options$$inline_4){options$$inline_4.checkboxes=$$$inline_0(this).siblings(\":checkbox\");$$$inline_0(this).data(\"checkboxes\")}\nResult: var $$$inline_3=jQuery;$$$inline_3.fn.multicheck=function(options$$inline_7){options$$inline_7.checkboxes=$$$inline_3(this).siblings(\":checkbox\");$$$inline_3(this).data(\"checkboxes\")}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME $$$inline_0 1 [source_file: expected0]\n                    NAME jQuery 1 [source_file: expected0]\n            EXPR_RESULT 2 [source_file: expected0]\n                ASSIGN 2 [source_file: expected0]\n                    GETPROP 2 [source_file: expected0]\n                        GETPROP 2 [source_file: expected0]\n                            NAME $$$inline_0 2 [source_file: expected0]\n                            STRING fn 2 [source_file: expected0]\n                        STRING multicheck 2 [source_file: expected0]\n                    FUNCTION  2 [source_file: expected0]\n                        NAME  2 [source_file: expected0]\n                        LP 2 [source_file: expected0]\n                            NAME options$$inline_4 2 [source_file: expected0]\n                        BLOCK 2 [source_file: expected0]\n                            BLOCK 3 [source_file: expected0]\n                                EXPR_RESULT 3 [source_file: expected0]\n                                    ASSIGN 3 [source_file: expected0]\n                                        GETPROP 3 [source_file: expected0]\n                                            NAME options$$inline_4 3 [source_file: expected0]\n                                            STRING checkboxes 3 [source_file: expected0]\n                                        CALL 3 [source_file: expected0]\n                                            GETPROP 3 [source_file: expected0]\n                                                CALL 3 [free_call: 1] [source_file: expected0]\n                                                    NAME $$$inline_0 3 [source_file: expected0]\n                                                    THIS 3 [source_file: expected0]\n                                                STRING siblings 3 [source_file: expected0]\n                                            STRING :checkbox 3 [source_file: expected0]\n                                BLOCK 4 [source_file: expected0]\n                                    EXPR_RESULT 4 [source_file: expected0]\n                                        CALL 4 [source_file: expected0]\n                                            GETPROP 4 [source_file: expected0]\n                                                CALL 4 [free_call: 1] [source_file: expected0]\n                                                    NAME $$$inline_0 4 [source_file: expected0]\n                                                    THIS 4 [source_file: expected0]\n                                                STRING data 4 [source_file: expected0]\n                                            STRING checkboxes 4 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 14 [source_file: testcode]\n                NAME $$$inline_3 14 [source_file: testcode]\n                    NAME jQuery 14 [source_file: testcode]\n            EXPR_RESULT 2 [source_file: testcode]\n                ASSIGN 2 [source_file: testcode]\n                    GETPROP 2 [source_file: testcode]\n                        GETPROP 2 [source_file: testcode]\n                            NAME $$$inline_3 2 [source_file: testcode]\n                            STRING fn 2 [source_file: testcode]\n                        STRING multicheck 2 [source_file: testcode]\n                    FUNCTION  2 [source_file: testcode]\n                        NAME  2 [source_file: testcode]\n                        LP 2 [source_file: testcode]\n                            NAME options$$inline_7 2 [source_file: testcode]\n                        BLOCK 2 [source_file: testcode]\n                            BLOCK 6 [source_file: testcode]\n                                EXPR_RESULT 7 [source_file: testcode]\n                                    ASSIGN 7 [source_file: testcode]\n                                        GETPROP 7 [source_file: testcode]\n                                            NAME options$$inline_7 3 [source_file: testcode]\n                                            STRING checkboxes 7 [source_file: testcode]\n                                        CALL 7 [source_file: testcode]\n                                            GETPROP 7 [source_file: testcode]\n                                                CALL 7 [free_call: 1] [source_file: testcode]\n                                                    NAME $$$inline_3 7 [source_file: testcode]\n                                                    THIS 7 [source_file: testcode]\n                                                STRING siblings 7 [source_file: testcode]\n                                            STRING :checkbox 7 [source_file: testcode]\n                                BLOCK 11 [source_file: testcode]\n                                    EXPR_RESULT 12 [source_file: testcode]\n                                        CALL 12 [source_file: testcode]\n                                            GETPROP 12 [source_file: testcode]\n                                                CALL 12 [free_call: 1] [source_file: testcode]\n                                                    NAME $$$inline_3 12 [source_file: testcode]\n                                                    THIS 12 [source_file: testcode]\n                                                STRING data 12 [source_file: testcode]\n                                            STRING checkboxes 12 [source_file: testcode]\n\n\nSubtree1: NAME $$$inline_0 1 [source_file: expected0]\n    NAME jQuery 1 [source_file: expected0]\n\n\nSubtree2: NAME $$$inline_3 14 [source_file: testcode]\n    NAME jQuery 14 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testIssue423(InlineFunctionsTest.java:2142)  test(        \"(function($) {\\n\" +        \"  $.fn.multicheck = function(options) {\\n\" +        \"    initialize.call(this, options);\\n\" +        \"  };\\n\" +        \"\\n\" +        \"  function initialize(options) {\\n\" +        \"    options.checkboxes = $(this).siblings(':checkbox');\\n\" +        \"    preload_check_all.call(this);\\n\" +        \"  }\\n\" +        \"\\n\" +        \"  function preload_check_all() {\\n\" +        \"    $(this).data('checkboxes');\\n\" +        \"  }\\n\" +        \"})(jQuery)\",        \"{var $$$inline_0=jQuery;\\n\" +        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +        \"  {options$$inline_4.checkboxes=\" +            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +        \"  }\\n\" +        \"}\\n\" +        \"}\");",
                "failed_line": 2142
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexFunctionWithFunctionDefinition2",
                "src": "  public void testComplexFunctionWithFunctionDefinition2() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might be captured.\n    testSame(\"function f(a){call(function(){return})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"(function(){\" +\n         \"var f = function(a){call(function(){return a})};f()})()\",\n         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;call(function(){return a$$inline_0})\nResult: var a$$inline_1=void 0;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                        VOID 1 [source_file: expected0]\n                            NUMBER 0.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME call 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                RETURN 1 [source_file: expected0]\n                                    NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                        VOID 1 [source_file: testcode]\n                            NUMBER 0.0 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME call 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                RETURN 1 [source_file: testcode]\n                                    NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2(InlineFunctionsTest.java:1511)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=void 0;call(function(){return a$$inline_0})\nResult: var a$$inline_1=void 0;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            BLOCK 1 [source_file: expected0]\n                VAR 1 [source_file: expected0]\n                    NAME a$$inline_0 1 [source_file: expected0]\n                        VOID 1 [source_file: expected0]\n                            NUMBER 0.0 1 [source_file: expected0]\n                EXPR_RESULT 1 [source_file: expected0]\n                    CALL 1 [free_call: 1] [source_file: expected0]\n                        NAME call 1 [source_file: expected0]\n                        FUNCTION  1 [source_file: expected0]\n                            NAME  1 [source_file: expected0]\n                            LP 1 [source_file: expected0]\n                            BLOCK 1 [source_file: expected0]\n                                RETURN 1 [source_file: expected0]\n                                    NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            BLOCK 1 [source_file: testcode]\n                VAR 1 [source_file: testcode]\n                    NAME a$$inline_1 1 [source_file: testcode]\n                        VOID 1 [source_file: testcode]\n                            NUMBER 0.0 1 [source_file: testcode]\n                EXPR_RESULT 1 [source_file: testcode]\n                    CALL 1 [free_call: 1] [source_file: testcode]\n                        NAME call 1 [source_file: testcode]\n                        FUNCTION  1 [source_file: testcode]\n                            NAME  1 [source_file: testcode]\n                            LP 1 [source_file: testcode]\n                            BLOCK 1 [source_file: testcode]\n                                RETURN 1 [source_file: testcode]\n                                    NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    VOID 1 [source_file: expected0]\n        NUMBER 0.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    VOID 1 [source_file: testcode]\n        NUMBER 0.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition2(InlineFunctionsTest.java:1511)  test(\"(function(){\" +         \"var f = function(a){call(function(){return a})};f()})()\",         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");",
                "failed_line": 1511
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testComplexFunctionWithFunctionDefinition3",
                "src": "  public void testComplexFunctionWithFunctionDefinition3() {\n    assumeMinimumCapture = false;\n\n    // Don't inline if local names might need to be captured.\n    testSame(\"function f(){var a; call(function(){return a})}f()\");\n\n    assumeMinimumCapture = true;\n\n    test(\"function f(){var a; call(function(){return a})}f()\",\n         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");\n\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0;call(function(){return a$$inline_0})\nResult: var a$$inline_1;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    NAME call 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            RETURN 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    NAME call 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            RETURN 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition3(InlineFunctionsTest.java:1538)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0;call(function(){return a$$inline_0})\nResult: var a$$inline_1;call(function(){return a$$inline_1})\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                CALL 1 [free_call: 1] [source_file: expected0]\n                    NAME call 1 [source_file: expected0]\n                    FUNCTION  1 [source_file: expected0]\n                        NAME  1 [source_file: expected0]\n                        LP 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            RETURN 1 [source_file: expected0]\n                                NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                CALL 1 [free_call: 1] [source_file: testcode]\n                    NAME call 1 [source_file: testcode]\n                    FUNCTION  1 [source_file: testcode]\n                        NAME  1 [source_file: testcode]\n                        LP 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            RETURN 1 [source_file: testcode]\n                                NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testComplexFunctionWithFunctionDefinition3(InlineFunctionsTest.java:1538)  test(\"function f(){var a; call(function(){return a})}f()\",         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");",
                "failed_line": 1538
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testDecomposeFunctionExpressionInCall",
                "src": "  public void testDecomposeFunctionExpressionInCall() {\n    test(\n        \"(function(map){descriptions_=map})(\\n\" +\n           \"function(){\\n\" +\n              \"var ret={};\\n\" +\n              \"ret[ONE]='a';\\n\" +\n              \"ret[TWO]='b';\\n\" +\n              \"return ret\\n\" +\n           \"}()\\n\" +\n        \");\",\n        \"{\" +\n        \"var JSCompiler_inline_result$$0;\" +\n        \"var ret$$inline_1={};\\n\" +\n        \"ret$$inline_1[ONE]='a';\\n\" +\n        \"ret$$inline_1[TWO]='b';\\n\" +\n        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +\n        \"}\" +\n        \"{\" +\n        \"descriptions_=JSCompiler_inline_result$$0;\" +\n        \"}\"\n        );\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_inline_result$$0;var ret$$inline_1={};ret$$inline_1[ONE]=\"a\";ret$$inline_1[TWO]=\"b\";JSCompiler_inline_result$$0=ret$$inline_1;descriptions_=JSCompiler_inline_result$$0\nResult: var JSCompiler_inline_result$$0;var ret$$inline_2={};ret$$inline_2[ONE]=\"a\";ret$$inline_2[TWO]=\"b\";JSCompiler_inline_result$$0=ret$$inline_2;descriptions_=JSCompiler_inline_result$$0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME ret$$inline_1 1 [source_file: expected0]\n                    OBJECTLIT 1 [source_file: expected0]\n            EXPR_RESULT 2 [source_file: expected0]\n                ASSIGN 2 [source_file: expected0]\n                    GETELEM 2 [source_file: expected0]\n                        NAME ret$$inline_1 2 [source_file: expected0]\n                        NAME ONE 2 [is_constant_name: 1] [source_file: expected0]\n                    STRING a 2 [source_file: expected0]\n            EXPR_RESULT 3 [source_file: expected0]\n                ASSIGN 3 [source_file: expected0]\n                    GETELEM 3 [source_file: expected0]\n                        NAME ret$$inline_1 3 [source_file: expected0]\n                        NAME TWO 3 [is_constant_name: 1] [source_file: expected0]\n                    STRING b 3 [source_file: expected0]\n            EXPR_RESULT 4 [source_file: expected0]\n                ASSIGN 4 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 4 [source_file: expected0]\n                    NAME ret$$inline_1 4 [source_file: expected0]\n        BLOCK 5 [source_file: expected0]\n            EXPR_RESULT 5 [source_file: expected0]\n                ASSIGN 5 [source_file: expected0]\n                    NAME descriptions_ 5 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 5 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 2 [source_file: testcode]\n            VAR 7 [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 7 [source_file: testcode]\n            VAR 3 [source_file: testcode]\n                NAME ret$$inline_2 3 [source_file: testcode]\n                    OBJECTLIT 3 [source_file: testcode]\n            EXPR_RESULT 4 [source_file: testcode]\n                ASSIGN 4 [source_file: testcode]\n                    GETELEM 4 [source_file: testcode]\n                        NAME ret$$inline_2 4 [source_file: testcode]\n                        NAME ONE 4 [is_constant_name: 1] [source_file: testcode]\n                    STRING a 4 [source_file: testcode]\n            EXPR_RESULT 5 [source_file: testcode]\n                ASSIGN 5 [source_file: testcode]\n                    GETELEM 5 [source_file: testcode]\n                        NAME ret$$inline_2 5 [source_file: testcode]\n                        NAME TWO 5 [is_constant_name: 1] [source_file: testcode]\n                    STRING b 5 [source_file: testcode]\n            EXPR_RESULT 6 [source_file: testcode]\n                ASSIGN 6 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 6 [source_file: testcode]\n                    NAME ret$$inline_2 6 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME descriptions_ 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 7 [source_file: testcode]\n\n\nSubtree1: NAME ret$$inline_1 1 [source_file: expected0]\n    OBJECTLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME ret$$inline_2 3 [source_file: testcode]\n    OBJECTLIT 3 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testDecomposeFunctionExpressionInCall(InlineFunctionsTest.java:1553)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var JSCompiler_inline_result$$0;var ret$$inline_1={};ret$$inline_1[ONE]=\"a\";ret$$inline_1[TWO]=\"b\";JSCompiler_inline_result$$0=ret$$inline_1;descriptions_=JSCompiler_inline_result$$0\nResult: var JSCompiler_inline_result$$0;var ret$$inline_2={};ret$$inline_2[ONE]=\"a\";ret$$inline_2[TWO]=\"b\";JSCompiler_inline_result$$0=ret$$inline_2;descriptions_=JSCompiler_inline_result$$0\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME JSCompiler_inline_result$$0 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME ret$$inline_1 1 [source_file: expected0]\n                    OBJECTLIT 1 [source_file: expected0]\n            EXPR_RESULT 2 [source_file: expected0]\n                ASSIGN 2 [source_file: expected0]\n                    GETELEM 2 [source_file: expected0]\n                        NAME ret$$inline_1 2 [source_file: expected0]\n                        NAME ONE 2 [is_constant_name: 1] [source_file: expected0]\n                    STRING a 2 [source_file: expected0]\n            EXPR_RESULT 3 [source_file: expected0]\n                ASSIGN 3 [source_file: expected0]\n                    GETELEM 3 [source_file: expected0]\n                        NAME ret$$inline_1 3 [source_file: expected0]\n                        NAME TWO 3 [is_constant_name: 1] [source_file: expected0]\n                    STRING b 3 [source_file: expected0]\n            EXPR_RESULT 4 [source_file: expected0]\n                ASSIGN 4 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 4 [source_file: expected0]\n                    NAME ret$$inline_1 4 [source_file: expected0]\n        BLOCK 5 [source_file: expected0]\n            EXPR_RESULT 5 [source_file: expected0]\n                ASSIGN 5 [source_file: expected0]\n                    NAME descriptions_ 5 [source_file: expected0]\n                    NAME JSCompiler_inline_result$$0 5 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 2 [source_file: testcode]\n            VAR 7 [source_file: testcode]\n                NAME JSCompiler_inline_result$$0 7 [source_file: testcode]\n            VAR 3 [source_file: testcode]\n                NAME ret$$inline_2 3 [source_file: testcode]\n                    OBJECTLIT 3 [source_file: testcode]\n            EXPR_RESULT 4 [source_file: testcode]\n                ASSIGN 4 [source_file: testcode]\n                    GETELEM 4 [source_file: testcode]\n                        NAME ret$$inline_2 4 [source_file: testcode]\n                        NAME ONE 4 [is_constant_name: 1] [source_file: testcode]\n                    STRING a 4 [source_file: testcode]\n            EXPR_RESULT 5 [source_file: testcode]\n                ASSIGN 5 [source_file: testcode]\n                    GETELEM 5 [source_file: testcode]\n                        NAME ret$$inline_2 5 [source_file: testcode]\n                        NAME TWO 5 [is_constant_name: 1] [source_file: testcode]\n                    STRING b 5 [source_file: testcode]\n            EXPR_RESULT 6 [source_file: testcode]\n                ASSIGN 6 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 6 [source_file: testcode]\n                    NAME ret$$inline_2 6 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME descriptions_ 1 [source_file: testcode]\n                    NAME JSCompiler_inline_result$$0 7 [source_file: testcode]\n\n\nSubtree1: NAME ret$$inline_1 1 [source_file: expected0]\n    OBJECTLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME ret$$inline_2 3 [source_file: testcode]\n    OBJECTLIT 3 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testDecomposeFunctionExpressionInCall(InlineFunctionsTest.java:1553)  test(        \"(function(map){descriptions_=map})(\\n\" +           \"function(){\\n\" +              \"var ret={};\\n\" +              \"ret[ONE]='a';\\n\" +              \"ret[TWO]='b';\\n\" +              \"return ret\\n\" +           \"}()\\n\" +        \");\",        \"{\" +        \"var JSCompiler_inline_result$$0;\" +        \"var ret$$inline_1={};\\n\" +        \"ret$$inline_1[ONE]='a';\\n\" +        \"ret$$inline_1[TWO]='b';\\n\" +        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +        \"}\" +        \"{\" +        \"descriptions_=JSCompiler_inline_result$$0;\" +        \"}\"        );",
                "failed_line": 1553
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineNeverOverrideNewValues",
                "src": "  public void testInlineNeverOverrideNewValues() {\n    test(\"function f(a){return++a<++a}f(1)\",\n        \"{var a$$inline_0=1;\" +\n        \"++a$$inline_0<++a$$inline_0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=1;++a$$inline_0<++a$$inline_0\nResult: var a$$inline_1=1;++a$$inline_1<++a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                LT 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                LT 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 1.0 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverOverrideNewValues(InlineFunctionsTest.java:623)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var a$$inline_0=1;++a$$inline_0<++a$$inline_0\nResult: var a$$inline_1=1;++a$$inline_1<++a$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME a$$inline_0 1 [source_file: expected0]\n                    NUMBER 1.0 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                LT 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n                    INC 1 [source_file: expected0]\n                        NAME a$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME a$$inline_1 1 [source_file: testcode]\n                    NUMBER 1.0 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                LT 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n                    INC 1 [source_file: testcode]\n                        NAME a$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME a$$inline_0 1 [source_file: expected0]\n    NUMBER 1.0 1 [source_file: expected0]\n\n\nSubtree2: NAME a$$inline_1 1 [source_file: testcode]\n    NUMBER 1.0 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineNeverOverrideNewValues(InlineFunctionsTest.java:623)  test(\"function f(a){return++a<++a}f(1)\",        \"{var a$$inline_0=1;\" +        \"++a$$inline_0<++a$$inline_0}\");",
                "failed_line": 623
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineBlockMutableArgs1",
                "src": "  public void testInlineBlockMutableArgs1() {\n    test(\"function foo(x){x+x}foo([])\",\n         \"{var x$$inline_0=[];\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=[];x$$inline_0+x$$inline_0\nResult: var x$$inline_1=[];x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    ARRAYLIT 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    ARRAYLIT 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    ARRAYLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    ARRAYLIT 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs1(InlineFunctionsTest.java:653)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=[];x$$inline_0+x$$inline_0\nResult: var x$$inline_1=[];x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    ARRAYLIT 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    ARRAYLIT 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    ARRAYLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    ARRAYLIT 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs1(InlineFunctionsTest.java:653)  test(\"function foo(x){x+x}foo([])\",         \"{var x$$inline_0=[];\" +         \"x$$inline_0+x$$inline_0}\");",
                "failed_line": 653
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineBlockMutableArgs2",
                "src": "  public void testInlineBlockMutableArgs2() {\n    test(\"function foo(x){x+x}foo(new Date)\",\n         \"{var x$$inline_0=new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=new Date;x$$inline_0+x$$inline_0\nResult: var x$$inline_1=new Date;x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NEW 1 [source_file: expected0]\n                        NAME Date 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NEW 1 [source_file: testcode]\n                        NAME Date 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NEW 1 [source_file: expected0]\n        NAME Date 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NEW 1 [source_file: testcode]\n        NAME Date 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs2(InlineFunctionsTest.java:659)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=new Date;x$$inline_0+x$$inline_0\nResult: var x$$inline_1=new Date;x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NEW 1 [source_file: expected0]\n                        NAME Date 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NEW 1 [source_file: testcode]\n                        NAME Date 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NEW 1 [source_file: expected0]\n        NAME Date 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NEW 1 [source_file: testcode]\n        NAME Date 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs2(InlineFunctionsTest.java:659)  test(\"function foo(x){x+x}foo(new Date)\",         \"{var x$$inline_0=new Date;\" +         \"x$$inline_0+x$$inline_0}\");",
                "failed_line": 659
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineBlockMutableArgs3",
                "src": "  public void testInlineBlockMutableArgs3() {\n    test(\"function foo(x){x+x}foo(true&&new Date)\",\n         \"{var x$$inline_0=true&&new Date;\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=true&&new Date;x$$inline_0+x$$inline_0\nResult: var x$$inline_1=true&&new Date;x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    AND 1 [source_file: expected0]\n                        TRUE 1 [source_file: expected0]\n                        NEW 1 [source_file: expected0]\n                            NAME Date 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    AND 1 [source_file: testcode]\n                        TRUE 1 [source_file: testcode]\n                        NEW 1 [source_file: testcode]\n                            NAME Date 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    AND 1 [source_file: expected0]\n        TRUE 1 [source_file: expected0]\n        NEW 1 [source_file: expected0]\n            NAME Date 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    AND 1 [source_file: testcode]\n        TRUE 1 [source_file: testcode]\n        NEW 1 [source_file: testcode]\n            NAME Date 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs3(InlineFunctionsTest.java:665)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0=true&&new Date;x$$inline_0+x$$inline_0\nResult: var x$$inline_1=true&&new Date;x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    AND 1 [source_file: expected0]\n                        TRUE 1 [source_file: expected0]\n                        NEW 1 [source_file: expected0]\n                            NAME Date 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    AND 1 [source_file: testcode]\n                        TRUE 1 [source_file: testcode]\n                        NEW 1 [source_file: testcode]\n                            NAME Date 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    AND 1 [source_file: expected0]\n        TRUE 1 [source_file: expected0]\n        NEW 1 [source_file: expected0]\n            NAME Date 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    AND 1 [source_file: testcode]\n        TRUE 1 [source_file: testcode]\n        NEW 1 [source_file: testcode]\n            NAME Date 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs3(InlineFunctionsTest.java:665)  test(\"function foo(x){x+x}foo(true&&new Date)\",         \"{var x$$inline_0=true&&new Date;\" +         \"x$$inline_0+x$$inline_0}\");",
                "failed_line": 665
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineBlockMutableArgs4",
                "src": "  public void testInlineBlockMutableArgs4() {\n    test(\"function foo(x){x+x}foo({})\",\n         \"{var x$$inline_0={};\" +\n         \"x$$inline_0+x$$inline_0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0={};x$$inline_0+x$$inline_0\nResult: var x$$inline_1={};x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    OBJECTLIT 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    OBJECTLIT 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    OBJECTLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    OBJECTLIT 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs4(InlineFunctionsTest.java:671)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var x$$inline_0={};x$$inline_0+x$$inline_0\nResult: var x$$inline_1={};x$$inline_1+x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    OBJECTLIT 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ADD 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    OBJECTLIT 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ADD 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    OBJECTLIT 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    OBJECTLIT 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineBlockMutableArgs4(InlineFunctionsTest.java:671)  test(\"function foo(x){x+x}foo({})\",         \"{var x$$inline_0={};\" +         \"x$$inline_0+x$$inline_0}\");",
                "failed_line": 671
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions10",
                "src": "  public void testInlineFunctions10() {\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i);y=INC(i)\",\n         \"var y;\" +\n         \"{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\" +\n         \"{var x$$inline_2=i;\" +\n         \"y=x$$inline_2++}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i;y=x$$inline_0++;var x$$inline_2=i;y=x$$inline_2++\nResult: var y;var x$$inline_1=i;y=x$$inline_1++;var x$$inline_4=i;y=x$$inline_4++\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_2 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_2 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_4 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_4 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME i 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions10(InlineFunctionsTest.java:183)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i;y=x$$inline_0++;var x$$inline_2=i;y=x$$inline_2++\nResult: var y;var x$$inline_1=i;y=x$$inline_1++;var x$$inline_4=i;y=x$$inline_4++\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_2 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_2 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_4 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_4 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME i 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions10(InlineFunctionsTest.java:183)  test(\"function INC(x){return x++}\" +         \"var y=INC(i);y=INC(i)\",         \"var y;\" +         \"{var x$$inline_0=i;\" +         \"y=x$$inline_0++}\" +         \"{var x$$inline_2=i;\" +         \"y=x$$inline_2++}\");",
                "failed_line": 183
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions13",
                "src": "  public void testInlineFunctions13() {\n    // inline as block if the input parameter has side-effects.\n    test(\"function f(x){return x}\" +\n         \"var y=f(i++)\",\n         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i++;y=x$$inline_0\nResult: var y;var x$$inline_1=i++;y=x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    INC 1 [incrdecr: 1] [source_file: expected0]\n        NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    INC 1 [incrdecr: 1] [source_file: testcode]\n        NAME i 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions13(InlineFunctionsTest.java:210)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i++;y=x$$inline_0\nResult: var y;var x$$inline_1=i++;y=x$$inline_1\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    INC 1 [incrdecr: 1] [source_file: expected0]\n        NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    INC 1 [incrdecr: 1] [source_file: testcode]\n        NAME i 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions13(InlineFunctionsTest.java:210)  test(\"function f(x){return x}\" +         \"var y=f(i++)\",         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");",
                "failed_line": 210
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions22",
                "src": "  public void testInlineFunctions22() {\n    // Another tricky case ... test nested compiler inlines\n    test(\"function plex(a){if(a) return 0;else return 1;}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"function bar(d){return plex(d)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_plex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_plex_1}\" +\n         \"else{\" +\n         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var d;JSCompiler_inline_label_plex_1:{if(1+2){d=0;break JSCompiler_inline_label_plex_1}else{d=1;break JSCompiler_inline_label_plex_1}d=void 0}\nResult: var d;JSCompiler_inline_label_plex_2:{if(1+2){d=0;break JSCompiler_inline_label_plex_2}else{d=1;break JSCompiler_inline_label_plex_2}d=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 0.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 1.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME d 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 0.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME d 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions22(InlineFunctionsTest.java:375)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var d;JSCompiler_inline_label_plex_1:{if(1+2){d=0;break JSCompiler_inline_label_plex_1}else{d=1;break JSCompiler_inline_label_plex_1}d=void 0}\nResult: var d;JSCompiler_inline_label_plex_2:{if(1+2){d=0;break JSCompiler_inline_label_plex_2}else{d=1;break JSCompiler_inline_label_plex_2}d=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 0.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 1.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME d 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 0.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME d 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_plex_1 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_plex_2 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions22(InlineFunctionsTest.java:375)  test(\"function plex(a){if(a) return 0;else return 1;}\" +         \"function foo(a, b){return bar(a+b)}\" +         \"function bar(d){return plex(d)}\" +         \"var d=foo(1,2)\",         \"var d;{JSCompiler_inline_label_plex_1:{\" +         \"if(1+2){\" +         \"d=0;break JSCompiler_inline_label_plex_1}\" +         \"else{\" +         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");",
                "failed_line": 375
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions23",
                "src": "  public void testInlineFunctions23() {\n    // Test both orderings again\n    test(\"function complex(a){if(a) return 0;else return 1;}\" +\n         \"function bar(d){return complex(d)}\" +\n         \"function foo(a, b){return bar(a+b)}\" +\n         \"var d=foo(1,2)\",\n\n         \"var d;{JSCompiler_inline_label_complex_1:{\" +\n         \"if(1+2){\" +\n         \"d=0;break JSCompiler_inline_label_complex_1\" +\n         \"}else{\" +\n         \"d=1;break JSCompiler_inline_label_complex_1\" +\n         \"}d=void 0}}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var d;JSCompiler_inline_label_complex_1:{if(1+2){d=0;break JSCompiler_inline_label_complex_1}else{d=1;break JSCompiler_inline_label_complex_1}d=void 0}\nResult: var d;JSCompiler_inline_label_complex_2:{if(1+2){d=0;break JSCompiler_inline_label_complex_2}else{d=1;break JSCompiler_inline_label_complex_2}d=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 0.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 1.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME d 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 0.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME d 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions23(InlineFunctionsTest.java:389)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var d;JSCompiler_inline_label_complex_1:{if(1+2){d=0;break JSCompiler_inline_label_complex_1}else{d=1;break JSCompiler_inline_label_complex_1}d=void 0}\nResult: var d;JSCompiler_inline_label_complex_2:{if(1+2){d=0;break JSCompiler_inline_label_complex_2}else{d=1;break JSCompiler_inline_label_complex_2}d=void 0}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME d 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            LABEL 1 [source_file: expected0]\n                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                BLOCK 1 [source_file: expected0]\n                    IF 1 [source_file: expected0]\n                        ADD 1 [source_file: expected0]\n                            NUMBER 1.0 1 [source_file: expected0]\n                            NUMBER 2.0 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 0.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                        BLOCK 1 [source_file: expected0]\n                            EXPR_RESULT 1 [source_file: expected0]\n                                ASSIGN 1 [source_file: expected0]\n                                    NAME d 1 [source_file: expected0]\n                                    NUMBER 1.0 1 [source_file: expected0]\n                            BREAK 1 [source_file: expected0]\n                                LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n                    EXPR_RESULT 1 [source_file: expected0]\n                        ASSIGN 1 [source_file: expected0]\n                            NAME d 1 [source_file: expected0]\n                            VOID 1 [source_file: expected0]\n                                NUMBER 0.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME d 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            LABEL 1 [source_file: testcode]\n                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                BLOCK 1 [source_file: testcode]\n                    IF 1 [source_file: testcode]\n                        ADD 1 [source_file: testcode]\n                            NUMBER 1.0 1 [source_file: testcode]\n                            NUMBER 2.0 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 0.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                        BLOCK 1 [source_file: testcode]\n                            EXPR_RESULT 1 [source_file: testcode]\n                                ASSIGN 1 [source_file: testcode]\n                                    NAME d 1 [source_file: testcode]\n                                    NUMBER 1.0 1 [source_file: testcode]\n                            BREAK 1 [source_file: testcode]\n                                LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n                    EXPR_RESULT 1 [source_file: testcode]\n                        ASSIGN 1 [source_file: testcode]\n                            NAME d 1 [source_file: testcode]\n                            VOID 1 [source_file: testcode]\n                                NUMBER 0.0 1 [source_file: testcode]\n\n\nSubtree1: LABEL_NAME JSCompiler_inline_label_complex_1 1 [source_file: expected0]\n\n\nSubtree2: LABEL_NAME JSCompiler_inline_label_complex_2 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions23(InlineFunctionsTest.java:389)  test(\"function complex(a){if(a) return 0;else return 1;}\" +         \"function bar(d){return complex(d)}\" +         \"function foo(a, b){return bar(a+b)}\" +         \"var d=foo(1,2)\",         \"var d;{JSCompiler_inline_label_complex_1:{\" +         \"if(1+2){\" +         \"d=0;break JSCompiler_inline_label_complex_1\" +         \"}else{\" +         \"d=1;break JSCompiler_inline_label_complex_1\" +         \"}d=void 0}}\");",
                "failed_line": 389
            },
            "com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9": {
                "path": "test/com/google/javascript/jscomp/InlineFunctionsTest.java",
                "function_name": "testInlineFunctions9",
                "src": "  public void testInlineFunctions9() {\n    // don't inline if the input parameter is modified.\n    test(\"function INC(x){return x++}\" +\n         \"var y=INC(i)\",\n         \"var y;{var x$$inline_0=i;\" +\n         \"y=x$$inline_0++}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i;y=x$$inline_0++\nResult: var y;var x$$inline_1=i;y=x$$inline_1++\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME i 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions9(InlineFunctionsTest.java:176)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var y;var x$$inline_0=i;y=x$$inline_0++\nResult: var y;var x$$inline_1=i;y=x$$inline_1++\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME y 1 [source_file: expected0]\n        BLOCK 1 [source_file: expected0]\n            VAR 1 [source_file: expected0]\n                NAME x$$inline_0 1 [source_file: expected0]\n                    NAME i 1 [source_file: expected0]\n            EXPR_RESULT 1 [source_file: expected0]\n                ASSIGN 1 [source_file: expected0]\n                    NAME y 1 [source_file: expected0]\n                    INC 1 [incrdecr: 1] [source_file: expected0]\n                        NAME x$$inline_0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME y 1 [source_file: testcode]\n        BLOCK 1 [source_file: testcode]\n            VAR 1 [source_file: testcode]\n                NAME x$$inline_1 1 [source_file: testcode]\n                    NAME i 1 [source_file: testcode]\n            EXPR_RESULT 1 [source_file: testcode]\n                ASSIGN 1 [source_file: testcode]\n                    NAME y 1 [source_file: testcode]\n                    INC 1 [incrdecr: 1] [source_file: testcode]\n                        NAME x$$inline_1 1 [source_file: testcode]\n\n\nSubtree1: NAME x$$inline_0 1 [source_file: expected0]\n    NAME i 1 [source_file: expected0]\n\n\nSubtree2: NAME x$$inline_1 1 [source_file: testcode]\n    NAME i 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.InlineFunctionsTest.testInlineFunctions9(InlineFunctionsTest.java:176)  test(\"function INC(x){return x++}\" +         \"var y=INC(i)\",         \"var y;{var x$$inline_0=i;\" +         \"y=x$$inline_0++}\");",
                "failed_line": 176
            },
            "com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5": {
                "path": "test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java",
                "function_name": "testMakeLocalNamesUniqueWithContext5",
                "src": "  public void testMakeLocalNamesUniqueWithContext5() {\n    // Set the test type\n    this.useDefaultRenamer = true;\n\n    testWithInversion(\n        \"function f(){var f; f = 1}\",\n        \"function f(){var f$$1; f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){f = 1}\",\n        \"function f(f$$1){f$$1 = 1}\");\n    testWithInversion(\n        \"function f(f){var f; f = 1}\",\n        \"function f(f$$1){var f$$1; f$$1 = 1}\");\n\n    test(\n        \"var fn = function f(){var f; f = 1}\",\n        \"var fn = function f(){var f$$1; f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){f = 1}\",\n        \"var fn = function f(f$$1){f$$1 = 1}\");\n    test(\n        \"var fn = function f(f){var f; f = 1}\",\n        \"var fn = function f(f$$1){var f$$1; f$$1 = 1}\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: \nExpected: var fn=function f(){var f$$1;f$$1=1}\nResult: var fn=function f$$1(){var f$$1;f$$1=1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME fn 1 [source_file: expected0]\n                FUNCTION f 1 [source_file: expected0]\n                    NAME f 1 [source_file: expected0]\n                    LP 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME f$$1 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME f$$1 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME fn 1 [source_file: testcode]\n                FUNCTION f$$1 1 [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n                    LP 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        VAR 1 [source_file: testcode]\n                            NAME f$$1 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME f$$1 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME f 1 [source_file: expected0]\n\n\nSubtree2: NAME f$$1 1 [source_file: testcode]\n\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertNull(Assert.java:277)\n\tat junit.framework.TestCase.assertNull(TestCase.java:447)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)\n\tat com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest.testMakeLocalNamesUniqueWithContext5(MakeDeclaredNamesUniqueTest.java:222)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: \nExpected: var fn=function f(){var f$$1;f$$1=1}\nResult: var fn=function f$$1(){var f$$1;f$$1=1}\nNode tree inequality:\nTree1:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]\n        VAR 1 [source_file: expected0]\n            NAME fn 1 [source_file: expected0]\n                FUNCTION f 1 [source_file: expected0]\n                    NAME f 1 [source_file: expected0]\n                    LP 1 [source_file: expected0]\n                    BLOCK 1 [source_file: expected0]\n                        VAR 1 [source_file: expected0]\n                            NAME f$$1 1 [source_file: expected0]\n                        EXPR_RESULT 1 [source_file: expected0]\n                            ASSIGN 1 [source_file: expected0]\n                                NAME f$$1 1 [source_file: expected0]\n                                NUMBER 1.0 1 [source_file: expected0]\n\n\nTree2:\nBLOCK [synthetic: 1]\n    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]\n        VAR 1 [source_file: testcode]\n            NAME fn 1 [source_file: testcode]\n                FUNCTION f$$1 1 [source_file: testcode]\n                    NAME f$$1 1 [source_file: testcode]\n                    LP 1 [source_file: testcode]\n                    BLOCK 1 [source_file: testcode]\n                        VAR 1 [source_file: testcode]\n                            NAME f$$1 1 [source_file: testcode]\n                        EXPR_RESULT 1 [source_file: testcode]\n                            ASSIGN 1 [source_file: testcode]\n                                NAME f$$1 1 [source_file: testcode]\n                                NUMBER 1.0 1 [source_file: testcode]\n\n\nSubtree1: NAME f 1 [source_file: expected0]\n\n\nSubtree2: NAME f$$1 1 [source_file: testcode]\n\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:862)  assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +            \"\\nResult: \" + compiler.toSource(mainRoot) +            \"\\n\" + explanation, explanation);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:423)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:348)  test(externsInputs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:317)  test(js, expected, error, null);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:305)  test(js, expected, (DiagnosticType) null);\n\tat com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest.testMakeLocalNamesUniqueWithContext5(MakeDeclaredNamesUniqueTest.java:222)  test(        \"var fn = function f(){var f; f = 1}\",        \"var fn = function f(){var f$$1; f$$1 = 1}\");",
                "failed_line": 222
            }
        }
    },
    "Closure_79": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/Normalize.java",
                "start_loc": 118,
                "end_loc": 149,
                "buggy_function": "   \n  public void process(Node externs, Node root) {\n    new NodeTraversal(\n        compiler, new NormalizeStatements(compiler, assertOnChange))\n        .traverse(root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    // It is important that removeDuplicateDeclarations runs after\n    // MakeDeclaredNamesUnique in order for catch block exception names to be\n    // handled properly. Specifically, catch block exception names are\n    // only valid within the catch block, but our currect Scope logic\n    // has no concept of this and includes it in the containing function\n    // (or global scope). MakeDeclaredNamesUnique makes the catch exception\n    // names unique so that removeDuplicateDeclarations() will properly handle\n    // cases where a function scope variable conflict with a exception name:\n    //   function f() {\n    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}\n    //      var e = 1; // f scope 'e'\n    //   }\n    // otherwise 'var e = 1' would be rewritten as 'e = 1'.\n    // TODO(johnlenz): Introduce a seperate scope for catch nodes.\n    removeDuplicateDeclarations(externs, root);\n    new PropagateConstantAnnotationsOverVars(compiler, assertOnChange)\n        .process(externs, root);\n\n    if (!compiler.getLifeCycleStage().isNormalized()) {\n      compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n    }\n  }\n",
                "fixed_function": "   \n  public void process(Node externs, Node root) {\n    new NodeTraversal(\n        compiler, new NormalizeStatements(compiler, assertOnChange))\n        .traverseRoots(externs, root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    // It is important that removeDuplicateDeclarations runs after\n    // MakeDeclaredNamesUnique in order for catch block exception names to be\n    // handled properly. Specifically, catch block exception names are\n    // only valid within the catch block, but our currect Scope logic\n    // has no concept of this and includes it in the containing function\n    // (or global scope). MakeDeclaredNamesUnique makes the catch exception\n    // names unique so that removeDuplicateDeclarations() will properly handle\n    // cases where a function scope variable conflict with a exception name:\n    //   function f() {\n    //      try {throw 0;} catch(e) {e; /* catch scope 'e'*/}\n    //      var e = 1; // f scope 'e'\n    //   }\n    // otherwise 'var e = 1' would be rewritten as 'e = 1'.\n    // TODO(johnlenz): Introduce a seperate scope for catch nodes.\n    removeDuplicateDeclarations(externs, root);\n    new PropagateConstantAnnotationsOverVars(compiler, assertOnChange)\n        .process(externs, root);\n\n    if (!compiler.getLifeCycleStage().isNormalized()) {\n      compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n    }\n  }\n",
                "comment": "",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.NormalizeTest::testIssue"
                ]
            },
            {
                "path": "src/com/google/javascript/jscomp/VarCheck.java",
                "start_loc": 205,
                "end_loc": 221,
                "buggy_function": "  private void createSynthesizedExternVar(String varName) {\n    Node nameNode = Node.newString(Token.NAME, varName);\n\n    // Mark the variable as constant if it matches the coding convention\n    // for constant vars.\n    // NOTE(nicksantos): honestly, i'm not sure how much this matters.\n    // AFAIK, all people who use the CONST coding convention also\n    // compile with undeclaredVars as errors. We have some test\n    // cases for this configuration though, and it makes them happier.\n    if (compiler.getCodingConvention().isConstant(varName)) {\n      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n\n    getSynthesizedExternsRoot().addChildToBack(\n        new Node(Token.VAR, nameNode));\n    varsToDeclareInExterns.remove(varName);\n  }\n",
                "fixed_function": "  private void createSynthesizedExternVar(String varName) {\n    Node nameNode = Node.newString(Token.NAME, varName);\n\n    // Mark the variable as constant if it matches the coding convention\n    // for constant vars.\n    // NOTE(nicksantos): honestly, i'm not sure how much this matters.\n    // AFAIK, all people who use the CONST coding convention also\n    // compile with undeclaredVars as errors. We have some test\n    // cases for this configuration though, and it makes them happier.\n    if (compiler.getCodingConvention().isConstant(varName)) {\n      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n\n    getSynthesizedExternsRoot().addChildToBack(\n        new Node(Token.VAR, nameNode));\n    varsToDeclareInExterns.remove(varName);\n    compiler.reportCodeChange();\n  }\n",
                "comment": "  /**\n   * Create a new variable in a synthetic script. This will prevent\n   * subsequent compiler passes from crashing.\n   */\n",
                "directly_related_tests": [
                    "com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns1",
                    "com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3",
                    "com.google.javascript.jscomp.VarCheckTest::testVarReferenceInExterns",
                    "com.google.javascript.jscomp.VarCheckTest::testCallInExterns"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.NormalizeTest::testIssue": {
                "path": "test/com/google/javascript/jscomp/NormalizeTest.java",
                "function_name": "testIssue",
                "src": "  public void testIssue() {\n    super.allowExternsChanges(true);\n    test(\"var a,b,c; var a,b\", \"a(), b()\", \"a(), b()\", null, null);\n  }",
                "stack_trace": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:129)\n\tat com.google.javascript.jscomp.Normalize$DuplicateDeclarationHandler.onRedeclaration(Normalize.java:698)\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(SyntacticScopeCreator.java:238)\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(SyntacticScopeCreator.java:124)\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(SyntacticScopeCreator.java:166)\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(SyntacticScopeCreator.java:166)\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(SyntacticScopeCreator.java:166)\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(SyntacticScopeCreator.java:110)\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.createScope(SyntacticScopeCreator.java:74)\n\tat com.google.javascript.jscomp.NodeTraversal.getScope(NodeTraversal.java:563)\n\tat com.google.javascript.jscomp.Normalize$ScopeTicklingCallback.enterScope(Normalize.java:760)\n\tat com.google.javascript.jscomp.NodeTraversal.pushScope(NodeTraversal.java:527)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:271)\n\tat com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:257)\n\tat com.google.javascript.jscomp.Normalize.removeDuplicateDeclarations(Normalize.java:633)\n\tat com.google.javascript.jscomp.Normalize.process(Normalize.java:142)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:749)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:374)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:351)\n\tat com.google.javascript.jscomp.NormalizeTest.testIssue(NormalizeTest.java:386)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\nCaused by: java.lang.IllegalStateException\n\t... 55 more",
                "clean_error_message": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(SyntacticScopeCreator.java:238)  redeclarationHandler.onRedeclaration(          scope, name, n, input);\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(SyntacticScopeCreator.java:124)  declareVar(child);\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(SyntacticScopeCreator.java:166)  scanVars(child, n);\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(SyntacticScopeCreator.java:166)  scanVars(child, n);\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(SyntacticScopeCreator.java:166)  scanVars(child, n);\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(SyntacticScopeCreator.java:110)  scanVars(n, null);\n\tat com.google.javascript.jscomp.SyntacticScopeCreator.createScope(SyntacticScopeCreator.java:74)  scanRoot(n, parent);\n\tat com.google.javascript.jscomp.NodeTraversal.getScope(NodeTraversal.java:563)  scope = scopeCreator.createScope(it.next(), scope);\n\tat com.google.javascript.jscomp.NodeTraversal.pushScope(NodeTraversal.java:527)  scopeCallback.enterScope(this);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:271)  pushScope(scopeRoot);\n\tat com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:257)  traverseRoots(Lists.newArrayList(roots));\n\tat com.google.javascript.jscomp.Normalize.removeDuplicateDeclarations(Normalize.java:633)  t.traverseRoots(externs, root);\n\tat com.google.javascript.jscomp.Normalize.process(Normalize.java:142)  removeDuplicateDeclarations(externs, root);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:749)  getProcessor(compiler).process(externsRoot, mainRoot);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:374)  test(externsInputs, js, expected, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:351)  test(externs, js, expected, error, warning, null);\n\tat com.google.javascript.jscomp.NormalizeTest.testIssue(NormalizeTest.java:386)  test(\"var a,b,c; var a,b\", \"a(), b()\", \"a(), b()\", null, null);\nCaused by: java.lang.IllegalStateException\n\t... 55 more",
                "failed_line": 386
            },
            "com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns1": {
                "path": "test/com/google/javascript/jscomp/VarCheckTest.java",
                "function_name": "testPropReferenceInExterns1",
                "src": "  public void testPropReferenceInExterns1() {\n    testSame(\"asdf.foo;\", \"var asdf;\",\n        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:838)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:600)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:563)\n\tat com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns1(VarCheckTest.java:141)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:838)  assertTrue(\"compiler.reportCodeChange() should have been called\",            hasCodeChanged);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:600)  test(externsInputs, js, js, null, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:563)  testSame(externs, js, warning, null);\n\tat com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns1(VarCheckTest.java:141)  testSame(\"asdf.foo;\", \"var asdf;\",        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);",
                "failed_line": 141
            },
            "com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3": {
                "path": "test/com/google/javascript/jscomp/VarCheckTest.java",
                "function_name": "testPropReferenceInExterns3",
                "src": "  public void testPropReferenceInExterns3() {\n    testSame(\"asdf.foo;\", \"var asdf;\",\n        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    externValidationErrorLevel = CheckLevel.ERROR;\n    test(\n        \"asdf.foo;\", \"var asdf;\", \"\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR, null);\n\n    externValidationErrorLevel = CheckLevel.OFF;\n    test(\"asdf.foo;\", \"var asdf;\", \"var asdf;\", null, null);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:838)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:600)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:563)\n\tat com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns3(VarCheckTest.java:151)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:838)  assertTrue(\"compiler.reportCodeChange() should have been called\",            hasCodeChanged);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:600)  test(externsInputs, js, js, null, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:563)  testSame(externs, js, warning, null);\n\tat com.google.javascript.jscomp.VarCheckTest.testPropReferenceInExterns3(VarCheckTest.java:151)  testSame(\"asdf.foo;\", \"var asdf;\",        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);",
                "failed_line": 151
            },
            "com.google.javascript.jscomp.VarCheckTest::testVarReferenceInExterns": {
                "path": "test/com/google/javascript/jscomp/VarCheckTest.java",
                "function_name": "testVarReferenceInExterns",
                "src": "  public void testVarReferenceInExterns() {\n    testSame(\"asdf;\", \"var asdf;\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:838)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:600)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:563)\n\tat com.google.javascript.jscomp.VarCheckTest.testVarReferenceInExterns(VarCheckTest.java:131)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:838)  assertTrue(\"compiler.reportCodeChange() should have been called\",            hasCodeChanged);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:600)  test(externsInputs, js, js, null, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:563)  testSame(externs, js, warning, null);\n\tat com.google.javascript.jscomp.VarCheckTest.testVarReferenceInExterns(VarCheckTest.java:131)  testSame(\"asdf;\", \"var asdf;\",        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);",
                "failed_line": 131
            },
            "com.google.javascript.jscomp.VarCheckTest::testCallInExterns": {
                "path": "test/com/google/javascript/jscomp/VarCheckTest.java",
                "function_name": "testCallInExterns",
                "src": "  public void testCallInExterns() {\n    testSame(\"yz();\", \"function yz() {}\",\n        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:838)\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:600)\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:563)\n\tat com.google.javascript.jscomp.VarCheckTest.testCallInExterns(VarCheckTest.java:136)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:838)  assertTrue(\"compiler.reportCodeChange() should have been called\",            hasCodeChanged);\n\tat com.google.javascript.jscomp.CompilerTestCase.test(CompilerTestCase.java:410)  test(compiler, new String[] { expected }, error, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:600)  test(externsInputs, js, js, null, warning, description);\n\tat com.google.javascript.jscomp.CompilerTestCase.testSame(CompilerTestCase.java:563)  testSame(externs, js, warning, null);\n\tat com.google.javascript.jscomp.VarCheckTest.testCallInExterns(VarCheckTest.java:136)  testSame(\"yz();\", \"function yz() {}\",        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);",
                "failed_line": 136
            }
        }
    },
    "Closure_90": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
                "start_loc": 176,
                "end_loc": 190,
                "buggy_function": "     \n    public boolean apply(JSType type) {\n      // TODO(user): Doing an instanceof check here is too\n      // restrictive as (Date,Error) is, for instance, an object type\n      // even though its implementation is a UnionType. Would need to\n      // create interfaces JSType, ObjectType, FunctionType etc and have\n      // separate implementation instead of the class hierarchy, so that\n      // union types can also be object types, etc.\n      if (!type.isSubtype(\n              typeRegistry.getNativeType(OBJECT_TYPE))) {\n        reportWarning(THIS_TYPE_NON_OBJECT, type.toString());\n        return false;\n      }\n      return true;\n    }\n",
                "fixed_function": "     \n    public boolean apply(JSType type) {\n      // TODO(user): Doing an instanceof check here is too\n      // restrictive as (Date,Error) is, for instance, an object type\n      // even though its implementation is a UnionType. Would need to\n      // create interfaces JSType, ObjectType, FunctionType etc and have\n      // separate implementation instead of the class hierarchy, so that\n      // union types can also be object types, etc.\n      if (!type.restrictByNotNullOrUndefined().isSubtype(\n              typeRegistry.getNativeType(OBJECT_TYPE))) {\n        reportWarning(THIS_TYPE_NON_OBJECT, type.toString());\n        return false;\n      }\n      return true;\n    }\n",
                "comment": "",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse8",
                    "com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse9"
                ]
            },
            {
                "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
                "start_loc": 861,
                "end_loc": 903,
                "buggy_function": "   \n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    //\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    //\n    // TODO(nicksantos): In ES3, the runtime coerces \"null\" to the global\n    // activation object. In ES5, it leaves it as null. Just punt on this\n    // issue for now by coercing out null. This is complicated by the\n    // fact that when most people write @this {Foo}, they really don't\n    // mean \"nullable Foo\". For certain tags (like @extends) we de-nullify\n    // the name for them.\n    JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (maybeTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) maybeTypeOfThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }\n",
                "fixed_function": "   \n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    //\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    //\n    // TODO(nicksantos): In ES3, the runtime coerces \"null\" to the global\n    // activation object. In ES5, it leaves it as null. Just punt on this\n    // issue for now by coercing out null. This is complicated by the\n    // fact that when most people write @this {Foo}, they really don't\n    // mean \"nullable Foo\". For certain tags (like @extends) we de-nullify\n    // the name for them.\n    JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (maybeTypeOfThis != null) {\n      maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();\n    }\n    if (maybeTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) maybeTypeOfThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }\n",
                "comment": "",
                "non_directly_related_tests": [
                    "com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse8",
                    "com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse9"
                ]
            }
        ],
        "trigger_test": {
            "com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse8": {
                "path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
                "function_name": "testBackwardsTypedefUse8",
                "src": "  public void testBackwardsTypedefUse8() throws Exception {\n    // Tehnically, this isn't quite right, because the JS runtime\n    // will coerce null -> the global object. But we'll punt on that for now.\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;\");\n  }",
                "stack_trace": "junit.framework.AssertionFailedError: unexpected warnings(s):\nJSC_THIS_TYPE_NON_OBJECT. @this type of a function must be an object\nActual type: (Array|null|undefined) at [testcode] line 1 : 80\nJSC_TYPE_MISMATCH. actual parameter 1 of g does not match formal parameter\nfound   : goog.MyTypedef\nrequired: Array at [testcode] line 1 : 88\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7752)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7726)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7670)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7666)\n\tat com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse8(TypeCheckTest.java:2670)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: unexpected warnings(s):\nJSC_THIS_TYPE_NON_OBJECT. @this type of a function must be an object\nActual type: (Array|null|undefined) at [testcode] line 1 : 80\nJSC_TYPE_MISMATCH. actual parameter 1 of g does not match formal parameter\nfound   : goog.MyTypedef\nrequired: Array at [testcode] line 1 : 88\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7752)  fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7726)  testTypes(DEFAULT_EXTERNS, js, description, isError);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7670)  testTypes(js, description, false);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7666)  testTypes(js, (String) null);\n\tat com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse8(TypeCheckTest.java:2670)  testTypes(        \"/** @param {!Array} x */ function g(x) {}\" +        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +        \"var goog = {};\" +        \"/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;\");",
                "failed_line": 2670
            },
            "com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse9": {
                "path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
                "function_name": "testBackwardsTypedefUse9",
                "src": "  public void testBackwardsTypedefUse9() throws Exception {\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: Array\");\n  }",
                "stack_trace": "junit.framework.ComparisonFailure: expected:<[actual parameter 1 of g does not match formal parameter\nfound   : Error\nrequired: Array]> but was:<[@this type of a function must be an object\nActual type: (Error|null|undefined)]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7747)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7726)\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7670)\n\tat com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse9(TypeCheckTest.java:2678)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.ComparisonFailure: expected:<[actual parameter 1 of g does not match formal parameter\nfound   : Error\nrequired: Array]> but was:<[@this type of a function must be an object\nActual type: (Error|null|undefined)]>\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7747)  assertEquals(description, warnings[0].description);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7726)  testTypes(DEFAULT_EXTERNS, js, description, isError);\n\tat com.google.javascript.jscomp.TypeCheckTest.testTypes(TypeCheckTest.java:7670)  testTypes(js, description, false);\n\tat com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse9(TypeCheckTest.java:2678)  testTypes(        \"/** @param {!Array} x */ function g(x) {}\" +        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +        \"var goog = {};\" +        \"/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;\",        \"actual parameter 1 of g does not match formal parameter\\n\" +        \"found   : Error\\n\" +        \"required: Array\");",
                "failed_line": 2678
            }
        }
    },
    "Math_6": {
        "function_num": 7,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java",
                "start_loc": 47,
                "end_loc": 52,
                "buggy_function": "    protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\n        this.checker = checker;\n\n        evaluations = new Incrementor(0, new MaxEvalCallback());\n        iterations = new Incrementor(0, new MaxIterCallback());\n    }\n",
                "fixed_function": "    protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\n        this.checker = checker;\n\n        evaluations = new Incrementor(0, new MaxEvalCallback());\n        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());\n    }\n",
                "comment": "    /**\n     * @param checker Convergence checker.\n     */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java",
                "start_loc": 191,
                "end_loc": 288,
                "buggy_function": "     \n    protected PointValuePair doOptimize() {\n        final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n        final double[] point = getStartPoint();\n        final GoalType goal = getGoalType();\n        final int n = point.length;\n        double[] r = computeObjectiveGradient(point);\n        if (goal == GoalType.MINIMIZE) {\n            for (int i = 0; i < n; i++) {\n                r[i] = -r[i];\n            }\n        }\n\n        // Initial search direction.\n        double[] steepestDescent = preconditioner.precondition(point, r);\n        double[] searchDirection = steepestDescent.clone();\n\n        double delta = 0;\n        for (int i = 0; i < n; ++i) {\n            delta += r[i] * searchDirection[i];\n        }\n\n        PointValuePair current = null;\n        int iter = 0;\n        int maxEval = getMaxEvaluations();\n        while (true) {\n            ++iter;\n\n            final double objective = computeObjectiveValue(point);\n            PointValuePair previous = current;\n            current = new PointValuePair(point, objective);\n            if (previous != null) {\n                if (checker.converged(iter, previous, current)) {\n                    // We have found an optimum.\n                    return current;\n                }\n            }\n\n            // Find the optimal step in the search direction.\n            final UnivariateFunction lsf = new LineSearchFunction(point, searchDirection);\n            final double uB = findUpperBound(lsf, 0, initialStep);\n            // XXX Last parameters is set to a value close to zero in order to\n            // work around the divergence problem in the \"testCircleFitting\"\n            // unit test (see MATH-439).\n            final double step = solver.solve(maxEval, lsf, 0, uB, 1e-15);\n            maxEval -= solver.getEvaluations(); // Subtract used up evaluations.\n\n            // Validate new point.\n            for (int i = 0; i < point.length; ++i) {\n                point[i] += step * searchDirection[i];\n            }\n\n            r = computeObjectiveGradient(point);\n            if (goal == GoalType.MINIMIZE) {\n                for (int i = 0; i < n; ++i) {\n                    r[i] = -r[i];\n                }\n            }\n\n            // Compute beta.\n            final double deltaOld = delta;\n            final double[] newSteepestDescent = preconditioner.precondition(point, r);\n            delta = 0;\n            for (int i = 0; i < n; ++i) {\n                delta += r[i] * newSteepestDescent[i];\n            }\n\n            final double beta;\n            switch (updateFormula) {\n            case FLETCHER_REEVES:\n                beta = delta / deltaOld;\n                break;\n            case POLAK_RIBIERE:\n                double deltaMid = 0;\n                for (int i = 0; i < r.length; ++i) {\n                    deltaMid += r[i] * steepestDescent[i];\n                }\n                beta = (delta - deltaMid) / deltaOld;\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }\n            steepestDescent = newSteepestDescent;\n\n            // Compute conjugate search direction.\n            if (iter % n == 0 ||\n                beta < 0) {\n                // Break conjugation: reset search direction.\n                searchDirection = steepestDescent.clone();\n            } else {\n                // Compute new conjugate search direction.\n                for (int i = 0; i < n; ++i) {\n                    searchDirection[i] = steepestDescent[i] + beta * searchDirection[i];\n                }\n            }\n        }\n    }\n",
                "fixed_function": "     \n    protected PointValuePair doOptimize() {\n        final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n        final double[] point = getStartPoint();\n        final GoalType goal = getGoalType();\n        final int n = point.length;\n        double[] r = computeObjectiveGradient(point);\n        if (goal == GoalType.MINIMIZE) {\n            for (int i = 0; i < n; i++) {\n                r[i] = -r[i];\n            }\n        }\n\n        // Initial search direction.\n        double[] steepestDescent = preconditioner.precondition(point, r);\n        double[] searchDirection = steepestDescent.clone();\n\n        double delta = 0;\n        for (int i = 0; i < n; ++i) {\n            delta += r[i] * searchDirection[i];\n        }\n\n        PointValuePair current = null;\n        int maxEval = getMaxEvaluations();\n        while (true) {\n            incrementIterationCount();\n\n            final double objective = computeObjectiveValue(point);\n            PointValuePair previous = current;\n            current = new PointValuePair(point, objective);\n            if (previous != null) {\n                if (checker.converged(getIterations(), previous, current)) {\n                    // We have found an optimum.\n                    return current;\n                }\n            }\n\n            // Find the optimal step in the search direction.\n            final UnivariateFunction lsf = new LineSearchFunction(point, searchDirection);\n            final double uB = findUpperBound(lsf, 0, initialStep);\n            // XXX Last parameters is set to a value close to zero in order to\n            // work around the divergence problem in the \"testCircleFitting\"\n            // unit test (see MATH-439).\n            final double step = solver.solve(maxEval, lsf, 0, uB, 1e-15);\n            maxEval -= solver.getEvaluations(); // Subtract used up evaluations.\n\n            // Validate new point.\n            for (int i = 0; i < point.length; ++i) {\n                point[i] += step * searchDirection[i];\n            }\n\n            r = computeObjectiveGradient(point);\n            if (goal == GoalType.MINIMIZE) {\n                for (int i = 0; i < n; ++i) {\n                    r[i] = -r[i];\n                }\n            }\n\n            // Compute beta.\n            final double deltaOld = delta;\n            final double[] newSteepestDescent = preconditioner.precondition(point, r);\n            delta = 0;\n            for (int i = 0; i < n; ++i) {\n                delta += r[i] * newSteepestDescent[i];\n            }\n\n            final double beta;\n            switch (updateFormula) {\n            case FLETCHER_REEVES:\n                beta = delta / deltaOld;\n                break;\n            case POLAK_RIBIERE:\n                double deltaMid = 0;\n                for (int i = 0; i < r.length; ++i) {\n                    deltaMid += r[i] * steepestDescent[i];\n                }\n                beta = (delta - deltaMid) / deltaOld;\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }\n            steepestDescent = newSteepestDescent;\n\n            // Compute conjugate search direction.\n            if (getIterations() % n == 0 ||\n                beta < 0) {\n                // Break conjugation: reset search direction.\n                searchDirection = steepestDescent.clone();\n            } else {\n                // Compute new conjugate search direction.\n                for (int i = 0; i < n; ++i) {\n                    searchDirection[i] = steepestDescent[i] + beta * searchDirection[i];\n                }\n            }\n        }\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java",
                "start_loc": 367,
                "end_loc": 515,
                "buggy_function": "     \n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        double bestValue = fitfun.value(guess);\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null &&\n                    lastResult != null) {\n                    if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                        break generationLoop;\n                    }\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0) { // only if stopFitness is defined\n                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                    break generationLoop;\n                }\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                Math.max(historyWorst, worstFitness) -\n                Math.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma = sigma * Math.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                Math.min(historyBest, bestFitness) == 0) {\n                sigma = sigma * Math.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            fitfun.setValueRange(worstFitness-bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n",
                "fixed_function": "     \n    protected PointValuePair doOptimize() {\n         // -------------------- Initialization --------------------------------\n        isMinimize = getGoalType().equals(GoalType.MINIMIZE);\n        final FitnessFunction fitfun = new FitnessFunction();\n        final double[] guess = getStartPoint();\n        // number of objective variables/problem dimension\n        dimension = guess.length;\n        initializeCMA(guess);\n        iterations = 0;\n        double bestValue = fitfun.value(guess);\n        push(fitnessHistory, bestValue);\n        PointValuePair optimum\n            = new PointValuePair(getStartPoint(),\n                                 isMinimize ? bestValue : -bestValue);\n        PointValuePair lastResult = null;\n\n        // -------------------- Generation Loop --------------------------------\n\n        generationLoop:\n        for (iterations = 1; iterations <= maxIterations; iterations++) {\n            incrementIterationCount();\n\n            // Generate and evaluate lambda offspring\n            final RealMatrix arz = randn1(dimension, lambda);\n            final RealMatrix arx = zeros(dimension, lambda);\n            final double[] fitness = new double[lambda];\n            // generate random offspring\n            for (int k = 0; k < lambda; k++) {\n                RealMatrix arxk = null;\n                for (int i = 0; i < checkFeasableCount + 1; i++) {\n                    if (diagonalOnly <= 0) {\n                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma)); // m + sig * Normal(0,C)\n                    } else {\n                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))\n                                         .scalarMultiply(sigma));\n                    }\n                    if (i >= checkFeasableCount ||\n                        fitfun.isFeasible(arxk.getColumn(0))) {\n                        break;\n                    }\n                    // regenerate random arguments for row\n                    arz.setColumn(k, randn(dimension));\n                }\n                copyColumn(arxk, 0, arx, k);\n                try {\n                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness\n                } catch (TooManyEvaluationsException e) {\n                    break generationLoop;\n                }\n            }\n            // Sort by fitness and compute weighted mean into xmean\n            final int[] arindex = sortedIndices(fitness);\n            // Calculate new xmean, this is selection and recombination\n            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)\n            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));\n            xmean = bestArx.multiply(weights);\n            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));\n            final RealMatrix zmean = bestArz.multiply(weights);\n            final boolean hsig = updateEvolutionPaths(zmean, xold);\n            if (diagonalOnly <= 0) {\n                updateCovariance(hsig, bestArx, arz, arindex, xold);\n            } else {\n                updateCovarianceDiagonalOnly(hsig, bestArz);\n            }\n            // Adapt step size sigma - Eq. (5)\n            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));\n            final double bestFitness = fitness[arindex[0]];\n            final double worstFitness = fitness[arindex[arindex.length - 1]];\n            if (bestValue > bestFitness) {\n                bestValue = bestFitness;\n                lastResult = optimum;\n                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),\n                                             isMinimize ? bestFitness : -bestFitness);\n                if (getConvergenceChecker() != null &&\n                    lastResult != null) {\n                    if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n                        break generationLoop;\n                    }\n                }\n            }\n            // handle termination criteria\n            // Break, if fitness is good enough\n            if (stopFitness != 0) { // only if stopFitness is defined\n                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {\n                    break generationLoop;\n                }\n            }\n            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);\n            final double[] pcCol = pc.getColumn(0);\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {\n                    break;\n                }\n                if (i >= dimension - 1) {\n                    break generationLoop;\n                }\n            }\n            for (int i = 0; i < dimension; i++) {\n                if (sigma * sqrtDiagC[i] > stopTolUpX) {\n                    break generationLoop;\n                }\n            }\n            final double historyBest = min(fitnessHistory);\n            final double historyWorst = max(fitnessHistory);\n            if (iterations > 2 &&\n                Math.max(historyWorst, worstFitness) -\n                Math.min(historyBest, bestFitness) < stopTolFun) {\n                break generationLoop;\n            }\n            if (iterations > fitnessHistory.length &&\n                historyWorst - historyBest < stopTolHistFun) {\n                break generationLoop;\n            }\n            // condition number of the covariance matrix exceeds 1e14\n            if (max(diagD) / min(diagD) > 1e7) {\n                break generationLoop;\n            }\n            // user defined termination\n            if (getConvergenceChecker() != null) {\n                final PointValuePair current\n                    = new PointValuePair(bestArx.getColumn(0),\n                                         isMinimize ? bestFitness : -bestFitness);\n                if (lastResult != null &&\n                    getConvergenceChecker().converged(iterations, current, lastResult)) {\n                    break generationLoop;\n                    }\n                lastResult = current;\n            }\n            // Adjust step size in case of equal function values (flat fitness)\n            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {\n                sigma = sigma * Math.exp(0.2 + cs / damps);\n            }\n            if (iterations > 2 && Math.max(historyWorst, bestFitness) -\n                Math.min(historyBest, bestFitness) == 0) {\n                sigma = sigma * Math.exp(0.2 + cs / damps);\n            }\n            // store best in history\n            push(fitnessHistory,bestFitness);\n            fitfun.setValueRange(worstFitness-bestFitness);\n            if (generateStatistics) {\n                statisticsSigmaHistory.add(sigma);\n                statisticsFitnessHistory.add(bestFitness);\n                statisticsMeanHistory.add(xmean.transpose());\n                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));\n            }\n        }\n        return optimum;\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java",
                "start_loc": 172,
                "end_loc": 268,
                "buggy_function": "     \n    protected PointValuePair doOptimize() {\n        checkParameters();\n\n        final GoalType goal = getGoalType();\n        final double[] guess = getStartPoint();\n        final int n = guess.length;\n\n        final double[][] direc = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            direc[i][i] = 1;\n        }\n\n        final ConvergenceChecker<PointValuePair> checker\n            = getConvergenceChecker();\n\n        double[] x = guess;\n        double fVal = computeObjectiveValue(x);\n        double[] x1 = x.clone();\n        int iter = 0;\n        while (true) {\n            ++iter;\n\n            double fX = fVal;\n            double fX2 = 0;\n            double delta = 0;\n            int bigInd = 0;\n            double alphaMin = 0;\n\n            for (int i = 0; i < n; i++) {\n                final double[] d = MathArrays.copyOf(direc[i]);\n\n                fX2 = fVal;\n\n                final UnivariatePointValuePair optimum = line.search(x, d);\n                fVal = optimum.getValue();\n                alphaMin = optimum.getPoint();\n                final double[][] result = newPointAndDirection(x, d, alphaMin);\n                x = result[0];\n\n                if ((fX2 - fVal) > delta) {\n                    delta = fX2 - fVal;\n                    bigInd = i;\n                }\n            }\n\n            // Default convergence check.\n            boolean stop = 2 * (fX - fVal) <=\n                (relativeThreshold * (FastMath.abs(fX) + FastMath.abs(fVal)) +\n                 absoluteThreshold);\n\n            final PointValuePair previous = new PointValuePair(x1, fX);\n            final PointValuePair current = new PointValuePair(x, fVal);\n            if (!stop) { // User-defined stopping criteria.\n                if (checker != null) {\n                    stop = checker.converged(iter, previous, current);\n                }\n            }\n            if (stop) {\n                if (goal == GoalType.MINIMIZE) {\n                    return (fVal < fX) ? current : previous;\n                } else {\n                    return (fVal > fX) ? current : previous;\n                }\n            }\n\n            final double[] d = new double[n];\n            final double[] x2 = new double[n];\n            for (int i = 0; i < n; i++) {\n                d[i] = x[i] - x1[i];\n                x2[i] = 2 * x[i] - x1[i];\n            }\n\n            x1 = x.clone();\n            fX2 = computeObjectiveValue(x2);\n\n            if (fX > fX2) {\n                double t = 2 * (fX + fX2 - 2 * fVal);\n                double temp = fX - fVal - delta;\n                t *= temp * temp;\n                temp = fX - fX2;\n                t -= delta * temp * temp;\n\n                if (t < 0.0) {\n                    final UnivariatePointValuePair optimum = line.search(x, d);\n                    fVal = optimum.getValue();\n                    alphaMin = optimum.getPoint();\n                    final double[][] result = newPointAndDirection(x, d, alphaMin);\n                    x = result[0];\n\n                    final int lastInd = n - 1;\n                    direc[bigInd] = direc[lastInd];\n                    direc[lastInd] = result[1];\n                }\n            }\n        }\n    }\n",
                "fixed_function": "     \n    protected PointValuePair doOptimize() {\n        checkParameters();\n\n        final GoalType goal = getGoalType();\n        final double[] guess = getStartPoint();\n        final int n = guess.length;\n\n        final double[][] direc = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            direc[i][i] = 1;\n        }\n\n        final ConvergenceChecker<PointValuePair> checker\n            = getConvergenceChecker();\n\n        double[] x = guess;\n        double fVal = computeObjectiveValue(x);\n        double[] x1 = x.clone();\n        while (true) {\n            incrementIterationCount();\n\n            double fX = fVal;\n            double fX2 = 0;\n            double delta = 0;\n            int bigInd = 0;\n            double alphaMin = 0;\n\n            for (int i = 0; i < n; i++) {\n                final double[] d = MathArrays.copyOf(direc[i]);\n\n                fX2 = fVal;\n\n                final UnivariatePointValuePair optimum = line.search(x, d);\n                fVal = optimum.getValue();\n                alphaMin = optimum.getPoint();\n                final double[][] result = newPointAndDirection(x, d, alphaMin);\n                x = result[0];\n\n                if ((fX2 - fVal) > delta) {\n                    delta = fX2 - fVal;\n                    bigInd = i;\n                }\n            }\n\n            // Default convergence check.\n            boolean stop = 2 * (fX - fVal) <=\n                (relativeThreshold * (FastMath.abs(fX) + FastMath.abs(fVal)) +\n                 absoluteThreshold);\n\n            final PointValuePair previous = new PointValuePair(x1, fX);\n            final PointValuePair current = new PointValuePair(x, fVal);\n            if (!stop) { // User-defined stopping criteria.\n                if (checker != null) {\n                    stop = checker.converged(getIterations(), previous, current);\n                }\n            }\n            if (stop) {\n                if (goal == GoalType.MINIMIZE) {\n                    return (fVal < fX) ? current : previous;\n                } else {\n                    return (fVal > fX) ? current : previous;\n                }\n            }\n\n            final double[] d = new double[n];\n            final double[] x2 = new double[n];\n            for (int i = 0; i < n; i++) {\n                d[i] = x[i] - x1[i];\n                x2[i] = 2 * x[i] - x1[i];\n            }\n\n            x1 = x.clone();\n            fX2 = computeObjectiveValue(x2);\n\n            if (fX > fX2) {\n                double t = 2 * (fX + fX2 - 2 * fVal);\n                double temp = fX - fVal - delta;\n                t *= temp * temp;\n                temp = fX - fX2;\n                t -= delta * temp * temp;\n\n                if (t < 0.0) {\n                    final UnivariatePointValuePair optimum = line.search(x, d);\n                    fVal = optimum.getValue();\n                    alphaMin = optimum.getPoint();\n                    final double[][] result = newPointAndDirection(x, d, alphaMin);\n                    x = result[0];\n\n                    final int lastInd = n - 1;\n                    direc[bigInd] = direc[lastInd];\n                    direc[lastInd] = result[1];\n                }\n            }\n        }\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java",
                "start_loc": 126,
                "end_loc": 177,
                "buggy_function": "     \n    protected PointValuePair doOptimize() {\n        checkParameters();\n\n        // Indirect call to \"computeObjectiveValue\" in order to update the\n        // evaluations counter.\n        final MultivariateFunction evalFunc\n            = new MultivariateFunction() {\n                public double value(double[] point) {\n                    return computeObjectiveValue(point);\n                }\n            };\n\n        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n        final Comparator<PointValuePair> comparator\n            = new Comparator<PointValuePair>() {\n            public int compare(final PointValuePair o1,\n                               final PointValuePair o2) {\n                final double v1 = o1.getValue();\n                final double v2 = o2.getValue();\n                return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\n            }\n        };\n\n        // Initialize search.\n        simplex.build(getStartPoint());\n        simplex.evaluate(evalFunc, comparator);\n\n        PointValuePair[] previous = null;\n        int iteration = 0;\n        final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n        while (true) {\n            if (iteration > 0) {\n                boolean converged = true;\n                for (int i = 0; i < simplex.getSize(); i++) {\n                    PointValuePair prev = previous[i];\n                    converged = converged &&\n                        checker.converged(iteration, prev, simplex.getPoint(i));\n                }\n                if (converged) {\n                    // We have found an optimum.\n                    return simplex.getPoint(0);\n                }\n            }\n\n            // We still need to search.\n            previous = simplex.getPoints();\n            simplex.iterate(evalFunc, comparator);\n\n\t\t\t++iteration;\n        }\n    }\n",
                "fixed_function": "     \n    protected PointValuePair doOptimize() {\n        checkParameters();\n\n        // Indirect call to \"computeObjectiveValue\" in order to update the\n        // evaluations counter.\n        final MultivariateFunction evalFunc\n            = new MultivariateFunction() {\n                public double value(double[] point) {\n                    return computeObjectiveValue(point);\n                }\n            };\n\n        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n        final Comparator<PointValuePair> comparator\n            = new Comparator<PointValuePair>() {\n            public int compare(final PointValuePair o1,\n                               final PointValuePair o2) {\n                final double v1 = o1.getValue();\n                final double v2 = o2.getValue();\n                return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\n            }\n        };\n\n        // Initialize search.\n        simplex.build(getStartPoint());\n        simplex.evaluate(evalFunc, comparator);\n\n        PointValuePair[] previous = null;\n        int iteration = 0;\n        final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n        while (true) {\n            if (getIterations() > 0) {\n                boolean converged = true;\n                for (int i = 0; i < simplex.getSize(); i++) {\n                    PointValuePair prev = previous[i];\n                    converged = converged &&\n                        checker.converged(iteration, prev, simplex.getPoint(i));\n                }\n                if (converged) {\n                    // We have found an optimum.\n                    return simplex.getPoint(0);\n                }\n            }\n\n            // We still need to search.\n            previous = simplex.getPoints();\n            simplex.iterate(evalFunc, comparator);\n\n            incrementIterationCount();\n        }\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java",
                "start_loc": 79,
                "end_loc": 169,
                "buggy_function": "     \n    public PointVectorValuePair doOptimize() {\n        checkParameters();\n\n        final ConvergenceChecker<PointVectorValuePair> checker\n            = getConvergenceChecker();\n\n        // Computation will be useless without a checker (see \"for-loop\").\n        if (checker == null) {\n            throw new NullArgumentException();\n        }\n\n        final double[] targetValues = getTarget();\n        final int nR = targetValues.length; // Number of observed data.\n\n        final RealMatrix weightMatrix = getWeight();\n        // Diagonal of the weight matrix.\n        final double[] residualsWeights = new double[nR];\n        for (int i = 0; i < nR; i++) {\n            residualsWeights[i] = weightMatrix.getEntry(i, i);\n        }\n\n        final double[] currentPoint = getStartPoint();\n        final int nC = currentPoint.length;\n\n        // iterate until convergence is reached\n        PointVectorValuePair current = null;\n        int iter = 0;\n        for (boolean converged = false; !converged;) {\n            ++iter;\n\n            // evaluate the objective function and its jacobian\n            PointVectorValuePair previous = current;\n            // Value of the objective function at \"currentPoint\".\n            final double[] currentObjective = computeObjectiveValue(currentPoint);\n            final double[] currentResiduals = computeResiduals(currentObjective);\n            final RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);\n            current = new PointVectorValuePair(currentPoint, currentObjective);\n\n            // build the linear problem\n            final double[]   b = new double[nC];\n            final double[][] a = new double[nC][nC];\n            for (int i = 0; i < nR; ++i) {\n\n                final double[] grad   = weightedJacobian.getRow(i);\n                final double weight   = residualsWeights[i];\n                final double residual = currentResiduals[i];\n\n                // compute the normal equation\n                final double wr = weight * residual;\n                for (int j = 0; j < nC; ++j) {\n                    b[j] += wr * grad[j];\n                }\n\n                // build the contribution matrix for measurement i\n                for (int k = 0; k < nC; ++k) {\n                    double[] ak = a[k];\n                    double wgk = weight * grad[k];\n                    for (int l = 0; l < nC; ++l) {\n                        ak[l] += wgk * grad[l];\n                    }\n                }\n            }\n\n            try {\n                // solve the linearized least squares problem\n                RealMatrix mA = new BlockRealMatrix(a);\n                DecompositionSolver solver = useLU ?\n                        new LUDecomposition(mA).getSolver() :\n                        new QRDecomposition(mA).getSolver();\n                final double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();\n                // update the estimated parameters\n                for (int i = 0; i < nC; ++i) {\n                    currentPoint[i] += dX[i];\n                }\n            } catch (SingularMatrixException e) {\n                throw new ConvergenceException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);\n            }\n\n            // Check convergence.\n            if (previous != null) {\n                converged = checker.converged(iter, previous, current);\n                if (converged) {\n                    setCost(computeCost(currentResiduals));\n                    return current;\n                }\n            }\n        }\n        // Must never happen.\n        throw new MathInternalError();\n    }\n",
                "fixed_function": "     \n    public PointVectorValuePair doOptimize() {\n        checkParameters();\n\n        final ConvergenceChecker<PointVectorValuePair> checker\n            = getConvergenceChecker();\n\n        // Computation will be useless without a checker (see \"for-loop\").\n        if (checker == null) {\n            throw new NullArgumentException();\n        }\n\n        final double[] targetValues = getTarget();\n        final int nR = targetValues.length; // Number of observed data.\n\n        final RealMatrix weightMatrix = getWeight();\n        // Diagonal of the weight matrix.\n        final double[] residualsWeights = new double[nR];\n        for (int i = 0; i < nR; i++) {\n            residualsWeights[i] = weightMatrix.getEntry(i, i);\n        }\n\n        final double[] currentPoint = getStartPoint();\n        final int nC = currentPoint.length;\n\n        // iterate until convergence is reached\n        PointVectorValuePair current = null;\n        for (boolean converged = false; !converged;) {\n            incrementIterationCount();\n\n            // evaluate the objective function and its jacobian\n            PointVectorValuePair previous = current;\n            // Value of the objective function at \"currentPoint\".\n            final double[] currentObjective = computeObjectiveValue(currentPoint);\n            final double[] currentResiduals = computeResiduals(currentObjective);\n            final RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);\n            current = new PointVectorValuePair(currentPoint, currentObjective);\n\n            // build the linear problem\n            final double[]   b = new double[nC];\n            final double[][] a = new double[nC][nC];\n            for (int i = 0; i < nR; ++i) {\n\n                final double[] grad   = weightedJacobian.getRow(i);\n                final double weight   = residualsWeights[i];\n                final double residual = currentResiduals[i];\n\n                // compute the normal equation\n                final double wr = weight * residual;\n                for (int j = 0; j < nC; ++j) {\n                    b[j] += wr * grad[j];\n                }\n\n                // build the contribution matrix for measurement i\n                for (int k = 0; k < nC; ++k) {\n                    double[] ak = a[k];\n                    double wgk = weight * grad[k];\n                    for (int l = 0; l < nC; ++l) {\n                        ak[l] += wgk * grad[l];\n                    }\n                }\n            }\n\n            try {\n                // solve the linearized least squares problem\n                RealMatrix mA = new BlockRealMatrix(a);\n                DecompositionSolver solver = useLU ?\n                        new LUDecomposition(mA).getSolver() :\n                        new QRDecomposition(mA).getSolver();\n                final double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();\n                // update the estimated parameters\n                for (int i = 0; i < nC; ++i) {\n                    currentPoint[i] += dX[i];\n                }\n            } catch (SingularMatrixException e) {\n                throw new ConvergenceException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);\n            }\n\n            // Check convergence.\n            if (previous != null) {\n                converged = checker.converged(getIterations(), previous, current);\n                if (converged) {\n                    setCost(computeCost(currentResiduals));\n                    return current;\n                }\n            }\n        }\n        // Must never happen.\n        throw new MathInternalError();\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
                "start_loc": 283,
                "end_loc": 534,
                "buggy_function": "     \n    protected PointVectorValuePair doOptimize() {\n        checkParameters();\n\n        final int nR = getTarget().length; // Number of observed data.\n        final double[] currentPoint = getStartPoint();\n        final int nC = currentPoint.length; // Number of parameters.\n\n        // arrays shared with the other private methods\n        solvedCols  = FastMath.min(nR, nC);\n        diagR       = new double[nC];\n        jacNorm     = new double[nC];\n        beta        = new double[nC];\n        permutation = new int[nC];\n        lmDir       = new double[nC];\n\n        // local point\n        double   delta   = 0;\n        double   xNorm   = 0;\n        double[] diag    = new double[nC];\n        double[] oldX    = new double[nC];\n        double[] oldRes  = new double[nR];\n        double[] oldObj  = new double[nR];\n        double[] qtf     = new double[nR];\n        double[] work1   = new double[nC];\n        double[] work2   = new double[nC];\n        double[] work3   = new double[nC];\n\n        final RealMatrix weightMatrixSqrt = getWeightSquareRoot();\n\n        // Evaluate the function at the starting point and calculate its norm.\n        double[] currentObjective = computeObjectiveValue(currentPoint);\n        double[] currentResiduals = computeResiduals(currentObjective);\n        PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);\n        double currentCost = computeCost(currentResiduals);\n\n        // Outer loop.\n        lmPar = 0;\n        boolean firstIteration = true;\n        int iter = 0;\n        final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();\n        while (true) {\n            ++iter;\n            final PointVectorValuePair previous = current;\n\n            // QR decomposition of the jacobian matrix\n            qrDecomposition(computeWeightedJacobian(currentPoint));\n\n            weightedResidual = weightMatrixSqrt.operate(currentResiduals);\n            for (int i = 0; i < nR; i++) {\n                qtf[i] = weightedResidual[i];\n            }\n\n            // compute Qt.res\n            qTy(qtf);\n\n            // now we don't need Q anymore,\n            // so let jacobian contain the R matrix with its diagonal elements\n            for (int k = 0; k < solvedCols; ++k) {\n                int pk = permutation[k];\n                weightedJacobian[k][pk] = diagR[pk];\n            }\n\n            if (firstIteration) {\n                // scale the point according to the norms of the columns\n                // of the initial jacobian\n                xNorm = 0;\n                for (int k = 0; k < nC; ++k) {\n                    double dk = jacNorm[k];\n                    if (dk == 0) {\n                        dk = 1.0;\n                    }\n                    double xk = dk * currentPoint[k];\n                    xNorm  += xk * xk;\n                    diag[k] = dk;\n                }\n                xNorm = FastMath.sqrt(xNorm);\n\n                // initialize the step bound delta\n                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n            }\n\n            // check orthogonality between function vector and jacobian columns\n            double maxCosine = 0;\n            if (currentCost != 0) {\n                for (int j = 0; j < solvedCols; ++j) {\n                    int    pj = permutation[j];\n                    double s  = jacNorm[pj];\n                    if (s != 0) {\n                        double sum = 0;\n                        for (int i = 0; i <= j; ++i) {\n                            sum += weightedJacobian[i][pj] * qtf[i];\n                        }\n                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * currentCost));\n                    }\n                }\n            }\n            if (maxCosine <= orthoTolerance) {\n                // Convergence has been reached.\n                setCost(currentCost);\n                return current;\n            }\n\n            // rescale if necessary\n            for (int j = 0; j < nC; ++j) {\n                diag[j] = FastMath.max(diag[j], jacNorm[j]);\n            }\n\n            // Inner loop.\n            for (double ratio = 0; ratio < 1.0e-4;) {\n\n                // save the state\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    oldX[pj] = currentPoint[pj];\n                }\n                final double previousCost = currentCost;\n                double[] tmpVec = weightedResidual;\n                weightedResidual = oldRes;\n                oldRes    = tmpVec;\n                tmpVec    = currentObjective;\n                currentObjective = oldObj;\n                oldObj    = tmpVec;\n\n                // determine the Levenberg-Marquardt parameter\n                determineLMParameter(qtf, delta, diag, work1, work2, work3);\n\n                // compute the new point and the norm of the evolution direction\n                double lmNorm = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    lmDir[pj] = -lmDir[pj];\n                    currentPoint[pj] = oldX[pj] + lmDir[pj];\n                    double s = diag[pj] * lmDir[pj];\n                    lmNorm  += s * s;\n                }\n                lmNorm = FastMath.sqrt(lmNorm);\n                // on the first iteration, adjust the initial step bound.\n                if (firstIteration) {\n                    delta = FastMath.min(delta, lmNorm);\n                }\n\n                // Evaluate the function at x + p and calculate its norm.\n                currentObjective = computeObjectiveValue(currentPoint);\n                currentResiduals = computeResiduals(currentObjective);\n                current = new PointVectorValuePair(currentPoint, currentObjective);\n                currentCost = computeCost(currentResiduals);\n\n                // compute the scaled actual reduction\n                double actRed = -1.0;\n                if (0.1 * currentCost < previousCost) {\n                    double r = currentCost / previousCost;\n                    actRed = 1.0 - r * r;\n                }\n\n                // compute the scaled predicted reduction\n                // and the scaled directional derivative\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    double dirJ = lmDir[pj];\n                    work1[j] = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        work1[i] += weightedJacobian[i][pj] * dirJ;\n                    }\n                }\n                double coeff1 = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    coeff1 += work1[j] * work1[j];\n                }\n                double pc2 = previousCost * previousCost;\n                coeff1 = coeff1 / pc2;\n                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n                double preRed = coeff1 + 2 * coeff2;\n                double dirDer = -(coeff1 + coeff2);\n\n                // ratio of the actual to the predicted reduction\n                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n\n                // update the step bound\n                if (ratio <= 0.25) {\n                    double tmp =\n                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n                        if ((0.1 * currentCost >= previousCost) || (tmp < 0.1)) {\n                            tmp = 0.1;\n                        }\n                        delta = tmp * FastMath.min(delta, 10.0 * lmNorm);\n                        lmPar /= tmp;\n                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                    delta = 2 * lmNorm;\n                    lmPar *= 0.5;\n                }\n\n                // test for successful iteration.\n                if (ratio >= 1.0e-4) {\n                    // successful iteration, update the norm\n                    firstIteration = false;\n                    xNorm = 0;\n                    for (int k = 0; k < nC; ++k) {\n                        double xK = diag[k] * currentPoint[k];\n                        xNorm += xK * xK;\n                    }\n                    xNorm = FastMath.sqrt(xNorm);\n\n                    // tests for convergence.\n                    if (checker != null) {\n                        // we use the vectorial convergence checker\n                        if (checker.converged(iter, previous, current)) {\n                            setCost(currentCost);\n                            return current;\n                        }\n                    }\n                } else {\n                    // failed iteration, reset the previous values\n                    currentCost = previousCost;\n                    for (int j = 0; j < solvedCols; ++j) {\n                        int pj = permutation[j];\n                        currentPoint[pj] = oldX[pj];\n                    }\n                    tmpVec    = weightedResidual;\n                    weightedResidual = oldRes;\n                    oldRes    = tmpVec;\n                    tmpVec    = currentObjective;\n                    currentObjective = oldObj;\n                    oldObj    = tmpVec;\n                    // Reset \"current\" to previous values.\n                    current = new PointVectorValuePair(currentPoint, currentObjective);\n                }\n\n                // Default convergence criteria.\n                if ((FastMath.abs(actRed) <= costRelativeTolerance &&\n                     preRed <= costRelativeTolerance &&\n                     ratio <= 2.0) ||\n                    delta <= parRelativeTolerance * xNorm) {\n                    setCost(currentCost);\n                    return current;\n                }\n\n                // tests for termination and stringent tolerances\n                // (2.2204e-16 is the machine epsilon for IEEE754)\n                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n                                                   costRelativeTolerance);\n                } else if (delta <= 2.2204e-16 * xNorm) {\n                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n                                                   parRelativeTolerance);\n                } else if (maxCosine <= 2.2204e-16)  {\n                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n                                                   orthoTolerance);\n                }\n            }\n        }\n    }\n",
                "fixed_function": "     \n    protected PointVectorValuePair doOptimize() {\n        checkParameters();\n\n        final int nR = getTarget().length; // Number of observed data.\n        final double[] currentPoint = getStartPoint();\n        final int nC = currentPoint.length; // Number of parameters.\n\n        // arrays shared with the other private methods\n        solvedCols  = FastMath.min(nR, nC);\n        diagR       = new double[nC];\n        jacNorm     = new double[nC];\n        beta        = new double[nC];\n        permutation = new int[nC];\n        lmDir       = new double[nC];\n\n        // local point\n        double   delta   = 0;\n        double   xNorm   = 0;\n        double[] diag    = new double[nC];\n        double[] oldX    = new double[nC];\n        double[] oldRes  = new double[nR];\n        double[] oldObj  = new double[nR];\n        double[] qtf     = new double[nR];\n        double[] work1   = new double[nC];\n        double[] work2   = new double[nC];\n        double[] work3   = new double[nC];\n\n        final RealMatrix weightMatrixSqrt = getWeightSquareRoot();\n\n        // Evaluate the function at the starting point and calculate its norm.\n        double[] currentObjective = computeObjectiveValue(currentPoint);\n        double[] currentResiduals = computeResiduals(currentObjective);\n        PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);\n        double currentCost = computeCost(currentResiduals);\n\n        // Outer loop.\n        lmPar = 0;\n        boolean firstIteration = true;\n        final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();\n        while (true) {\n            incrementIterationCount();\n\n            final PointVectorValuePair previous = current;\n\n            // QR decomposition of the jacobian matrix\n            qrDecomposition(computeWeightedJacobian(currentPoint));\n\n            weightedResidual = weightMatrixSqrt.operate(currentResiduals);\n            for (int i = 0; i < nR; i++) {\n                qtf[i] = weightedResidual[i];\n            }\n\n            // compute Qt.res\n            qTy(qtf);\n\n            // now we don't need Q anymore,\n            // so let jacobian contain the R matrix with its diagonal elements\n            for (int k = 0; k < solvedCols; ++k) {\n                int pk = permutation[k];\n                weightedJacobian[k][pk] = diagR[pk];\n            }\n\n            if (firstIteration) {\n                // scale the point according to the norms of the columns\n                // of the initial jacobian\n                xNorm = 0;\n                for (int k = 0; k < nC; ++k) {\n                    double dk = jacNorm[k];\n                    if (dk == 0) {\n                        dk = 1.0;\n                    }\n                    double xk = dk * currentPoint[k];\n                    xNorm  += xk * xk;\n                    diag[k] = dk;\n                }\n                xNorm = FastMath.sqrt(xNorm);\n\n                // initialize the step bound delta\n                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n            }\n\n            // check orthogonality between function vector and jacobian columns\n            double maxCosine = 0;\n            if (currentCost != 0) {\n                for (int j = 0; j < solvedCols; ++j) {\n                    int    pj = permutation[j];\n                    double s  = jacNorm[pj];\n                    if (s != 0) {\n                        double sum = 0;\n                        for (int i = 0; i <= j; ++i) {\n                            sum += weightedJacobian[i][pj] * qtf[i];\n                        }\n                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * currentCost));\n                    }\n                }\n            }\n            if (maxCosine <= orthoTolerance) {\n                // Convergence has been reached.\n                setCost(currentCost);\n                return current;\n            }\n\n            // rescale if necessary\n            for (int j = 0; j < nC; ++j) {\n                diag[j] = FastMath.max(diag[j], jacNorm[j]);\n            }\n\n            // Inner loop.\n            for (double ratio = 0; ratio < 1.0e-4;) {\n\n                // save the state\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    oldX[pj] = currentPoint[pj];\n                }\n                final double previousCost = currentCost;\n                double[] tmpVec = weightedResidual;\n                weightedResidual = oldRes;\n                oldRes    = tmpVec;\n                tmpVec    = currentObjective;\n                currentObjective = oldObj;\n                oldObj    = tmpVec;\n\n                // determine the Levenberg-Marquardt parameter\n                determineLMParameter(qtf, delta, diag, work1, work2, work3);\n\n                // compute the new point and the norm of the evolution direction\n                double lmNorm = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    lmDir[pj] = -lmDir[pj];\n                    currentPoint[pj] = oldX[pj] + lmDir[pj];\n                    double s = diag[pj] * lmDir[pj];\n                    lmNorm  += s * s;\n                }\n                lmNorm = FastMath.sqrt(lmNorm);\n                // on the first iteration, adjust the initial step bound.\n                if (firstIteration) {\n                    delta = FastMath.min(delta, lmNorm);\n                }\n\n                // Evaluate the function at x + p and calculate its norm.\n                currentObjective = computeObjectiveValue(currentPoint);\n                currentResiduals = computeResiduals(currentObjective);\n                current = new PointVectorValuePair(currentPoint, currentObjective);\n                currentCost = computeCost(currentResiduals);\n\n                // compute the scaled actual reduction\n                double actRed = -1.0;\n                if (0.1 * currentCost < previousCost) {\n                    double r = currentCost / previousCost;\n                    actRed = 1.0 - r * r;\n                }\n\n                // compute the scaled predicted reduction\n                // and the scaled directional derivative\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    double dirJ = lmDir[pj];\n                    work1[j] = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        work1[i] += weightedJacobian[i][pj] * dirJ;\n                    }\n                }\n                double coeff1 = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    coeff1 += work1[j] * work1[j];\n                }\n                double pc2 = previousCost * previousCost;\n                coeff1 = coeff1 / pc2;\n                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n                double preRed = coeff1 + 2 * coeff2;\n                double dirDer = -(coeff1 + coeff2);\n\n                // ratio of the actual to the predicted reduction\n                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n\n                // update the step bound\n                if (ratio <= 0.25) {\n                    double tmp =\n                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n                        if ((0.1 * currentCost >= previousCost) || (tmp < 0.1)) {\n                            tmp = 0.1;\n                        }\n                        delta = tmp * FastMath.min(delta, 10.0 * lmNorm);\n                        lmPar /= tmp;\n                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                    delta = 2 * lmNorm;\n                    lmPar *= 0.5;\n                }\n\n                // test for successful iteration.\n                if (ratio >= 1.0e-4) {\n                    // successful iteration, update the norm\n                    firstIteration = false;\n                    xNorm = 0;\n                    for (int k = 0; k < nC; ++k) {\n                        double xK = diag[k] * currentPoint[k];\n                        xNorm += xK * xK;\n                    }\n                    xNorm = FastMath.sqrt(xNorm);\n\n                    // tests for convergence.\n                    if (checker != null) {\n                        // we use the vectorial convergence checker\n                        if (checker.converged(getIterations(), previous, current)) {\n                            setCost(currentCost);\n                            return current;\n                        }\n                    }\n                } else {\n                    // failed iteration, reset the previous values\n                    currentCost = previousCost;\n                    for (int j = 0; j < solvedCols; ++j) {\n                        int pj = permutation[j];\n                        currentPoint[pj] = oldX[pj];\n                    }\n                    tmpVec    = weightedResidual;\n                    weightedResidual = oldRes;\n                    oldRes    = tmpVec;\n                    tmpVec    = currentObjective;\n                    currentObjective = oldObj;\n                    oldObj    = tmpVec;\n                    // Reset \"current\" to previous values.\n                    current = new PointVectorValuePair(currentPoint, currentObjective);\n                }\n\n                // Default convergence criteria.\n                if ((FastMath.abs(actRed) <= costRelativeTolerance &&\n                     preRed <= costRelativeTolerance &&\n                     ratio <= 2.0) ||\n                    delta <= parRelativeTolerance * xNorm) {\n                    setCost(currentCost);\n                    return current;\n                }\n\n                // tests for termination and stringent tolerances\n                // (2.2204e-16 is the machine epsilon for IEEE754)\n                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n                                                   costRelativeTolerance);\n                } else if (delta <= 2.2204e-16 * xNorm) {\n                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n                                                   parRelativeTolerance);\n                } else if (maxCosine <= 2.2204e-16)  {\n                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n                                                   orthoTolerance);\n                }\n            }\n        }\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1",
                    "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations",
                    "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial": {
                "path": "apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
                "function_name": "testTrivial",
                "src": "    public void testTrivial() {\n        LinearProblem problem\n            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });\n        AbstractLeastSquaresOptimizer optimizer = createOptimizer();\n        PointVectorValuePair optimum =\n            optimizer.optimize(new MaxEval(100),\n                               problem.getModelFunction(),\n                               problem.getModelFunctionJacobian(),\n                               problem.getTarget(),\n                               new Weight(new double[] { 1 }),\n                               new InitialGuess(new double[] { 0 }));\n        Assert.assertEquals(0, optimizer.getRMS(), 1e-10);\n        Assert.assertEquals(1.5, optimum.getPoint()[0], 1e-10);\n        Assert.assertEquals(3.0, optimum.getValue()[0], 1e-10);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial(NonLinearConjugateGradientOptimizerTest.java:141)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial(NonLinearConjugateGradientOptimizerTest.java:141)  Assert.assertTrue(optimizer.getIterations() > 0);",
                "failed_line": 141
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testConstrainedRosen",
                "src": "    public void testConstrainedRosen() {\n        double[] startPoint = point(DIM, 0.1);\n        double[] insigma = point(DIM, 0.1);\n        double[][] boundaries = boundaries(DIM, -1, 2);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testConstrainedRosen(CMAESOptimizerTest.java:348)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testConstrainedRosen(CMAESOptimizerTest.java:348)  doTest(new Rosen(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,                1e-13, 1e-6, 100000, expected);",
                "failed_line": 348
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testElliRotated",
                "src": "    public void testElliRotated() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new ElliRotated(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testElliRotated(CMAESOptimizerTest.java:183)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testElliRotated(CMAESOptimizerTest.java:183)  doTest(new ElliRotated(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,                1e-13, 1e-6, 100000, expected);",
                "failed_line": 183
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testEllipse",
                "src": "    public void testEllipse() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Elli(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testEllipse(CMAESOptimizerTest.java:168)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testEllipse(CMAESOptimizerTest.java:168)  doTest(new Elli(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,                1e-13, 1e-6, 100000, expected);",
                "failed_line": 168
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testTwoAxes",
                "src": "    public void testTwoAxes() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new TwoAxes(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-8, 1e-3, 200000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTwoAxes(CMAESOptimizerTest.java:228)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTwoAxes(CMAESOptimizerTest.java:228)  doTest(new TwoAxes(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,                1e-13, 1e-6, 200000, expected);",
                "failed_line": 228
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testCigar",
                "src": "    public void testCigar() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigar(CMAESOptimizerTest.java:198)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigar(CMAESOptimizerTest.java:198)  doTest(new Cigar(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,                1e-13, 1e-6, 200000, expected);",
                "failed_line": 198
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testRosen",
                "src": "    public void testRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRosen(CMAESOptimizerTest.java:132)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:67)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRosen(CMAESOptimizerTest.java:132)  doTest(new Rosen(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,                1e-13, 1e-6, 100000, expected);",
                "failed_line": 132
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testRastrigin",
                "src": "    public void testRastrigin() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Rastrigin(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRastrigin(CMAESOptimizerTest.java:333)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRastrigin(CMAESOptimizerTest.java:333)  doTest(new Rastrigin(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,                1e-13, 1e-6, 200000, expected);",
                "failed_line": 333
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testDiagonalRosen",
                "src": "    public void testDiagonalRosen() {\n        double[] startPoint = point(DIM,0.1);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,1.0),0.0);\n        doTest(new Rosen(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,\n                1e-10, 1e-4, 1000000, expected);\n     }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiagonalRosen(CMAESOptimizerTest.java:363)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiagonalRosen(CMAESOptimizerTest.java:363)  doTest(new Rosen(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,                1e-10, 1e-4, 1000000, expected);",
                "failed_line": 363
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testSsDiffPow",
                "src": "    public void testSsDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n        doTest(new SsDiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-4, 1e-1, 200000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSsDiffPow(CMAESOptimizerTest.java:303)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSsDiffPow(CMAESOptimizerTest.java:303)  doTest(new SsDiffPow(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, 10, true, 0, 1e-13,                1e-4, 1e-1, 200000, expected);",
                "failed_line": 303
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testMaximize",
                "src": "    public void testMaximize() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),1.0);\n        doTest(new MinusElli(), startPoint, insigma, boundaries,\n                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,\n                2e-10, 5e-6, 100000, expected);\n        doTest(new MinusElli(), startPoint, insigma, boundaries,\n                GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,\n                2e-10, 5e-6, 100000, expected);\n        boundaries = boundaries(DIM,-0.3,0.3); \n        startPoint = point(DIM,0.1);\n        doTest(new MinusElli(), startPoint, insigma, boundaries,\n                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,\n                2e-10, 5e-6, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testMaximize(CMAESOptimizerTest.java:148)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:67)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testMaximize(CMAESOptimizerTest.java:148)  doTest(new MinusElli(), startPoint, insigma, boundaries,                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,                2e-10, 5e-6, 100000, expected);",
                "failed_line": 148
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testAckley",
                "src": "    public void testAckley() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,1.0);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n        doTest(new Ackley(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,\n                1e-9, 1e-5, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testAckley(CMAESOptimizerTest.java:318)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testAckley(CMAESOptimizerTest.java:318)  doTest(new Ackley(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,                1e-9, 1e-5, 100000, expected);",
                "failed_line": 318
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testCigTab",
                "src": "    public void testCigTab() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.3);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new CigTab(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 5e-5, 100000, expected);\n        doTest(new CigTab(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 5e-5, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigTab(CMAESOptimizerTest.java:243)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigTab(CMAESOptimizerTest.java:243)  doTest(new CigTab(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,                1e-13, 5e-5, 100000, expected);",
                "failed_line": 243
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testDiffPow",
                "src": "    public void testDiffPow() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, true, 0, 1e-13,\n                1e-8, 1e-1, 100000, expected);\n        doTest(new DiffPow(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, 10, false, 0, 1e-13,\n                1e-8, 2e-1, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiffPow(CMAESOptimizerTest.java:288)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiffPow(CMAESOptimizerTest.java:288)  doTest(new DiffPow(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, 10, true, 0, 1e-13,                1e-8, 1e-1, 100000, expected);",
                "failed_line": 288
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testSphere",
                "src": "    public void testSphere() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Sphere(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSphere(CMAESOptimizerTest.java:258)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSphere(CMAESOptimizerTest.java:258)  doTest(new Sphere(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,                1e-13, 1e-6, 100000, expected);",
                "failed_line": 258
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testTablet",
                "src": "    public void testTablet() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = null;\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n        doTest(new Tablet(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTablet(CMAESOptimizerTest.java:273)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTablet(CMAESOptimizerTest.java:273)  doTest(new Tablet(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,                1e-13, 1e-6, 100000, expected);",
                "failed_line": 273
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java",
                "function_name": "testCigarWithBoundaries",
                "src": "    public void testCigarWithBoundaries() {\n        double[] startPoint = point(DIM,1.0);\n        double[] insigma = point(DIM,0.1);\n        double[][] boundaries = boundaries(DIM, -1e100, Double.POSITIVE_INFINITY);\n        PointValuePair expected =\n            new PointValuePair(point(DIM,0.0),0.0);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,\n                1e-13, 1e-6, 200000, expected);\n        doTest(new Cigar(), startPoint, insigma, boundaries,\n                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,\n                1e-13, 1e-6, 100000, expected);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigarWithBoundaries(CMAESOptimizerTest.java:213)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.apache.commons.math3.RetryRunner$1.evaluate(RetryRunner.java:60)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.doTest(CMAESOptimizerTest.java:514)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigarWithBoundaries(CMAESOptimizerTest.java:213)  doTest(new Cigar(), startPoint, insigma, boundaries,                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,                1e-13, 1e-6, 200000, expected);",
                "failed_line": 213
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java",
                "function_name": "testSumSinc",
                "src": "    public void testSumSinc() {\n        final MultivariateFunction func = new SumSincFunction(-1);\n\n        int dim = 2;\n        final double[] minPoint = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            minPoint[i] = 0;\n        }\n\n        double[] init = new double[dim];\n\n        // Initial is minimum.\n        for (int i = 0; i < dim; i++) {\n            init[i] = minPoint[i];\n        }\n        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);\n\n        // Initial is far from minimum.\n        for (int i = 0; i < dim; i++) {\n            init[i] = minPoint[i] + 3;\n        }\n        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);\n        // More stringent line search tolerance enhances the precision\n        // of the result.\n        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(PowellOptimizerTest.java:266)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(PowellOptimizerTest.java:75)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.doTest(PowellOptimizerTest.java:266)  Assert.assertTrue(optim.getIterations() > 0);\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc(PowellOptimizerTest.java:75)  doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);",
                "failed_line": 75
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
                "function_name": "testMaximize1",
                "src": "    public void testMaximize1() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MAXIMIZE,\n                                 new InitialGuess(new double[] { -3, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);\n        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);\n        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(SimplexOptimizerMultiDirectionalTest.java:108)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1(SimplexOptimizerMultiDirectionalTest.java:108)  Assert.assertTrue(optimizer.getIterations() > 0);",
                "failed_line": 108
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
                "function_name": "testMaximize2",
                "src": "    public void testMaximize2() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MAXIMIZE,\n                                 new InitialGuess(new double[] { 1, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);\n        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);\n        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize2(SimplexOptimizerMultiDirectionalTest.java:129)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize2(SimplexOptimizerMultiDirectionalTest.java:129)  Assert.assertTrue(optimizer.getIterations() > 0);",
                "failed_line": 129
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
                "function_name": "testMinimize1",
                "src": "    public void testMinimize1() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { -3, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);\n        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);\n        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize1(SimplexOptimizerMultiDirectionalTest.java:66)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize1(SimplexOptimizerMultiDirectionalTest.java:66)  Assert.assertTrue(optimizer.getIterations() > 0);",
                "failed_line": 66
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
                "function_name": "testMinimize2",
                "src": "    public void testMinimize2() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 1, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);\n        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);\n        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize2(SimplexOptimizerMultiDirectionalTest.java:87)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize2(SimplexOptimizerMultiDirectionalTest.java:87)  Assert.assertTrue(optimizer.getIterations() > 0);",
                "failed_line": 87
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
                "function_name": "testMaximize1",
                "src": "    public void testMaximize1() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MAXIMIZE,\n                                 new InitialGuess(new double[] { -3, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);\n        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);\n        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize1(SimplexOptimizerNelderMeadTest.java:113)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize1(SimplexOptimizerNelderMeadTest.java:113)  Assert.assertTrue(optimizer.getIterations() > 0);",
                "failed_line": 113
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
                "function_name": "testMaximize2",
                "src": "    public void testMaximize2() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MAXIMIZE,\n                                 new InitialGuess(new double[] { 1, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);\n        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);\n        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize2(SimplexOptimizerNelderMeadTest.java:134)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize2(SimplexOptimizerNelderMeadTest.java:134)  Assert.assertTrue(optimizer.getIterations() > 0);",
                "failed_line": 134
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
                "function_name": "testMinimize1",
                "src": "    public void testMinimize1() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { -3, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);\n        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);\n        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize1(SimplexOptimizerNelderMeadTest.java:71)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize1(SimplexOptimizerNelderMeadTest.java:71)  Assert.assertTrue(optimizer.getIterations() > 0);",
                "failed_line": 71
            },
            "org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2": {
                "path": "apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java",
                "function_name": "testMinimize2",
                "src": "    public void testMinimize2() {\n        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);\n        final FourExtrema fourExtrema = new FourExtrema();\n\n        final PointValuePair optimum\n            = optimizer.optimize(new MaxEval(100),\n                                 new ObjectiveFunction(fourExtrema),\n                                 GoalType.MINIMIZE,\n                                 new InitialGuess(new double[] { 1, 0 }),\n                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));\n        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);\n        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);\n        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);\n        Assert.assertTrue(optimizer.getEvaluations() > 60);\n        Assert.assertTrue(optimizer.getEvaluations() < 90);\n\n        // Check that the number of iterations is updated (MATH-949).\n        Assert.assertTrue(optimizer.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2(SimplexOptimizerNelderMeadTest.java:92)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2(SimplexOptimizerNelderMeadTest.java:92)  Assert.assertTrue(optimizer.getIterations() > 0);",
                "failed_line": 92
            },
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations": {
                "path": "apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
                "function_name": "testGetIterations",
                "src": "    public void testGetIterations() {\n        AbstractLeastSquaresOptimizer optim = createOptimizer();\n        optim.optimize(new MaxEval(100), new Target(new double[] { 1 }),\n                       new Weight(new double[] { 1 }),\n                       new InitialGuess(new double[] { 3 }),\n                       new ModelFunction(new MultivariateVectorFunction() {\n                                \n                               public double[] value(double[] point) {\n                                   return new double[] {\n                                       FastMath.pow(point[0], 4)\n                                   };\n                               }\n                           }),\n                       new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n                                \n                               public double[][] value(double[] point) {\n                                   return new double[][] {\n                                       { 0.25 * FastMath.pow(point[0], 3) }\n                                   };\n                               }\n                           }));\n\n        Assert.assertTrue(optim.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)  Assert.assertTrue(optim.getIterations() > 0);"
            },
            "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations": {
                "path": "apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java",
                "function_name": "testGetIterations",
                "src": "    public void testGetIterations() {\n        AbstractLeastSquaresOptimizer optim = createOptimizer();\n        optim.optimize(new MaxEval(100), new Target(new double[] { 1 }),\n                       new Weight(new double[] { 1 }),\n                       new InitialGuess(new double[] { 3 }),\n                       new ModelFunction(new MultivariateVectorFunction() {\n                                \n                               public double[] value(double[] point) {\n                                   return new double[] {\n                                       FastMath.pow(point[0], 4)\n                                   };\n                               }\n                           }),\n                       new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n                                \n                               public double[][] value(double[] point) {\n                                   return new double[][] {\n                                       { 0.25 * FastMath.pow(point[0], 3) }\n                                   };\n                               }\n                           }));\n\n        Assert.assertTrue(optim.getIterations() > 0);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n\tat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError\n\tat org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerAbstractTest.testGetIterations(AbstractLeastSquaresOptimizerAbstractTest.java:131)  Assert.assertTrue(optim.getIterations() > 0);"
            }
        }
    },
    "Math_36": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
                "start_loc": 683,
                "end_loc": 689,
                "buggy_function": "     \n    public double doubleValue() {\n        double result = numerator.doubleValue() / denominator.doubleValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }\n",
                "fixed_function": "     \n    public double doubleValue() {\n        double result = numerator.doubleValue() / denominator.doubleValue();\n        if (Double.isNaN(result)) {\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n            int shift = Math.max(numerator.bitLength(),\n                                 denominator.bitLength()) - Double.MAX_EXPONENT;\n            result = numerator.shiftRight(shift).doubleValue() /\n                denominator.shiftRight(shift).doubleValue();\n        }\n        return result;\n    }\n",
                "comment": "    /**\n     * <p>\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>double</tt>\n     * @see java.lang.Number#doubleValue()\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.fraction.BigFractionTest::testDoubleValueForLargeNumeratorAndDenominator"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
                "start_loc": 730,
                "end_loc": 736,
                "buggy_function": "     \n    public float floatValue() {\n        float result = numerator.floatValue() / denominator.floatValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }\n",
                "fixed_function": "     \n    public float floatValue() {\n        float result = numerator.floatValue() / denominator.floatValue();\n        if (Double.isNaN(result)) {\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n            int shift = Math.max(numerator.bitLength(),\n                                 denominator.bitLength()) - Float.MAX_EXPONENT;\n            result = numerator.shiftRight(shift).floatValue() /\n                denominator.shiftRight(shift).floatValue();\n        }\n        return result;\n    }\n",
                "comment": "    /**\n     * <p>\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>float</tt>.\n     * @see java.lang.Number#floatValue()\n     */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.fraction.BigFractionTest::testFloatValueForLargeNumeratorAndDenominator"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.fraction.BigFractionTest::testFloatValueForLargeNumeratorAndDenominator": {
                "path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
                "function_name": "testFloatValueForLargeNumeratorAndDenominator",
                "src": "    public void testFloatValueForLargeNumeratorAndDenominator() {\n        final BigInteger pow400 = BigInteger.TEN.pow(400);\n        final BigInteger pow401 = BigInteger.TEN.pow(401);\n        final BigInteger two = new BigInteger(\"2\");\n        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n                                                  pow400.multiply(two));\n\n        Assert.assertEquals(5, large.floatValue(), 1e-15);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<5.0> but was:<NaN>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.fraction.BigFractionTest.testFloatValueForLargeNumeratorAndDenominator(BigFractionTest.java:222)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<5.0> but was:<NaN>\n\tat org.apache.commons.math.fraction.BigFractionTest.testFloatValueForLargeNumeratorAndDenominator(BigFractionTest.java:222)  Assert.assertEquals(5, large.floatValue(), 1e-15);",
                "failed_line": 222
            },
            "org.apache.commons.math.fraction.BigFractionTest::testDoubleValueForLargeNumeratorAndDenominator": {
                "path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
                "function_name": "testDoubleValueForLargeNumeratorAndDenominator",
                "src": "    public void testDoubleValueForLargeNumeratorAndDenominator() {\n        final BigInteger pow400 = BigInteger.TEN.pow(400);\n        final BigInteger pow401 = BigInteger.TEN.pow(401);\n        final BigInteger two = new BigInteger(\"2\");\n        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n                                                  pow400.multiply(two));\n\n        Assert.assertEquals(5, large.doubleValue(), 1e-15);\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: expected:<5.0> but was:<NaN>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:743)\n\tat org.junit.Assert.assertEquals(Assert.java:494)\n\tat org.junit.Assert.assertEquals(Assert.java:592)\n\tat org.apache.commons.math.fraction.BigFractionTest.testDoubleValueForLargeNumeratorAndDenominator(BigFractionTest.java:210)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: expected:<5.0> but was:<NaN>\n\tat org.apache.commons.math.fraction.BigFractionTest.testDoubleValueForLargeNumeratorAndDenominator(BigFractionTest.java:210)  Assert.assertEquals(5, large.doubleValue(), 1e-15);",
                "failed_line": 210
            }
        }
    },
    "Math_49": {
        "function_num": 4,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
                "start_loc": 342,
                "end_loc": 351,
                "buggy_function": "    public OpenMapRealVector ebeDivide(RealVector v) {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = res.entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n        }\n        return res;\n    }\n",
                "fixed_function": "    public OpenMapRealVector ebeDivide(RealVector v) {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n        }\n        return res;\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
                "start_loc": 354,
                "end_loc": 364,
                "buggy_function": "     \n    public OpenMapRealVector ebeDivide(double[] v) {\n        checkVectorDimensions(v.length);\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = res.entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() / v[iter.key()]);\n        }\n        return res;\n    }\n",
                "fixed_function": "     \n    public OpenMapRealVector ebeDivide(double[] v) {\n        checkVectorDimensions(v.length);\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() / v[iter.key()]);\n        }\n        return res;\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [],
                "no_relatable_failing_tests": true
            },
            {
                "path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
                "start_loc": 367,
                "end_loc": 376,
                "buggy_function": "    public OpenMapRealVector ebeMultiply(RealVector v) {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = res.entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n        }\n        return res;\n    }\n",
                "fixed_function": "    public OpenMapRealVector ebeMultiply(RealVector v) {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n        }\n        return res;\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.linear.SparseRealVectorTest::testConcurrentModification"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
                "start_loc": 379,
                "end_loc": 389,
                "buggy_function": "     \n    public OpenMapRealVector ebeMultiply(double[] v) {\n        checkVectorDimensions(v.length);\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = res.entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() * v[iter.key()]);\n        }\n        return res;\n    }\n",
                "fixed_function": "     \n    public OpenMapRealVector ebeMultiply(double[] v) {\n        checkVectorDimensions(v.length);\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() * v[iter.key()]);\n        }\n        return res;\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "non_directly_related_tests": [
                    "org.apache.commons.math.linear.SparseRealVectorTest::testConcurrentModification"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.linear.SparseRealVectorTest::testConcurrentModification": {
                "path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
                "function_name": "testConcurrentModification",
                "src": "    public void testConcurrentModification() {\n        final RealVector u = new OpenMapRealVector(3, 1e-6);\n        u.setEntry(0, 1);\n        u.setEntry(1, 0);\n        u.setEntry(2, 2);\n\n        final RealVector v1 = new OpenMapRealVector(3, 1e-6);\n        final double[] v2 = new double[3];\n        v1.setEntry(0, 0);\n        v2[0] = 0;\n        v1.setEntry(1, 3);\n        v2[1] = 3;\n        v1.setEntry(2, 0);\n        v2[2] = 0;\n\n        RealVector w;\n\n        w = u.ebeMultiply(v1);\n        w = u.ebeMultiply(v2);\n\n        w = u.ebeDivide(v1);\n        w = u.ebeDivide(v2);\n    }",
                "stack_trace": "org.apache.commons.math.MathRuntimeException$6: map has been modified while iterating\n\tat org.apache.commons.math.MathRuntimeException.createConcurrentModificationException(MathRuntimeException.java:373)\n\tat org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator.advance(OpenIntToDoubleHashMap.java:564)\n\tat org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:372)\n\tat org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:33)\n\tat org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(SparseRealVectorTest.java:1021)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "org.apache.commons.math.MathRuntimeException$6: map has been modified while iterating\n\tat org.apache.commons.math.MathRuntimeException.createConcurrentModificationException(MathRuntimeException.java:373)  return new ConcurrentModificationException() {            /** Serializable version identifier. */            private static final long serialVersionUID = -1878427236170442052L;            /** {@inheritDoc} */                         public String getMessage() {                return buildMessage(Locale.US, pattern, arguments);            }            /** {@inheritDoc} */                         public String getLocalizedMessage() {                return buildMessage(Locale.getDefault(), pattern, arguments);            }        };\n\tat org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:372)  iter.advance();\n\tat org.apache.commons.math.linear.OpenMapRealVector.ebeMultiply(OpenMapRealVector.java:33)  public class OpenMapRealVector extends AbstractRealVector\n\tat org.apache.commons.math.linear.SparseRealVectorTest.testConcurrentModification(SparseRealVectorTest.java:1021)  w = u.ebeMultiply(v1);",
                "failed_line": 1021
            }
        }
    },
    "Math_77": {
        "function_num": 2,
        "functions": [
            {
                "path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
                "start_loc": 717,
                "end_loc": 724,
                "buggy_function": "     \n    public double getLInfNorm() {\n        double max = 0;\n        for (double a : data) {\n            max += Math.max(max, Math.abs(a));\n        }\n        return max;\n    }\n",
                "fixed_function": "     \n    public double getLInfNorm() {\n        double max = 0;\n        for (double a : data) {\n            max = Math.max(max, Math.abs(a));\n        }\n        return max;\n    }\n",
                "comment": "    /** {@inheritDoc} */\n",
                "directly_related_tests": [
                    "org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions"
                ]
            },
            {
                "path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
                "start_loc": 498,
                "end_loc": 506,
                "buggy_function": "    public double getLInfNorm() {\n        double max = 0;\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            max += iter.value();\n        }\n        return max;\n    }\n",
                "fixed_function": null,
                "comment": "",
                "directly_related_tests": [
                    "org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions"
                ]
            }
        ],
        "trigger_test": {
            "org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions": {
                "path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
                "function_name": "testBasicFunctions",
                "src": "    public void testBasicFunctions() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        assertEquals(\"compare values  \", 17.0, d_getL1Norm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance );\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_2 );\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_3 );\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance );\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        assertEquals(\"compare val \",32d, dot);\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        assertEquals(\"compare val \",32d, dot_2);\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n\n        try {\n            v_null.unitVector();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n        try {\n            v_null.unitize();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);\n\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: compare values   expected:<6.0> but was:<128.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:244)\n\tat org.apache.commons.math.linear.ArrayRealVectorTest.testBasicFunctions(ArrayRealVectorTest.java:1098)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: compare values   expected:<6.0> but was:<128.0>\n\tat org.apache.commons.math.linear.ArrayRealVectorTest.testBasicFunctions(ArrayRealVectorTest.java:1098)  assertEquals(\"compare values  \", 6.0, d_getLInfNorm);",
                "failed_line": 1098
            },
            "org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions": {
                "path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
                "function_name": "testBasicFunctions",
                "src": "    public void testBasicFunctions() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        assertEquals(\"compare values  \", 17.0, d_getL1Norm);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance );\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_2 );\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance );\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        assertEquals(\"compare val \",32d, dot);\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        assertEquals(\"compare val \",32d, dot_2);\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);\n\n        try {\n            v_null.unitVector();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);\n        try {\n            v_null.unitize();\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);\n\n    }",
                "stack_trace": "junit.framework.AssertionFailedError: compare values   expected:<6.0> but was:<-3.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:244)\n\tat org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(SparseRealVectorTest.java:968)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                "clean_error_message": "junit.framework.AssertionFailedError: compare values   expected:<6.0> but was:<-3.0>\n\tat org.apache.commons.math.linear.SparseRealVectorTest.testBasicFunctions(SparseRealVectorTest.java:968)  assertEquals(\"compare values  \", 6.0, d_getLInfNorm);",
                "failed_line": 968
            }
        },
        "Time_2": {
            "function_num": 3,
            "functions": [
                {
                    "path": "src/main/java/org/joda/time/Partial.java",
                    "start_loc": 189,
                    "end_loc": 251,
                    "buggy_function": "    public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n        super();\n        chronology = DateTimeUtils.getChronology(chronology).withUTC();\n        iChronology = chronology;\n        if (types == null) {\n            throw new IllegalArgumentException(\"Types array must not be null\");\n        }\n        if (values == null) {\n            throw new IllegalArgumentException(\"Values array must not be null\");\n        }\n        if (values.length != types.length) {\n            throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n        }\n        if (types.length == 0) {\n            iTypes = types;\n            iValues = values;\n            return;\n        }\n        for (int i = 0; i < types.length; i++) {\n            if (types[i] == null) {\n                throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n            }\n        }\n        DurationField lastUnitField = null;\n        for (int i = 0; i < types.length; i++) {\n            DateTimeFieldType loopType = types[i];\n            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n            if (i > 0) {\n                int compare = lastUnitField.compareTo(loopUnitField);\n                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n                    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                            types[i - 1].getName() + \" < \" + loopType.getName());\n                } else if (compare == 0) {\n                    if (types[i - 1].getRangeDurationType() == null) {\n                        if (loopType.getRangeDurationType() == null) {\n                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                                            types[i - 1].getName() + \" and \" + loopType.getName());\n                        }\n                    } else {\n                        if (loopType.getRangeDurationType() == null) {\n                            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                                    types[i - 1].getName() + \" < \" + loopType.getName());\n                        }\n                        DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (lastRangeField.compareTo(loopRangeField) < 0) {\n                            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                                    types[i - 1].getName() + \" < \" + loopType.getName());\n                        }\n                        if (lastRangeField.compareTo(loopRangeField) == 0) {\n                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                                            types[i - 1].getName() + \" and \" + loopType.getName());\n                        }\n                    }\n                }\n            }\n            lastUnitField = loopUnitField;\n        }\n        \n        iTypes = (DateTimeFieldType[]) types.clone();\n        chronology.validate(this, values);\n        iValues = (int[]) values.clone();\n    }\n",
                    "fixed_function": "    public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {\n        super();\n        chronology = DateTimeUtils.getChronology(chronology).withUTC();\n        iChronology = chronology;\n        if (types == null) {\n            throw new IllegalArgumentException(\"Types array must not be null\");\n        }\n        if (values == null) {\n            throw new IllegalArgumentException(\"Values array must not be null\");\n        }\n        if (values.length != types.length) {\n            throw new IllegalArgumentException(\"Values array must be the same length as the types array\");\n        }\n        if (types.length == 0) {\n            iTypes = types;\n            iValues = values;\n            return;\n        }\n        for (int i = 0; i < types.length; i++) {\n            if (types[i] == null) {\n                throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);\n            }\n        }\n        DurationField lastUnitField = null;\n        for (int i = 0; i < types.length; i++) {\n            DateTimeFieldType loopType = types[i];\n            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n            if (i > 0) {\n                int compare = lastUnitField.compareTo(loopUnitField);\n                if (compare < 0) {\n                    throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                            types[i - 1].getName() + \" < \" + loopType.getName());\n                } else if (compare == 0) {\n                    if (types[i - 1].getRangeDurationType() == null) {\n                        if (loopType.getRangeDurationType() == null) {\n                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                                            types[i - 1].getName() + \" and \" + loopType.getName());\n                        }\n                    } else {\n                        if (loopType.getRangeDurationType() == null) {\n                            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                                    types[i - 1].getName() + \" < \" + loopType.getName());\n                        }\n                        DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (lastRangeField.compareTo(loopRangeField) < 0) {\n                            throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                                    types[i - 1].getName() + \" < \" + loopType.getName());\n                        }\n                        if (lastRangeField.compareTo(loopRangeField) == 0) {\n                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                                            types[i - 1].getName() + \" and \" + loopType.getName());\n                        }\n                    }\n                }\n            }\n            lastUnitField = loopUnitField;\n        }\n        \n        iTypes = (DateTimeFieldType[]) types.clone();\n        chronology.validate(this, values);\n        iValues = (int[]) values.clone();\n    }\n",
                    "comment": "    /**\n     * Constructs a Partial with the specified fields and values.\n     * The fields must be specified in the order largest to smallest.\n     * <p>\n     * The constructor uses the specified chronology.\n     * \n     * @param types  the types to create the partial from, not null\n     * @param values  the values to store, not null\n     * @param chronology  the chronology, null means ISO\n     * @throws IllegalArgumentException if the types or values are invalid\n     */\n",
                    "no_relatable_failing_tests": true
                },
                {
                    "path": "src/main/java/org/joda/time/Partial.java",
                    "start_loc": 428,
                    "end_loc": 476,
                    "buggy_function": "    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n            \n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            break;\n                        } else if (compare == 0) {\n                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            if (rangeField.compareTo(loopRangeField) > 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            Partial newPartial = new Partial(newTypes, newValues, iChronology);\n            iChronology.validate(newPartial, newValues);\n            return newPartial;\n        }\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = getValues();\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues);\n    }\n",
                    "fixed_function": "    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n            \n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            break;\n                        } else if (compare == 0) {\n                            if (fieldType.getRangeDurationType() == null) {\n                                break;\n                            }\n                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            if (rangeField.compareTo(loopRangeField) > 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            Partial newPartial = new Partial(newTypes, newValues, iChronology);\n            iChronology.validate(newPartial, newValues);\n            return newPartial;\n        }\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = getValues();\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues);\n    }\n",
                    "comment": "    //-----------------------------------------------------------------------\n    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n",
                    "no_relatable_failing_tests": true
                },
                {
                    "path": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
                    "start_loc": 226,
                    "end_loc": 228,
                    "buggy_function": "    public int compareTo(DurationField durationField) {\n        return 0;\n    }\n",
                    "fixed_function": "    public int compareTo(DurationField durationField) {\n        if (durationField.isSupported()) {\n            return 1;\n        }\n        return 0;\n    }\n",
                    "comment": "    /**\n     * Always returns zero, indicating that sort order is not relevent.\n     *\n     * @return zero always\n     */\n",
                    "directly_related_tests": [
                        "src/test/java/org/joda/time/TestPartial_Basics.java"
                    ]
                }
            ],
            "trigger_test": {
                "org.joda.time.TestPartial_Basics::testWith_baseAndArgHaveNoRange": {
                    "path": "src/test/java/org/joda/time/TestPartial_Basics.java",
                    "function_name": "testWith_baseAndArgHaveNoRange",
                    "src": "    public void testWith_baseAndArgHaveNoRange() {\n        Partial test = new Partial(DateTimeFieldType.year(), 1);\n        Partial result = test.with(DateTimeFieldType.era(), 1);\n        assertEquals(2, result.size());\n        assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n        assertEquals(1, result.indexOf(DateTimeFieldType.year()));\n    }",
                    "stack_trace": "java.lang.IllegalArgumentException: Types array must not contain duplicate: era and year\n\tat org.joda.time.Partial.<init>(Partial.java:224)\n\tat org.joda.time.Partial.with(Partial.java:466)\n\tat org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange(TestPartial_Basics.java:469)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
                    "clean_error_message": "java.lang.IllegalArgumentException: Types array must not contain duplicate: era and year\n\tat org.joda.time.Partial.<init>(Partial.java:224)  throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +                                            types[i - 1].getName() + \" and \" + loopType.getName());\n\tat org.joda.time.Partial.with(Partial.java:466)  Partial newPartial = new Partial(newTypes, newValues, iChronology);\n\tat org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange(TestPartial_Basics.java:469)  Partial result = test.with(DateTimeFieldType.era(), 1);",
                    "failed_line": 469
                }
            }
        }
    }
}